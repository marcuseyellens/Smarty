commit 29475cfe6d259bce929eeef3a1dbf2ada3db2e37
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Mar 16 22:03:30 2022 -0400

    UFC-412 Fixed how external links are handled in the native mobile apps. (#232)
    
    Changelog:
    
    - [not public] Fixed how external links are handled in the native mobile apps.
    
    Implementation Details:
    
    - Brought in @capacitor/browser to handle proper external link navigation (in particular, the Changelog link).
    - Modified the Android port forwarding to include the Marketing service.
    - Consolidated the Android port forwarding scripts into just one.
    
    Tech Debt:
    
    - N/A

commit af3ae4ffc8f8e9fec46db83edcc5910e2b2cc00c
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Mar 16 21:10:57 2022 -0400

    UFC-411 Added a dedicated refresh button for the native mobile apps. (#231)
    
    Changelog:
    
    - [not public] Added a dedicated refresh button for native mobile apps.
    
    Implementation Details:
    
    - Refactored out 'app refresh' logic from the app boot process.
    - Fixed the `cap:run:electron` script to work properly.
    - Wrote up basic instructions for running the native apps.
    
    Tech Debt:
    
    - N/A

commit 8e124cbf699d8219ac7a4744987a7b968d266668
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Mar 13 22:12:17 2022 -0400

    UFC-413 Removed the 'Check for Updates' button in the native apps. (#230)
    
    Changelog:
    
    - [not public] Removed the 'Check for Updates' button in the native apps.
    
    Implementation Details:
    
    - [misc] Upgraded gradle for the Android app.
    
    Tech Debt:
    
    - N/A

commit c06188bb25a2f235771eb7ade160a893ca719dd5
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Feb 13 20:49:45 2022 -0500

    UFC-409 Added a Kubails variable for the docker registry used in the templates. (#229)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Helm templates can be configured to use a custom Docker registry through Kubails.
    
    Tech Debt:
    
    - N/A

commit 1e1311d892d259815bc5a5432a42cf11a0f094fd
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Feb 10 21:35:42 2022 -0500

    UFC-410 Modified Backend to disable the Internal Notifier when the Slack webhooks are missing. (#228)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Backend internal notifier class now just logs notifications if the Slack webhooks are not provided.
    
    Tech Debt:
    
    - N/A

commit 57daa0edd4f5a95de0401374b5f67403ef72a569
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 8 20:54:29 2022 -0500

    UFC-407 Modified Backend to disable the Mailer when the Mailgun API key is missing. (#227)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Backend mailer class now just logs emails if the Mailgun API key is not provided.
    
    Tech Debt:
    
    - N/A

commit b531cf55e523d23e91ea535fdc13cf1a95d40c22
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Feb 7 21:43:53 2022 -0500

    UFC-406 Modified Backend to disable subscriptions when Stripe API key is missing; fixed how feature flags are set in the Frontend. (#226)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Modified Backend billing class to disable the subscriptions feature flag when the Stripe API key isn't provided.
    - Fixed how the Frontend fetches feature flags from the Backend so that the config doesn't get overriden by redux-persist's hydration.
    
    Tech Debt:
    
    - N/A

commit 1425d6465cddf08b14e0efe76a73bf00c8e9fa4b
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Jan 21 19:44:21 2022 -0500

    UFC-397 Fixed autofilling transactions overwriting the date when editing a transaction. (#225)
    
    Changelog:
    
    - Fixed a bug where autofilling a transaction while editing a transaction would cause the date to reset to today.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit 540d7bf9db100d6ccbff611f63f65e6c57ee270d
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Jan 18 20:01:14 2022 -0500

    UFC-405 Fixed issues introduced by rushing UFC-404. (#224)
    
    Changelog:
    
    - [not public] Fixed issues introduced by rushing UFC-404.
            - `lastRealizedDate` is now encrypted.
            - `lastRealizedDate` is now included in backups.
            - Recurring Transactions can now be created again.
    
    Implementation Details:
    
    - Added a migration to wipe all of the old `lastRealizedDate` values since they need to be cleaned for encryption to take effect.
    
    Tech Debt:
    
    - N/A

commit 1ff0ca933589232fa3e0af9f7c50a58b82c75f94
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jan 16 17:16:35 2022 -0500

    UFC-404 Fixed bug where you couldn't delete the latest realized transaction for a recurring transaction. (#223)
    
    Changelog:
    
    - Fixed a bug where you couldn't delete the latest transaction created by a recurring transaction without it being recreated.
    
    Implementation Details:
    
    - Added the `lastRealizedDate` field to recurring transactions.
    - Modified the realization algo to use the `lastRealizedDate` so that we don't recreate transactions that were deleted.
    
    Tech Debt:
    
    - N/A

commit 2359edd77a7734b633ac23eaf1897aecedf6a928
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Jan 15 10:38:13 2022 -0500

    UFC-403, UFC-403 Fixed bug with recurring transactions not realizing if they've never realized; fixed bug where asc/desc Transaction sort was not stable. (#222)
    
    Changelog:
    
    - Fixed a bug where recurring transactions wouldn't 'resolve' if you miss the day they resolve and they've never resolved before (UFC-402).
    - Fixed a bug where the transactions displayed for an account and the corresponding running balances did not match (UFC-403).
    
    Implementation Details:
    
    - UFC-402 was because I incorrectly chose `today` as the default start date for realization, when it should have been the recurring transaction's startDate.
    - UFC-403 was because transaction date sorting was not stable for asc/desc â€” they would produce different results if two transactions had the same dates/createdAt dates. So... we added in extra sorting (amount/description).
    
    Tech Debt:
    
    - N/A

commit c075806467f05214b81aefb2455ae43c4fb42f54
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jan 13 19:34:10 2022 -0500

    UFC-398, UFC-401 Fixed recurring transactions to realize since the last transaction; fixed editing realized transactions so that they don't get recreated. (#221)
    
    Changelog:
    
    - Fixed a bug where recurring transactions wouldn't 'resolve' if you missed their scheduled day (UFC-398).
    - Fixed a bug where editing the 'resolved' transaction from a recurring transaction that was scheduled for today would cause the recurring transaction to resolve again after a refresh, creating a duplicate (UFC-401).
    
    Implementation Details:
    
    - Turns out fixing UFC-398 was a lot more trivial than I thought it was going to be. I basically forgot that we had a map of realized transactions mapped to recurring transactions, so all that was needed was to realize over the date range of [last realized transaction, today].
    - Moved the core logic for realization out of the saga and into the `RecurringTransaction` model just for easier testing.
    - Changed how virtual transactions are identified (using an explicit flag) so that they can be differentiated from transactions that were realized in the future by artificially changing the date.
    - I also fixed UFC-401 here just because it ended up being a super simple fix.
    
    Tech Debt:
    
    - Should probably modify `VirtualTransactions.addMany` to account for transactions that have already been realized in the future (see point 3 above) so that virtual transactions aren't even created for dates that have been artificially realized in the future, but since it's such an edge case, I didn't really want to do it now.

commit d8b18880bd685bd6fd1ec0aadb4b2ace66bc0da5
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jan 6 19:45:41 2022 -0500

    UFC-400 Fixed bug where recurring transactions don't concretely realize for no-account users. (#220)
    
    Changelog:
    
    - Fixed a bug where recurring transactions don't convert to 'real' transactions on the day they are supposed to [only affected users without an account].
    
    Implementation Details:
    
    - Seems like the `triggerConcreteRealizations` action in `appBoot` was incorrectly placed inside a `!noAccount` guard. Moving it out fixed the issue.
    
    Tech Debt:
    
    - N/A

commit 86901ba9f4917a016bc0dc22cc3e1f7c2ffc5a83
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jan 2 15:44:02 2022 -0500

    UFC-399 Fixed a bug in DateService.isTodayInMonth that was found with the new year. (#219)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - This bug was found during the master merge of UFC-395. Seems like `DateService.isTodayInMonth` didn't properly account for the date also needing to be in the same year.
    
    Tech Debt:
    
    - N/A

commit 5fb52cc3c90cc265cd0c192273a2b6136413d2f6
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jan 2 15:00:18 2022 -0500

    UFC-395, UFC-396 Built the Frontend for the currency symbol preference; fixed import rules to be deleted during user account deletion. (#218)
    
    Changelog:
    
    - Added a preference for changing the currency symbol that is displayed across the app. Rejoice world! For you are no longer beholden to the '$'!
    - Fixed a bug where import rules weren't deleted during user account deletion or the backup restore process (UFC-396).
    
    Implementation Details (Frontend):
    
    - Built the Frontend for the currency symbol preference.
    - Modified `redux-e2e-encryption` to support literal `null` values (to support the case of the `null` default currency).
    - Modified the `redux-e2e-encryption` middleware to log any encryption/decryption errors.
    - Modified `ValueFormatting.formatMoney` to support taking the currency symbol as an option; modified all components to pass in the symbol from Redux.
    - Removed the `abbreviateMoney` function from `ValueFormatting` since I only just realized that it wasn't being used anywhere.
    - Re-purposed the ListItemCheckbox to act as a 'success indicator' for inputs.
    - Finally added an 'error' state to the `SelectInput`s (along with the aforementioned 'success' state).
    - Improved the `Input` to use a dynamic amount of left-padding to account for different sized currency prefixes.
    - Minor padding improvement in the `TransactionForm` around the Date Options.
    
    Implementation Details (Backend):
    
    - Added a seeder for the default preferences for the test user, since that wasn't done last ticket.
    - Fixed the `deleteUserData` hook to delete import rules (UFC-396). Also modified the underlying import rule hooks to handle multi-remove.
    - Enabled the `create` method for preferences so that it can be used during a backup restore. However, locked it down to prevent creating more than one row.
    
    Implementation Details (Repo Scripts):
    
    - Changed the default number of parallel Cypress instances to 16.
    
    Tech Debt:
    
    - react-spring is broken under Storybook; components that use react-spring do not animate when viewed in Storybook.
            - This seems to be fixable by upgrading out from the v9 release candidate (I tried going to v9.0.0 proper and the latest v9.3.3), but doing so resulted in hitting this problem: https://github.com/pmndrs/react-spring/issues/1461
            - tl;dr decimals were being lopped off round numbers (e.g. "0.00" was just being displayed as "0" in the animated `CurrentAmount` component)
            - Since that error is user-facing, whereas not working in Storybook isn't, I've decided to just not upgrade until that issue gets fixed (hopefully in v9.4.0).
    - Continuing the tradition of laziness, a good amount of the new functionality for `SelectInput` was just copied over from `Input`.
            - In particular, they are directly sharing CSS classes as well as duplicating basically all of the error/success code.
            - Not to mention the whole hacky 'hasSuccess/StatusState' props. Very jank way of supporting true backwards compatibility.
            - Not pretty, but it works.

commit da1683edc9c35739843defb78b52de76da39cf62
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Dec 4 20:18:03 2021 -0500

    UFC-394 Built the Backend for the currency symbol preference. (#217)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the Backend (tables, migrations, models, services) for the new 'preferences' data.
    - Added Cypress `tempIntegration` folder to lint ignore.
    - Added the `build` folders for the iOS/Android Capacitor folders to the Frontend gitignore so that `ag` doesn't search them.
    
    Tech Debt:
    
    - Realized that we don't delete the import rules as part of user account deletion. Opened UFC-396 to address this.

commit 0cbe9bb0007ce38ce3615faa57b1cd6de8c9076c
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Aug 23 22:28:35 2021 -0400

    UFC-391 Parallelized Cypress tests even further with automatic file splitting. (#216)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Wrote a script to automatically split the spec files by describe blocks into individual files, rather than manually splitting them.
    - Recombined the spec files that had been manually split, while flattening/splitting describe blocks for more smaller blocks.
    - Created npm scripts for the spec split/cypress run parallel scripts.
    - Removed the `cypress_run_parallel` (non-single) script from the Frontend scripts since it has been superceded by the top-level version.
    - Added log collection/collation and automatic retries to the cypress run parallel script.
    - Added file descriptor aliases to the cypress run parallel script.
    - Disabled a cypress option that was potentially causing errors in the tests.
    
    Tech Debt:
    
    - N/A

commit f2e1d4f0757925f5dd5d322673b0da3709588da3
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Aug 22 14:06:50 2021 -0400

    UFC-392 Fixed the bug where Transfer transactions paying off credit accounts wouldn't show up in the Account Balance Chart. (#215)
    
    Changelog:
    
    - [Fixed] Fixed an issue where transactions that would cause an account's balance to reach $0 would not show up in the account's balance chart.
    
    Implementation Details:
    
    - Using "||" with $0 balances is dangerous. Needed a "??" instead.
    
    Tech Debt:
    
    - N/A

commit 00f3aaaf3faa9684da3a45e3c2c495c2f8f5172f
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Aug 19 20:52:15 2021 -0400

    UFC-390 Implemented custom pagination sizes. (#214)
    
    Changelog:
    
    - [Feature] Page size can now be changed for paginated lists/tables like transactions! Apart from the default size of 25, choose from 50, 100, 200, or the ever elusive "all".
    
    Implementation Details:
    
    - Built the components/actions for enabling pagination page size changing.
    - Modified the `PaginationFooter` to include the `PaginationPageSize` in a funky way so that it would be nicely aligned regardless of mobile or desktop.
    - Made the `IntervalSwitcher` explicitly have the `input-height` mixin, to match everything else.
    - Made further adjustments to improve how the "parallel cypress" scripts work.
    - Copied the root `.env` to `services/` since some versions of `docker-compose` read it from the folder where the config file is.
    - Finally decided to remove the `kubails` commands from the Makefile in favour of just `docker-compose`, so that machines without Kubails can run those commands.
    - Removed the Backend/Frontend volumes from the Cypress `docker-compose` config, since they were slowing down/failing boot when running many parallel instances.
    
    Tech Debt:
    
    - Going back to `usePagination`, I found it quite weird that I decided to 0-index `totalPages`, since, ya know, that should just be a total number like an array `length` is. But I guess for convenience, it was easier to 0-index it for the consuming components. Oh well.

commit e0e375f4773ddbe9371d02381595a6b40157e8b0
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Aug 18 15:44:32 2021 -0400

    UFC-384 Bigger cluster nodes, more frequent descheduler runs, Nginx cache clearing. (#213)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Created a new node pool for the cluster with larger nodes (e2-standard-2 vs e2-medium) and 3 nodes instead of 2.
    - Made the descheduler job more frequently at every half hour rather than every hour.
    - Added clearing the Nginx caches as a build step when deploying to production.
    
    Tech Debt:
    
    - N/A

commit 99bcdfc0e8e9e3b3da46e62180c3f3f8ed749497
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Aug 17 15:28:48 2021 -0400

    UFC-389 Created scripts for parallelizing Cypress tests. (#212)
    
    Changelog:
    
    - [not-public] Fixed a regression with entering no-account mode after having already signed in with an actual account.
    
    Implementation Details:
    
    - Created scripts to bring up/tear down multiple copies of the docker-compose services.
    - Created scripts to run multiple instances of Cypress to run the specs in parallel.
    - Created a separate docker-compose config for spinning up the services with parameterized ports.
    - Modified the `cypress_reset_db` script to support arbitrary ports for the frontend/backend services.
    - Modified Cypress to support arbitrary ports for the frontend/backend services.
    - Split up the spec files so that they would be smaller and thus more parallelizable.
    - Upgraded Cypress (and related packages) to the latest version(s).
    - Upgraded some Frontend packages with an `audit fix`.
    
    Tech Debt:
    
    - Some of the bash scripts are pretty rough. Which is kinda true of most bash scripts, so...
    - The fact that we're now just appending numbers to spec file names in order to split them apart is quite jank. The next step would be to automate the process of splitting the files up at run time so that we can parallelize at an even more granular level, but without this messy manual file splitting.
    - We're now up to 3 docker-compose config files. How sustainable is this in the long-run? Probably fine, considering it's all development related and it's not like we modify them on any frequent basis. Although it does require us to be a bit more diligent whenever we add new services (since Kubails only cares about the primary one).

commit 6d42e43b5c5b8152c48d7ff9c55aa83b994157d6
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Aug 11 20:48:31 2021 -0400

    UFC-385 Replaced isomorphic-webcrypto with straight WebCrypto, using the package only for Jest. (#211)
    
    Changelog:
    
    - [not-public] Switched the `redux-e2e-encryption` middleware to use WebCrypto directly and only use `isomorphic-webcrypto` in Jest.
    
    Implementation Details:
    
    - The crypto middleware now just pulls WebCrypto from `window`.
    - Jest now polyfills WebCrypto with `isomorphic-webcrypto` as part of its configuration.
    - Replaced our patched version of `isomorphic-webcrypto` with the regular version. We can now just throw away that patched version.
    
    Tech Debt:
    
    - Pff, this _relieves_ us of the horrible tech debt of maintaining our own fork of a package.

commit 0f9681e6a09c40de4f6bb113fd4e866fee754f90
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Aug 11 19:35:38 2021 -0400

    UFC-388 Fixed no-account mode to not kick you out if you were already logged in without an account. (#210)
    
    Changelog:
    
    - [Fixed] Logging in without an account while you were already logged in without an account will no longer kick you out of the app.
    
    Implementation Details [frontend]:
    
    - Changed the Authentication scene to only initiate the no-account login if the user wasn't already logged in without an account.
    
    Tech Debt:
    
    - I tried to change the `authLoginWithoutAccount` saga to check the `noAccount` state before doing anything, but it wouldn't work. I think, because of how the URL redirection works, it has the wrong state at just the wrong time. So... we did the slightly worse thing and modified the Authentication scene instead.

commit ad73508fe491b8fcb4d95ecf4bd55cc95437d92a
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Aug 11 14:32:29 2021 -0400

    UFC-383 Made it so switching to Monthly goes to the current month if in the current year. (#209)
    
    Changelog:
    
    - [Changed] Switching to the 'Monthly' date range (from 'Yearly' or a 'Custom' range greater than one month) will now change the date range to the current month, rather than the month of the last end date.
    
    Implementation Details:
    
    - I mean, the changelog description kinda nails it. No other details needed.
    
    Tech Debt:
    
    - Just your daily reminder that the `DateService` continues to grow as a hydra.

commit 7ef5a681c88f32447f43a032abbc5ec69a93e261
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Aug 10 20:45:28 2021 -0400

    UFC-387 Made the Current/Recurring tab labels a bit more explicit and improved the Empty Area for recurring transactions. (#208)
    
    Changelog:
    
    - [Changed] Changed the labels for the tabs on the Transactions page from "Current" and "Recurring" to "Current Period" and "Recurring Templates" (only on desktop), to make it more clear what they are for.
    - [Changed] Improved the wording of the message displayed when the "Recurring Templates" tab has no recurring transactions.
    
    Implementation Details:
    
    - Modified the `TabBar` to support a new `smallLabel` value for the tabs, so that we can have different labels on mobile.
    - Refactored the `TransactionsList/Table` to no longer be directly connected; instead, `EmptyTransactionsArea` is now connected.
    - Modified the `EmptyTransactionsArea` to have different text for recurring transactions.
    - Modified the `TransactionForm` to support being passed a URL hash param to specify that the Recurring option should be selected by default.
    - Modified the `EmptyTransactionsArea` to use the above new hash param for recurring transactions.
    
    Tech Debt:
    
    - Depending on how many of these hash params we add to the `TransactionForm` (shouldn't be more than just the accounts after this), our current implementation might not be the most scalable. For example, having to generate the URLs (with the params) in different places might be suboptimal, along with internalizing the logic for parsing the params inside the form itself (rather than externalizing it to, say, the connect file).
    - We have continued to jank up the `TabBar` by adding _another_ condition that forces it to re-render/re-compute styles (now it's based on the navigation breakpoint). This adds just one more layer of 'jankiness' to its visuals when switching between breakpoints, but I think it should be fine. I mean, how often are people actually resizing their browser windows?

commit f1bbc0ce834634d8e291dd05d68f47d4c78e8e0b
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Aug 10 15:41:51 2021 -0400

    UFC-386 Fixed the loading time for navigating to the Settings page on desktop. (#207)
    
    Changelog:
    
    - [Changed] Reduced the time it takes for the Settings page to load when navigating to it through the dropdown on desktop.
    
    Implementation Details:
    
    - Changed the Settings option back from using a link (which caused a whole app reload).
    
    Tech Debt:
    
    - N/A

commit 554865365ffdb356c96f80e739453cd3d85cf407
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Aug 10 14:08:00 2021 -0400

    UFC-382 Spiked out mobile/desktop apps using Capacitor. (#206)
    
    Changelog:
    
    - [not-public] Created alpha builds of Android, iOS, and Electron apps using Capacitor.
    
    Implementation Details [frontend]:
    
    - Added Capacitor and generated Android, iOS, and Electron apps.
    - Modified the config to support taking REACT_APP build-time vars so that we can inject the correct environment for the native apps.
    - Improved how the app displays on notched iPhones: now it takes into account the provided CSS vars for padding.
    - Added support for the native 'Back' button on Android, so that it navigates through history rather than immediately closing the app.
    - Fixed the `Input` atom to explicitly have `type=text` as a default. This fixes one input that didn't have an explicit type set, but caused it to be missing the CSS styles that remove the ugly inset shadows on Safari/iOS.
    - Removed all references to "signing up" on the native builds to try and avoid any mishaps with app store approval. This includes removing the Sign Up form entirely on native mobile.
    - Modified the `redux-persist` storage config to use the native Capacitor storage adapter when running on native mobile.
    - Fixed the `isSafariBrowser` check (the app-wide one) to check Capacitor for iOS as another condition.
    - Changed how the crypto middleware checks for Safari by instead just checking for Firefox/Chrome, since we couldn't access the Capacitor package in a web worker.
    - Changed all references to the landing page of the Marketing site to point to the app's login page on native.
    - Created a changelog for all the manual changes we make to the generated Capacitor app code.
    
    Implementation Details [backend]:
    
    - Changed the CORS config to allow the 'urls' from the various different apps.
    
    Tech Debt:
    
    - We kind of removed the splash screen from the Android/Electron apps, but not from the iOS app (cause it requires it?). But I don't think it really matters one way or the other.
    - It's kind of jank how we don't have a surefire way of checking for Safari in the crypto middleware, but I'm sure it's _fine_.
    - There's still quite a bit to do before we can release the native apps (see the UFC-382 Spike document for more details), but at this point, at least the apps are _functional_.

commit ae4d1279b50342e58b51b369f28272598b081953
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Jul 30 15:05:34 2021 -0400

    UFC-381 Made the rules system fully functional. (#205)
    
    Changelog:
    
    - [Feature] Import Rules are now available! Create import rules to automate transaction adjustments when importing from CSV files. Learn more on the uFincs blog.
    - [Changed] During the "Adjust Transactions" step of the import process, the accounts that need to be filled out have now been highlighted in yellow, rather than drab grey. This should make it more obvious that they need to be filled out.
    - [Changed] Clicking on the 'Next' button (while it is disabled) during any step of the import/onboarding processes will show the reason for why it is disabled.
    - [Changed] Increased the version for the Backup file schema to 1.2 to support Import Rules.
    - [Fixed] The 'Bulk Actions' dropdown from the "Adjust Transactions" step of the import process has been fixed to actually open when you click it. This specifically applies to the dropdown menu when you scroll down the page on mobile.
    - [Fixed] The 'Next' button for the import process has been fixed to actually create a new Import Format during the "Match CSV Columns" step. This specifically applies to the 'Next' button in the header on mobile.
    - [Fixed] Removed the 'delete' action from the transactions in the "Adjust Transactions" step of the import process. It was inadvertently added by a previous update.
    
    Implementation Details [Frontend - directly related]:
    
    - Officially registered the Import Overveiw scene and Import Rule forms with the App Router.
    - Built the service for applying rules to transactions.
    - Integrated the import rules into the import process.
    - Made it so that any rule actions that reference an account are deleted when deleting an account.
    - Modified the Backup service to support import rules by only rewriting IDs after decryption has occurred (so that action values for account IDs are properly rewritten, since they get encrypted unlike regular ID fields).
    
    Implementation Details [Frontend - other]:
    
    - Added a 'pseudo disabled' state to the `Button` atom to support clicking it while disabled (for showing the disabled reason of the Next button).
    - Added an error state to the `SelectInput` atom, so that it can have the error outline.
    - Refactored the "edit"/"delete" actions into a `ListItemActions` type and default value.
    - 'Fixed' (hacked around) a bug with the mobile `BulkTransactionActions` so that you can actually click on the dropdown once it has gone sticky.
    - Modified the `FormContainer` to encapsulate the 'invalid' state.
    - Added an 'error' state to the transaction table row/list item, to highlight it when showing the Next disabled reason.
    - Changed the color of the account placeholder in the `TransactionForm` to match the new 'target account' color.
    - Refactored the logic that the `TransactionForm` uses for determining 'target account' placeholders to be consistent with other uses.
    - Created one generic 'Undo' toast type, replacing the account/transaction specific ones.
    - Consolidated a large amount of logic into the `StepNavigationButtons` rather than having custom handlers/text spread across all of the steps. This primarily ensures that the functionality is exactly the same between the buttons used in the footer and the ones in the `ProgressStepper` on mobile.
    - Part of the above consolidation involved moving all of the state from the `NewProfileSection` into the `transactionsImport` slice itself.
    - There is now a loading state on the "Next" button when going from the Map to Adjust steps, to account for applying rules.
    - Re-enabled/fixed the tests for `redux-e2e-encryption`, since it seems like whatever patch of Jest we're on is allowing ArrayBuffers to work again.
    - Decreased the `numTestsKeptInMemory` for Cypress so that it doesn't crash Chrome as fast.
    
    Implementation Details [Backend]:
    
    - Got the hooks for the import rules fully working.
    
    Tech Debt:
    
    - Realized that there's a minor bug with the Choose File step where if you (select a file, go next step, go back step, then select the same file), then the loading indicator on the "Choose File" button will never end. Since this is likely quite the edge case (and I couldn't figure out a solution in 30 seconds), it is now tech debt.
    - The amount of state we're storing in the import process slice is just... well, it's the largest slice by a _hefty_ margin. I'm sure that'll never come back to bite us.
    - I'm really starting to feel like we should have _some_ sort of testing for the Backend, beyond the e2e testing. Since the e2e testing really only tests the Frontend (due to all the offline-first stuff), we need some more comprehensive Backend testing. And yet, haven't been bitten by it yet.
    - Now that we have a third sidebar form model (i.e. import rule + account + transaction), I can definitely feel like there's some stuff that should be refactored between them. I've already refactored a lot of the layout-level stuff, but I feel like there's even more that could be done (at the form logic level). This could also be true in general for a lot of the things all three models rely on (e.g. tables, lists, model-level code, etc).
    - Transfer type transactions aren't well supported by the rules and bulk actions â€” changing the account tends to not happen on the right side of the transaction. See the Todo item named '"Transfer" type transactions aren't well supported during the Import Process.' for more details.

commit d8a7ac371048fb0d67f8191fccb922054b247045
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jun 24 16:12:37 2021 -0400

    UFC-378 Built the base UI for the rules frontend. (#204)
    
    Changelog:
    
    - [not-public] [Frontend] Built the base UI components for the rules system.
    
    Implementation Details [other]:
    
    - Added a Make command for starting all of the services but storybook.
    - Disabled the `--only-changed-services` function of Kubails because it is utterly unreliable and I don't think/don't have the patience to make it reliable.
    - Upgraded the Backend, Frontend, and Marketing service Docker images to Node 15, since that's what works on M1 Mac.
    - Changed the `run.sh` script for Frontend and Marketing to only work in development, since we now have the dev/prod split for the Docker files.
    
    Implementation Details [Frontend]:
    
    - Built the components/UI for the rules frontend as stories, but haven't yet integrated them nor made them functional.
    - Created the models/redux pieces for the Import Rules.
    - Upgraded `node-sass` to v5 so that it works with Node 15, but not v6, since v6 doesn't work with CRA.
    - Upgraded the browsers list.
    - Had to hack our package install of `isomorphic-webcrypto` to not use SSH. It's a problem with NPM v7 (which we had to upgrade to as part of Node v15).
    - Fixed the stories for the `Card` atom to use the updated `background` parameter, cause it was somehow missed during the last upgrade.
    - Added a dark background variant to the `IconButton`.
    - Refactored out various components from the tables/forms to start sharing form/function.
    - Fixed the rollback of the Import Profile `create` saga to re-create the mappings as well.
    - Created a generic `TableSortDirection` type since it wasn't exactly specific to Transactions.
    
    Implementation Details [Backend]:
    
    - Made the update/delete hooks for the import rules 'handle' updating/deleting the associations (untested).
    
    Tech Debt:
    
    - There's still a lot of overlapping code between the forms/lists/tables of the rules and the transactions. Especially the animation code for the lists/tables.
    - Nothing for the rules is functional yet, but even where some of the functional code was written, it was written quite poorly (particularly everything around the API calls is completely untested).

commit aff1f5abf4b4cbc6129f93b55e05e5b820aad40a
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Jun 7 15:18:13 2021 -0400

    UFC-380 Fixed the padding/wording on the AlternativeAuthForm so that it lines up with the AuthForm. (#203)
    
    Changelog:
    
    - [Fixed] Fixed a minor alignment issue with the login/sign up form.
    
    Implementation Details:
    
    - It took me this long to realize that the padding on the secondary auth form is not lined up with the primary auth form. Only took reviewing the screenshots for one of my articles to notice...
    
    Tech Debt:
    
    - N/A

commit ad382010fa8286d01518977d559e81804973380d
Author: Devin Sit <devin@devinsit.com>
Date:   Mon May 31 15:00:45 2021 -0400

    UFC-379 Fixed the build pipeline to cache the list of changed services when building master. (#202)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Added a step to the Build Pipeline to always cache the list of changed services, so that it actually works properly when deploying master.
    - Updated all uses of 'changed services' to pass the branch name.
    
    Tech Debt:
    
    - Our build pipeline is becoming a monster...

commit 3b39d7737c9e7988226f9cfcb2462fc0f3a0b25a
Author: Devin Sit <devin@devinsit.com>
Date:   Sun May 30 21:32:29 2021 -0400

    UFC-377 Built the Backend for the rules system. (#201)
    
    Changelog:
    
    - [not-public] [Backend] Created the models/services/tables for the Import Rules.
    
    Implementation Details:
    
    - Created the models/services/tables for the Import Rules/Actions/Conditions.
    
    Tech Debt:
    
    - N/A

commit a91aa96566238e803c9af6c0590492f29e8c8569
Author: Devin Sit <devin@devinsit.com>
Date:   Sun May 23 21:28:02 2021 -0400

    UFC-376 Hard-coded the services for the "Deploy manifests" build step. (#200)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Hard-coded the services for the 'deploy manifests' step so that the database/migration job don't get (always) deployed on master, cutting down on downtime.
    
    Tech Debt:
    
    - N/A

commit 82b59a1bafb2a16fa6bac6a6a6a77bb5f47e95cd
Author: Devin Sit <devin@devinsit.com>
Date:   Sat May 22 18:39:24 2021 -0400

    UFC-375 Upgraded Prettier to 2.3 and fixed all features involving email. (#199)
    
    Changelog:
    
    - [not-public] [Fixed] All features that involved sending email (email change, password change, password reset) are back to functional.
    
    Implementation Details:
    
    - Upgraded Prettier to 2.3 and re-formatted all files accordingly.
    - Downgrade the `nodemailer` and related Mailgun plugin packages (that were upgrade in UFC-371), because it turns out they are currently broken: https://github.com/orliesaurus/nodemailer-mailgun-transport/issues/107.
    - Removed the trailing slash for the folders in the `prettier` npm commands, cause they didn't seem to play nicely with the upgrade.
    
    Tech Debt:
    
    - Can't upgrade `nodemailer` or the Mailgun plugin packages until the above issue is fixed.

commit ca5b121ef4599ed4415e3027aab12c6e2a0163a5
Author: Devin Sit <devin@devinsit.com>
Date:   Fri May 21 20:16:05 2021 -0400

    UFC-374 Rebranded to "privacy-friendly" and added the monthly equivalent price to the Annual plan. (#198)
    
    Changelog:
    
    - [not-public] [Frontend + Marketing] Rebranded from "privacy-first" to "privacy-friendly".
    - [not-public] [Marketing] Added the equivalent monthly pricing to the Annual plan's pricing, to make it more clear that it's 50% cheaper.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit 3d628e8e95b92519f12965fa641dd5c0179a1f04
Author: Devin Sit <devin@devinsit.com>
Date:   Sat May 15 14:26:01 2021 -0400

    UFC-371 Re-enabled the no-account Slack notifications. (#197)
    
    Changelog:
    
    - [not-public] [Backend] Re-enabled the no-account Slack notifications.
    
    Implementation Details:
    
    - Updated some backend/frontend packages to fix security vulnerabilities.
    
    Tech Debt:
    
    - N/A

commit 9551b584f0d5dc849478de84cf168adbd870b470
Author: Devin Sit <devin@devinsit.com>
Date:   Mon May 10 21:53:04 2021 -0400

    UFC-370 Simplified the language for the answers for multi-currency/stock/crypto questions. (#196)
    
    Changelog:
    
    - [not-public] [Marketing] Simplified the answers to the multi-currency/stock/crypto questions.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit 81c9dd9620db5de254272b151d9a9d3efe2762f2
Author: Devin Sit <devin@devinsit.com>
Date:   Mon May 10 12:32:45 2021 -0400

    UFC-369 Temporarily disabled no-account notifications in anticipation of the Hacker News launch. (#195)
    
    Changelog:
    
    - [not-public] [Backend] Disabled the no-account Slack notifications in anticipation for the Hacker News launch.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit 6bd61629b907f07b95b4ff0f806992c2a632c06f
Author: Devin Sit <devin@devinsit.com>
Date:   Sun May 9 12:28:40 2021 -0400

    UFC-368 Changed the date range logic so that it aligns daily/weekly on today for the current month. (#194)
    
    Changelog:
    
    - [Changed] When changing to the daily/weekly date view, the new view will now show the current day/week if 'today' is in the currently selected month.
    
    Implementation Details:
    
    - Changed the 'range update' logic for daily/weekly to check if the last end date is in the current month before aligning against today.
    
    Tech Debt:
    
    - N/A

commit 544ad268a86b920b8fbb72979645dade9af94ba9
Author: Devin Sit <devin@devinsit.com>
Date:   Sat May 8 16:07:33 2021 -0400

    UFC-367 Disabled "Send Feedback" for no-account users and disabled anonymous sending for Issue feedback. (#193)
    
    Changelog:
    
    - [Changed] Removed the ability to send anonymous in-app 'Issue' feedback so that I, the developer, can better follow up on any issues.
    - [Changed] Removed the in-app 'Send Feedback' for users without an account. This is to cut down on spam. Please send feedback to support@ufincs.com instead.
    
    Implementation Details:
    
    - Removed the `hideAnonymousCheckbox` prop from the `FeedbackForm` since the form is no longer displayed at all for no-account users.
    - Enabled 'rich text' processing for the changelog items.
    - The default state of feedback is now non-anonymous.
    
    Tech Debt:
    
    - It's only mildly kind of jank (from a UX POV) to not be able to submit anonymous Issue feedback, and I'm sure someone will eventually complain about that, but whatever.

commit 44568c6769888f2e9e6ba1a9a585d5b9d60cbf2b
Author: Devin Sit <devin@devinsit.com>
Date:   Fri May 7 17:45:38 2021 -0400

    UFC-366 Added new sections to the Security doc. (#192)
    
    Changelog:
    
    - [not-public] [Marketing] Added new sections to the Security doc.
    
    Implementation Details:
    
    - Added sections outlining what happens when a user changes/forgets their password, and how uFincs is not a trust-less system.
    
    Tech Debt:
    
    - N/A

commit 394c0c555da0848952270d6587271cacf59e08a1
Author: Devin Sit <devin@devinsit.com>
Date:   Fri May 7 16:31:35 2021 -0400

    UFC-365 Added a FAQ page to the Marketing site. (#191)
    
    Changelog:
    
    - [not-public] [Marketing] Added a FAQ page to the Marketing site.
    
    Implementation Details:
    
    - Added a new FAQ page to the footer.
    - Repurposed the old 'Help' scene as the new FAQ scene.
    - Improved the `processContent` utilities to support italics and links; changed the 'highlight' symbol from '_' to '^'.
    - Fixed the root `_app` to not scroll to the top when the URL has a hash in it, so that users don't get scrolled away from FAQ questions.
    - Updated sitemap.
    
    Tech Debt:
    
    - Our implementation for making the side nav sticky is quite janky. But it works, so it should be fine.
    - The more our `processContent` helpers grow, the greater the complexity we take on. Especially since they could do with a good refactoring. But at least it doesn't really impact performance, since it all gets rendered statically at build time.

commit a25757787fde5944182d230de61cfdf64cfcd814
Author: Devin Sit <devin@devinsit.com>
Date:   Wed May 5 11:27:10 2021 -0400

    HOTFIX: Images are all messed up.

commit 62d3eb33e8829d7380311d5b103f5f5295bf6cd3
Author: Devin Sit <devin@devinsit.com>
Date:   Sat May 1 22:39:54 2021 -0400

    UFC-361 Improve error handling on the Frontend. (#190)
    
    Changelog:
    
    - [Changed] Improved handling of uncaught errors. Users will now be prompted with a Feedback form to submit the error.
    
    Implementation Details:
    
    - Brought in `react-error-boundary` to make Error Boundaries easier to deal with.
    - Setup Error Boundaries around the core `AppRouter` as well as around the entire app, as a last ditch effort.
    - Created a custom fallback component for the error boundary, much like an `EmptyArea` but for giving users the option to refresh or send feedback.
    - Moved the `FeedbackDialog` to be rendered at the root App level, so that it can be used even outside the app.
    - Modified the `FeedbackDialog` to support a second layout for showing the error stacktrace (among other things).
    - Improved the handling of database connectivity errors. Now, the error message gets mapped to a generic "Network error" message, and the Offline Request Manager no longer counts them (or any network error) against the failed attempt count.
    - Improved the handling of `Transaction.date` parsing in the constructor, so that it falls back to an empty string in the case of any errors.
    - Improved how the `DateIndex` handlers errors (particularly, when transaction decryption fails) so that it doesn't cause the app to blow up.
    - Added a log-metric and chart for node preemptions.
    
    Tech Debt:
    
    - Improving the `Transaction.date` error handling also meant that we had to turn off one of the `ImportProfile` tests, because we no longer had an easy way to simulate errors. Couldn't the mocking working right, so I just commented it out.
    - We don't do anything with the errors caught by the `Transaction.date` or `DateIndex` changes. We should instrument `console.error` in the future to either prompt the user or just give in and automatically forward these errors to us.
    - I do see the possibility where a user just keeps continually hitting an error and just keeps having the Feedback form opened (for a saga error) or the Error Fallback displayed (for a component error). I can see this being quite frustrating for users to be continually prompted over and over, so maybe there should be an option (at least, for the saga errors) to ignore the error. Or maybe we should automatically ignore it after the user submits the same error a bunch of times? Anyways, I'd still think this is all better than just having the app crash and display a blank page.
    - Because of how we check for network errors when handling failed effects, it'll be harder to implement the offline-first observability, because it won't be as obvious that the state of the system is 'offline' rather than 'error'. Although I suppose we'll need to differentiate between the user being offline and us being offline anyways (unfortunately; that kind of takes away the 'magic' of offline-first).

commit 6aa9fb4982a01daa486e904080e0809cd4b96d48
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Apr 28 13:36:29 2021 -0400

    UFC-364 Disabled mandatory billing address collection during Checkout. (#189)
    
    Changelog:
    
    - [not-public] [Changed] Disabled requiring billing address collection during Checkout.
    
    Implementation Details:
    
    - New Checkout sessions no longer prompt users to fill out their complete address, in the interest of privacy-first.
    
    Tech Debt:
    
    - This was initially turned on because Stripe recommends it for fraud prevention, but I'm think I'm willing to take the risk in the name of privacy-first.

commit 3473192f8a89a04ab4aa90aefc1719fc08268dc7
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Apr 27 20:18:38 2021 -0400

    UFC-363 Built the Changelog. (#188)
    
    Changelog:
    
    - [Feature] Added a link in the mobile Settings/desktop User Dropdown to this page, the Changelog!
    
    Implementation Details:
    
    - Added a new "Changelog" page to the Marketing site, that will contain all app-level changes moving forward.
    - Added a "Changelog" link to the settings/user dropdown to access the Changelog page from the app.
    - Modified the `Dropdown` atom to support actual links, rather than just `onClick` handlers.
    - Changed the "Settings" user dropdown option to also use a link now.
    - Created a `screenUrls` map for the Marketing URLs (and refactored accordingly).
    - Brought in the `red` color palette to the Marketing site's Tailwind config.
    
    Tech Debt:
    
    - As we accumulate more and more changes over time, we might want to think adding some sort of filtering or pagination to the Changelog. But for now, this simple solution is acceptable.

commit 80773b305447ab9b0095556ec23806e451dd8fae
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Apr 25 14:38:00 2021 -0400

    UFC-360 Removed the sign up checkbox and removed the 'name' index from the Accounts table. (#187)
    
    Changelog:
    
    - Users no longer have to check an acknowledgement checkbox when signing up.
    
    Implementation Details:
    
    - Removed the consent checkbox from the Sign Up form.
    - Removed the 'name' index on the 'Accounts' table, since it literally does nothing now that everything is encrypted.
    - Added a metric/chart for measuring the number of no-account logins.
    
    Tech Debt:
    
    - We didn't remove the definition of the `authentication.checkConsentInput` function in the e2e tests. This is because we might bring it back in the future. Then again, YAGNI, so...

commit 5b1e60cbf58b9b7ecedc32f2cd03ea64a7d069ad
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Apr 23 20:33:32 2021 -0400

    UFC-359 Improved the performance of the Accounts/Transactions fetch request at app boot. (#186)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Fixed the including of the transactions as part of the accounts fetchAll request to be quite a bit faster.
    - Disabled Sequelize logging/benchmarking from the Backend, since we now have logs directly from Postgres itself.
    
    Tech Debt:
    
    - N/A

commit 77a1318c8b255317ef4cb9a5d321613d2f4250ac
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Apr 21 12:30:15 2021 -0400

    UFC-358 Fixed the Feedback form to work properly in no-account mode. (#185)
    
    Changelog:
    
    - Users can now properly submit feedback when using uFincs without an account.
    
    Implementation Details:
    
    - Modified the Backend feedback service to only authenticate when submitting feedback non-anonymously.
    - Removed the "Send anonymously" checkbox from the feedback form when running in no-account mode.
    - Fixed a bug with the Cypress tests, where the `AppNavigation.gotoAccounts` was incorrectly using 'eq' for the URL, when it has to use 'include' because of the redirection logic.
    
    Tech Debt:
    
    - N/A

commit f7e56758b7aa783194ab07dfcf05ce6e67c22bba
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Apr 16 15:24:39 2021 -0400

    UFC-357 Added more detailed tooltips to the Transaction Type options, to explain them better. (#184)
    
    Changelog:
    
    - Users can now view better tooltips on the Transaction Type options in the Transaction Form, to learn what each type is used for.
    
    Implementation Details:
    
    - Modified the `RadioGroup` pass on extra props directly to the custom component.
    
    Tech Debt:
    
    - N/A

commit 25ca54c219c3148d5ceb0c29b24231486531c2bd
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Apr 15 13:18:25 2021 -0400

    UFC-354 Added a link to the Blog in the footer; sorted all footer links alphabetically. (#183)
    
    Changelog:
    
    - Users can now navigate to the blog from the Marketing site.
    
    Implementation Details:
    
    - Decided to just alphabetize the Footer links, so that I don't have to arbitrarily decide the order.
    
    Tech Debt:
    
    - N/A

commit 378a0190a960d58c82265ee233048c53a1e594da
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Apr 15 12:52:37 2021 -0400

    UFC-355 Added TransactionForm validation to prevent $0 transactions. (#182)
    
    Changelog:
    
    - Users are now prevented from creating $0 transactions.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit 6fe74b99ae114c35b0180937e64526cbb28f5a00
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Apr 15 12:37:13 2021 -0400

    UFC-356 Added 'Ctrl+Enter' to the Add & Make Another button tooltip. (#181)
    
    Changelog:
    
    - Users can now see that 'Ctrl+Enter' is the shortcut for the 'Add & Make Another' button when viewing its tooltip.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit afe3e47cd0ee68a766b55212d2a2ba3d111ea0fd
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Apr 14 20:46:12 2021 -0400

    UFC-353 Created a CNAME record to point the blog subdomain to Substack. (#180)
    
    Changelog:
    
    - Users can now go to blog.ufincs.com to read about all things uFincs!
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit ec570c6230b03cf7354b30b5348382e9683838bb
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Apr 13 19:18:17 2021 -0400

    UFC-352 Fixed various things found during QA testing. (#179)
    
    Changelog:
    
    - Users will find that the app navigation doesn't hide itself on iOS when scrolling (aggressively) all the way to the top.
    - Users can now cancel out of the Subscription form to get back to the Login form.
    - Fixed the size of the sign up consent checkbox on iOS.
    
    Implementation Details:
    
    - Modified the `useHideOnScroll` hook to make sure the `y` value isn't negative when trying to hide something (preventing the bounce effect).
    - Added a 'Cancel' button to the `SubscriptionPlanForm`, so that users can logout without using `localStorage.clear()`.
    - Brought back the high machine type for builds, cause half hour builds are pain.
    - Upgraded `react-scripts` to v4.0.3, so that we can disable ESLint during the `build` and `start` commands, to speed them up.
    - Disabled ESLint's regular `no-unused-vars` rule in favour of the TypeScript version, since it was throwing false positives.
    
    Tech Debt:
    
    - Since we now have ESLint disabled during Frontend builds, there's _technically_ the possibility that somehow CRA has an internal lint config that is different from our defined one, causing some lint error to get through us manually calling eslint, but it's unlikely, and the speed boost for prod builds is well worth it.

commit 9f04a60e06f70faf7cb3c8c2d497ede02bf1055c
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Apr 12 16:12:34 2021 -0400

    HOTFIX: Typo in sitemap.

commit 0afd8871434715912ad89ad55f5df735c07102cf
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Apr 12 16:01:58 2021 -0400

    UFC-348 Added a 'Philosophy' page to the Marketing site. (#178)
    
    Changelog:
    
    - Users can now find a page on our company Philosophy on the marketing site, under the 'Company' footer section.
    
    Implementation Details:
    
    - Updated sitemap with new Philosophy page.
    - Fixed the `docker-compose` config for the Marketing service to use the new folder name for the volumes; otherwise, hot reload wouldn't work.
    - Fixed the descheduler to have an explicitly defined logging format, so that it doesn't log errors about not having one.
    - Fixed the descheduler to have limits for # of successful/failed jobs to keep around.
    - Fixed the regex used by the Database Query Duration metric, so that the units get removed.
    
    Tech Debt:
    
    - N/A

commit 226d6683cb0013b9c7734032d9aecee752d34b89
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Apr 11 22:40:19 2021 -0400

    UFC-351 Configured per-node/per-pod service accounts to lock down privileges. (#177)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Modified the nodes to use a custom service account that has only the necessary privileges for our current workloads. That is, "principle of least privilege".
    - Disabled the default service account for all our containers. None of our workloads require Kubernetes API access, so they don't need the privileges granted by the default service account (or any service account, for that matter).
    
    Tech Debt:
    
    - N/A

commit 4a9ca96a9cf956127902473e211fc95ab5aebe16
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Apr 11 15:24:49 2021 -0400

    UFC-350 Added metric/chart for database query duration and enabled container level security contexts. (#176)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Added a metric (and corresponding chart) to track production database query duration.
    - Enabled more locked-down security contexts for the service deployments (not database) -- dropping all Linux capabilities and enabling read-only file systems.
    - Disabled the high cpu machine type for builds, since they are starting to cost a lot and builds generally take less time with all the caching.
    
    Tech Debt:
    
    - We didn't enable any security context on the database (`StatefulSet`) cause it actually needs to write to the filesystem and needs various Linux capabilities. Oh well, at least the Frontend server is locked down.

commit 30d1584bc98f70bd37de08ca2dc99b967c9915e6
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Apr 10 21:16:29 2021 -0400

    UFC-349 Upgraded cert-manager and ingress-nginx. (#175)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Upgraded `cert-manager` from v0.12 to v1.3 (quite the jump) and upgraded the API on our `cert-manager` manifests to the stable v1.
    - Upgraded `ingress-nginx` from v0.17.1 to v0.45.0 (also quite the jump).
    - Got the `--default-ssl-certificate` option working for `ingress-nginx`, so that we no longer need to copy the `cert-manager` secret to every namespace. Also, it eliminates a ton of errors that `cert-manager-cainjector` was throwing.
    - Had to customize the `ingress-nginx` cache key so that the marketing/frontend services wouldn't end up with the same keys, causing files to be served for each other service.
    - Updated the metrics/dashboard to account for the change of the `ingress-nginx` container's name.
    
    Tech Debt:
    
    - We no longer need the `certificate-reflector` manifests, but I'm keeping them around just to maintain compatibility with Kubails' deploy commands (until we update Kubails).

commit b83c37b085ebd24eaa0c7b2ad6e9fca5a3aa6db7
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Apr 9 23:13:17 2021 -0400

    UFC-153 Improved several aspects of monitoring/observability/logging. (#174)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Changed the uptime check alerting email to my @ufincs email.
    - Added a Terraform resource for a cluster monitoring dashboard (finally!).
    - Added alerting policies/uptime checks for database backups and the backend/marketing services.
    - Built custom log-based metrics to track request latency/rate for Nginx and each service.
    - Improved the log format (i.e. made it JSON) for Nginx so that Stackdriver can properly parse it. Also added more info, like request latency.
    - Improved the log formats for all services, making them all JSON.
    - Converted the `backend-database` service into an in-project service, so that we can specify a config file for Postgres.
    - As a result of ^, the database is now only deployed for new databases/changes, rather than on every deploy.
    - Enabled logging for Postgres.
    - Added the `app` label to the container template of deployments/stateful sets, so that it isn't on _just_ the top-level template.
    - Disabled `--leader-elect` for cert-manager's `cainjector` deployment, so that it isn't throwing out thousands of errors an hour. Or at least, it did. Now it's back to throwing tons of errors... sigh, might just have to upgrade `cert-manager`. Not changing `--leader-elect` back though.
    - Removed `config/local.json` from the `dockerignore` of the Backend, so that it isn't excluded when doing `make start-prod`.
    
    Tech Debt:
    
    - The JSON config for the cluster dashboard isn't templated in any way; it's just a direct pull down of the resource from the API. As such, it isn't exactly completely re-usable for future projects, since it doesn't make use of Terraform vars, but that's fine for now.
    - There's a _lot_ of duplicated code in the Monitoring Terraform configs. Should probably extract some stuff into smaller submodules, but whatever for now.

commit a63836738e948b1a80c2b1e6773c4f64054ff500
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Apr 7 20:18:04 2021 -0400

    UFC-347 Upgraded Postgres to the latest v13. (#173)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Upgraded the database to Postgres 13 (Alpine).
    - Added more files/folders to each service's `.dockerignore`, in the hope that that would improve the caching situation.
    - ^ Ditto with changing to `npm ci` over `npm install`.
    - The folder in the Marketing Dockerfiles has now been changed to `/marketing` (from `/frontend`).
    
    Tech Debt:
    
    - The `backend-database-backup` service uses `postgres:13` instead of `13-alpine`, so that the rest of the Dockerfile didn't need to change (cause `apt-get`). Doesn't really matter, just a minor inconsistency.

commit b66c542834ccd6ac1ca2b7dfdd21468d89ad3f54
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Apr 6 00:30:45 2021 -0400

    UFC-345 Enabled coupons codes in Checkout. (#172)
    
    Changelog:
    
    - Users can now enter coupon codes at checkout!
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit ca3d9e5e005934bf7502d1ef97f65e4b2c0bcd1c
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Apr 5 23:50:46 2021 -0400

    UFC-344 Added recurring transactions to the no-account demo data. (#171)
    
    Changelog:
    
    - Users will now find random recurring transactions in the demo data when using the app without an account.
    
    Implementation Details:
    
    - Had to create the `_generateRecurringSchedules` function because sticking the `recurringSchedules` at the top-level of the file caused errors because `RecurringTransaction.FREQUENCIES` was considered undefined; as such, likely a problem with the importing order of the models/services.
    
    Tech Debt:
    
    - N/A

commit c99ee07dc2e154f9c29a04e25fe41c3809451738
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Apr 5 20:52:44 2021 -0400

    UFC-346 Got Docker image caching (of the multi-stage images) working. (#170)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Modified the first stage of the prod Dockerfiles to be named after the service, so that we can use them with Kubails to cache them.
    - Switched the images to `node:14-alpine` and `postgres:11` (i.e. non-patch versions) because of a bug in Docker BuildKit (doesn't go to DockerHub when a registry mirror is defined -- which Cloud Build/GCR does).
    - Finally added a password to the Postgres user. Mostly because the upgraded Postgres version now forced a password... but eh, it's there now!
    
    Tech Debt:
    
    - While upgrading the images to non-specific patch versions is _good_, the fact that it's because of a bug in BuildKit is _bad_. This is likely to bite us in the future (i.e. if the mirror ever drops one of our images... we're in big trouble).
    - The way we implemented the Postgres password is kinda jank, what with how it decrypts at build time and injects over a special value in `kubails.json`. But it's quick, simple, and works.

commit 8cf954372bb11b91754032c1e59b5db6becf9230
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Apr 4 23:25:48 2021 -0400

    UFC-343 Fixed bug with Stripe webhooks cleanup script and enable graceful shutdowns on all services. (#169)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Fixed how the `cleanup_stripe_webhooks.sh` script calls the Node script, to match `inject_stripe_webhook_secret.sh`.
    - Enabled graceful shutdowns on the Backend/Frontend/Marketing servers, so that they actually respond to kill signals.
    - An additional benefit of the Backend graceful shutdown is that it closes database connections, likely giving us some more robustness.
    - Improved the logging format for the non-request logger in the Backend. Now it logs in JSON.
    
    Tech Debt:
    
    - Nah, this is another tech debt fixing ticket.

commit c3520670c7e983d1894c61a19b88c3dfcfe4739f
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Apr 4 21:46:12 2021 -0400

    UFC-342 Implemented various Docker/Kubernetes improvements. (#168)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Created separate Dockerfiles for dev and prod; prod now uses a distroless image and non-root users to improve security.
    - Changed the frontend/marketing services to run on port 3000 in prod, rather than 80, because of the non-root users thing.
    - CI is now included as part of the prod Dockerfiles, so the individual CI step was removed from the build pipeline (since it's now run as part of image building).
    - Added a new `make start-prod` command for bringing up the services locally using their prod Dockerfiles/config.
    - Had to adapt the migration job to account for the new prod Dockerfiles. Mainly, this means a custom Node script for invoking the sequelize CLI commands.
    - ^ also means that the `migration-job.yaml` template could be generalized to a `job.yaml` template.
    - Added readiness probes (and healthcheck endpoints) to each service.
    - Changed the services to use a `ClusterIP` service, instead of `NodePort`, since they didn't actually need `NodePort`.
    - Changed the database service to use a `StatefulSet` instead of a `Deployment`, since it makes way more sense and hopefully shouldn't cause persistent volume contentions.
    - Borught in a 'descheduler' to kill pods that are duplicated on one node, so that they get re-balanced after node preemption.
    - Disabled `chromeWebSecurity` in Cypress so that the e2e tests could run when using the prod images (this is because of the frame CSP).
    - Made a 'custom' server for the marketing service, since we couldn't (easily) invoke `next` without npm, but more because we needed to add the healthcheck endpoint.
    - Split dev/non-dev deps more clearly for the marketing service, to reduce what gets added to the prod image.
    
    Tech Debt:
    
    - We should probably add the `descheduler` as an optional component to Kubails.
    - We should probably backport a _lot_ of these the changes we've made to Kubails... StatefulSet for database, prod images, jobs, etc, etc.
    - Technically, not all of the e2e tests are passing when running them against the prod images. However, the failing tests are the no-account sign up ones, which must necessarily fail since that sign up flow requires a subscription. So... not perfect, but not really a problem.

commit bc0e52d0d2b6ea6c47e6837f3f07423cc7d4f675
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Apr 3 01:05:31 2021 -0400

    UFC-341 Implemented various cluster/ops improvements. (#167)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Added an `app` label to all the deployments/services, to make it easier to filter logs/dashboards.
    - Added pod anti-affinity to the production deployments, so that replicas are spread over nodes.
    - Fixed the deletion lifecycle rules on the backup/logging buckets, so that live items are actually deleted.
    - Modified the cluster to use the stable release channel instead of a specific version. That means we've now upgraded our cluster to v1.17.X.
    - Modified the cluster to use Shielded VMs.
    - Modified the cluster nodes to use Secure Boot and `cos_containerd` (over `cos`) as the OS image.
    - Modified the cluster nodes so that auto repair is explicitly on.
    - Modified the cluster so that the min number of nodes is 2.
    - Upgraded Terraform from the ancient v0.11 to the latest v0.14.9.
    - Upgraded the AWS/Google Terraform providers to their latest versions.
    - Re-formatted all Terraform files to use the new variable syntax, as well as the recommended stylings (namely: 2 space indent, vertically aligned equal signs).
    - Fixed the database deploy step script to check if the Backend service has changed before deploying the migration job. Otherwise, the job would be generated with an invalid image tag (since the Backend wouldn't have been built that commit).
    
    Tech Debt:
    
    - You kidding? This fixes so much debt! Just the Terraform upgrade alone puts us ahead.

commit 248c252ab5553d04efca2317e57b93c4aa8d340b
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Apr 1 19:22:14 2021 -0400

    UFC-340 Modified the build pipeline to use the new Kubails options for using only changed services. (#166)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Modified the build pipeline to use the new Kubails options for only operating on changed services. Greatly decreases build time when relevant.
    - Had to move th `infra authenticate` command to the first step, since the new option for checking changed services relies on querying the cluster.
    - Changed the build pipeline machine type from `n1-highcpu-8` to `e2-highcpu-8`, since the e2 instances seem to be the recommended instances now.
    - Added an extra `sleep` to the `restore_latest_backup` script, since I ran into an issue where even though the pod was ready, the database wasn't found the `dropdb` command. Race condition, I guess, so... sleep!
    
    Tech Debt:
    
    - Kinda janky to use `sleep` in the build scripts, but whatever, it works.

commit 99fead73e2ab16cc66f39389ada626907e28a279
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Mar 31 20:33:50 2021 -0400

    UFC-339 Implemented restoring the latest backup to new feature branches. (#165)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Modified the build pipeline to restore the latest production backup to all new feature branches.
    - Refactored some older build scripts to set vars using Kubails config.
    
    Tech Debt:
    
    - N/A

commit ba22d282a0ffb15b535f0e547a56cfa4c7ab519e
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Mar 30 23:51:43 2021 -0400

    UFC-337 Setup backup replication to AWS. (#164)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Created Terraform config for managing AWS resources. Currently, just an S3 bucket for storing the backups.
    - Updated the database backup script to copy the encrpyted backups to S3.
    
    Tech Debt:
    
    - N/A

commit b7fdd9a197d99ce053ef84cb2c0a97432c0ab7a3
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Mar 30 16:58:48 2021 -0400

    UFC-338 Added a lifecycle rule to the database backup bucket to delete objects older than 60 days. (#163)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Updated the Terraform config for the database backup storage bucket to have a 60 day deletion lifecycle rule.
    
    Tech Debt:
    
    - N/A

commit e6c7ab2d065b0f82492ae67f9edc9b70bb5585f8
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Mar 30 16:25:53 2021 -0400

    UFC-336 Implemented encryption of the database backups. (#162)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Modified the backup service to encrypt the SQL dumps using `gpg` before saving them to GCS.
    - Upgraded the image for the backup service to use Python 3 (instead of 2), so that it doesn't blow up upon installation.
    
    Tech Debt:
    
    - N/A

commit e3b470e94c2a568cf35beacf098e4919f79d7e03
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 29 16:58:29 2021 -0400

    UFC-334 Fixed yearly recurring transactions being off by one during leap years. (#161)
    
    Changelog:
    
    - Bug fix: Yearly recurring transactions are no longer off by one day during leap years.
    
    Implementation Details:
    
    - Fixed/improved `RecurringTransactions.getFutureDatesBetween` to use `getDatesBetween`.
    
    Tech Debt:
    
    - N/A

commit 3cc5a505f56c46a74699e306bae28fc80aa07233
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 29 12:52:06 2021 -0400

    UFC-333 Added a honeypot input to the AuthForm. (#160)
    
    Changelog:
    
    - Users will hopefully not notice that there's now a hidden input in the login/sign up forms.
    - Bots hopefully _will_ notice the hidden input, so that they don't sign up!
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit e6f45fd4350abb2d436a1fbbe18f8507019e2826
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Mar 28 22:03:29 2021 -0400

    UFC-332 Decoupled database migrations from Backend init. (#159)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Decoupled database migrations so that they run as a separate step in the build pipeline, rather than as an init step for the Backend service.
    - This allows us to increase the replica count of the Backend service safely (now at 2).
    - Removed the `persistent_volume` config from the `cronjob` template, since it's not (currently) needed.
    - Modifed the `deployment` template so that the Rolling Update strategy has a max unavailable of 0 (so that new pods must spin up before old pods can spin down).
    - Modifed the `deployment` template so that the `SOFTWARE_TAG` env var isn't added to the database deployment, so that the database pod doesn't get re-created on every deploy.
    - Modifed the `deployment` template so that the PVC config can have different storage size/class in production vs feature branches.
    - Modified the Database service to use a 50 GB SSD in production and a 15 GB standard disk in feature branches (already manually performed the SSD upgrade in prod).
    - Formally upgraded the GKE cluster to the latest `1.16.15` patch.
    - Fixed a completely random failure in the Frontend `DateIndex` tests, where the `deepMerge` function I stole wasn't working right anymore.
    
    Tech Debt:
    
    - It's kinda janky how `persistent_volume` and `persistent_volume_production` are setup (they're basically just dupes of each other, minus storage size and class), but whatever, it works.

commit 58eebc9374cb993440b198cc76190a3e3f0dabdf
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Mar 27 01:00:02 2021 -0400

    UFC-331 Built the frontend for the Feedback form. (#158)
    
    Changelog:
    
    - Users can now quickly send feedback about the app from inside the app! They can even send it anonymously!
    
    Implementation Details [frontend]:
    
    - Built the Feedback Dialog and integrated it everywhere.
    - Refactored out a `DialogContainer` from the `ConfirmationDialog`.
    - Added `border-radius` to the `input-border` mixin, since it's the same for all inputs.
    - Finally created a `TextAreaInput` atom.
    - Added a separate max input length for the feedback at 4096 characters.
    
    Implementation Details [backend]:
    
    - Added `type` to the Feedback model/schema, since it was forgotten.
    - Improved the formatting of the Slack message sent for feedback. As a consequence, modified the `internalNotifier` to support all Slack message options.
    - Fixed a bug with including the user ID when creating non-anonymous feedback.
    - Added rate limiting to the billing service methods.
    - Added (failed requests) rate limiting to the authentication service.
    
    Tech Debt:
    
    - Having the success toast/modal close happen in the same saga as the feedback creation is kinda... not optimal.

commit ed9d81371e616b137ed17383a94df3cedc0da819
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Mar 23 17:18:25 2021 -0400

    UFC-330 Implemented the Backend for the feedback system. (#157)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Setup the Backend for handling feedback.
    
    Tech Debt:
    
    - N/A

commit 79fd82bd2ca9e2e5c847427bfb9b44c5e532a943
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 22 22:09:32 2021 -0400

    UFC-328 Added Recurring Transactions to the marketing site. (#156)
    
    Changelog:
    
    - Users will find that the marketing site now includes images and text describing the wonderfulness of Recurring Transactions.
    
    Implementation Details:
    
    - Updated all other screenshots to include the "Show Future" button/future transactions.
    
    Tech Debt:
    
    - N/A

commit f72751a5c80a46a0e3d2e2a690736a6c06f506f6
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 22 16:34:11 2021 -0400

    UFC-327 Removed the account interest field from being displayed. (#155)
    
    Changelog:
    
    - Users will find that the Account 'Interest' field is no longer present.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit eb7a9b870519e2ded8acc16c31cc8d1cc616ac36
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 22 15:24:37 2021 -0400

    UFC-325 Minorly optimized the date sorting algorithm (among other things). (#154)
    
    Changelog:
    
    - Users will find that using very large date ranges should now be slightly faster.
    - Users will find that negative numbers now display correctly in the Transactions table.
    
    Implementation Details:
    
    - Made some micro optimizations to the date sorting algorithm that realistically don't change much, but my other attempts to improve it didn't work out, so... yeah.
    - Fixed the running balance calculation to only sort the transactions if there's actually a need for the running balances. For the primary use case (i.e. Transactions page), this cuts out half the sorting operations (since they no longer are run at all).
    - Removed a now unnecessary `JSON.stringify` that was used for hacky memoizing in the `IncomeExpenseChart`.
    - Had to fix the amounts in the Transactions table so that the negative sign isn't displayed on the right side.
    
    Tech Debt:
    
    - N/A

commit c7fab2e5a0f9252be9964391ca0825c1e76a7c66
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 22 00:18:02 2021 -0400

    UFC-326 Fixed the DateSwitcher to have its internal input state reflect context state changes. (#153)
    
    Changelog:
    
    - Bug fix: The date inputs of the date switcher now properly reflect the current date range.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit ca821c4343fadd3021b71952ef98296571973521
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Mar 21 23:18:52 2021 -0400

    UFC-324 Fixed typing in the date switcher inputs (in Safari). (#152)
    
    Changelog:
    
    - Bug fix: Users can now type in the date inputs (of the date switcher) in Safari.
    
    Implementation Details:
    
    - Had to fix an import in the API that was causing the Cypress tests to not compile.
    
    Tech Debt:
    
    - N/A

commit df0402b6b3091503e57e332f485a1500c0fc623c
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Mar 20 17:37:47 2021 -0400

    UFC-206 Enabled Slack notifications for no-account logins. (#151)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Added a custom route for sending internal Slack notifications whenever a user starts using no-account mode.
    - Made sure the route was rate limited so that a user can only trigger the notification once (per hour).
    
    Tech Debt:
    
    - N/A

commit 004940e8bdd91ec200b690fb8373bf76d8ea0ca3
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Mar 20 13:11:58 2021 -0400

    UFC-205 Add auth routes to the marketing site for analytics. (#150)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Made proxy pages on the marketing site for login/sign up/no-account so that they get registered in analytics.
    - Enable automated event collection for outgoing links, email links, and downloads for analytics.
    
    Tech Debt:
    
    - N/A

commit 54a0ad9e601a4dfb9222af2c20af9f2e40dc45e2
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Mar 19 21:39:19 2021 -0400

    UFC-203 Implemented the frontend for recurring transactions. (#149)
    
    Changelog:
    
    - Users can now create recurring transactions! Save time entering your most repetitive transactions or forecast your financial future!
    - Users will now find that charts have a 'years' interval, so that they can render more data over larger periods of time.
    
    Implementation Details [frontend]:
    
    Directly related:
    
    - Built recurring transactions. That primarly means the 'Recurring' tab of the Transaction form now works, there is now a 'Recurring' tab on the Transactions page for showing them, and future transactions are now shown in the transaction tables/lists and charts.
    - Added a "Show Future" button to the `DateRangePicker` so that users can toggle showing future transactions in tables/charts/calculations.
    - Modified the `TabBarWithSections` to have optionally controllable active state, so that we can store the active tab state in, e.g., form state.
    - Modified the `TransactionDateOptions` to accept a list of options so that we can show only one-off or only recurring.
    - Made a bunch of performance improvements (mostly related to dates) across the app to make the virtual transaction realization process as fast as possible when dealing with large date ranges.
    - Added booleans as a type option for the encrypted data schema.
    - Added `null` parsing to the encrypted data parser.
    
    Other notable changes:
    
    - Increased the spacing between the "Add" and "Make Another" buttons on mobile, cause they looked too close for tap targets.
    - Improved the "Custom" date range to focus the start date input, to give the user an indication that it they can change it; changed the `CustomFormatDateInput`s outline to be a not-only-keyboard outline.
    - Added a `transactionsSelector` prop to the Transactions table/list to fix being able to select from other transaction sources. Primarily, this means that From/To column sorting now works for other transaction sources.
    - Created a mixin for `input-border` and applied it to all `OptionCard` components so that they all consistently look like inputs.
    - Made the `OptionCard` Vimium clickable.
    - Fixed the custom date inputs in the `DateSwitcher` to not trigger `DateSwitcher` keyboard shortcuts.
    - Fixed the date formatter so that the first day of the year is formatted correctly.
    - Fixed `useIsLargeWidth` so that the Transactions table renders the right layout when used in a `TabBarWithSections`.
    - Fixed the Transaction account sorting to use `targetAccount` so that From/To sorting works properly in the Import Process
    - Added the removal of the number input spinner buttons to the global CSS reset.
    
    Minor:
    
    - Fixed the `TabBar` so that it (should) always have the most up-to-date underline style calculation.
    - Fixed the `TransactionForm` to have an in-form error message for when both accounts are the same.
    - Improved the accessibility (i.e. aria roles) of the `Account/TransactionTypeFilters`.
    - Improved the default message for the `useFormSubmissionErrorMessage` hook.
    - Added the `featureFlags` slice to redux-persist, since it was forgotten previously.
    - Added the `noErrorIcon` prop to the `Input` atom so that we can remove it from really small inputs (e.g. number inputs) to save space.
    - Added a missing `break` statement to the `useKeyboardNavigation` hook. I only noticed it was missing cause I looked at the file, not because I encountered any buggy functionality.
    - Refactored the `useDateRangeTransactions` hook to be more general so that it can be used in other places.
    - Removed a whole bunch of selectors that were unused.
    - Removed several Account/Transaction model methods that were unused.
    - Upgraded some packages to fix security vulnerabilities.
    
    Implementation Details [backend]:
    
    - Added some missing fields (`on` and `neverEnds`) to the Recurring Transactions model/table.
    - Added the Mailslurp email to the list of emails that get lifetime subscriptions as part of Cypress tests.
    
    Tech Debt:
    
    - Although we changed the `TransactionsTable` to have 'Start Date' instead of 'Date' when displaying recurring transactions, no such change was implemented for the `TransactionsList`, since it didn't have any label to begin with. As such, users might generally get confused by which table list they are looking at.
    - Although we changed `TransactionsTable` to have a different style for the date values of virtual transactions, no such change was implemented for the `TransactionsList`, since its dates act more as groups. As such, users might get confused by which transactions are which on mobile.
    - The custom styled `OptionCard` that we built for `ShowFutureToggle` could probably be extracted into its own type of component; kind of like a shadow button toggle. The account/transaction type filters are _basically_ already this type of component, but... ya know, thinking about it, they're the _exact_ same, except the type filters don't have a double shadow. Hmm. Tech debt!
    - Bug: When setting a Recurring Transaction with a yearly frequency, the realized date will be off by 1 during leap years. AFAICT, this is a problem with `rrule`. We'd only be able to this fix on our end by generating two RRule instances for yearly frequencies: one to handle normal years and one to handle leap years.
    - The 'empty area' for the recurring transactions table (tab) could be improved to have 'recurring' wording.

commit 89eb042bb7e2cae7c38bb799a0ed00fc40b5d8ba
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 1 21:42:41 2021 -0500

    UFC-322 Fixed accessing no-account mode while already logged in. (#148)
    
    Changelog:
    
    - Users can now enter 'test drive' mode after they've already logged in without causing the app to crash!
    
    Implementation Details:
    
    - Made sure any existing JWTs are cleared before entering no-account mode.
    
    Tech Debt:
    
    - N/A

commit a4a1a0e374e128d9b987db4fbc6e6966b9ab43c4
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 1 00:02:02 2021 -0500

    UFC-323 Switch Stripe accounts and enable subscriptions. (#147)
    
    Changelog:
    
    - Paid subscriptions are now active! No more signing up for free accounts; you must now get out your credit card!
    
    Implementation Details:
    
    - Swapped out all the keys for the ones from the actual Stripe account.
    - Renamed the "Founder" product to just "Lifetime", cause it makes more sense from the user's perspective.
    - Improved how failed checkout session creation calls are handled: now users are shown an error toast as opposed to just being logged in.
    
    Tech Debt:
    
    - Added a hack when signing up to give the Cypress test user a lifetime subscription, to get around not being able to disable the subscriptions feature flag on the Backend during testing.

commit 47d02b05fd8392653ea6d85071b472dcc225cb8e
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Feb 12 14:02:36 2021 -0500

    UFC-204 Implemented the Recurring Transactions on the Backend. (#146)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Setup the Backend to handle Recurring Transactions (new schema, new Feathers service, etc).
    - Changed the Backend's production replicas back down to 1 to try and prevent any issues with parallel database migrations.
    
    
    Tech Debt:
    
    - It's kinda jank that we have to duplicate a good bunch of the Transactions model into the RecurringTransactions because we need to just remove the `date`, but oh well.

commit 311dec4b4f7078f4de35287816cd1165e596aa05
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 9 20:46:56 2021 -0500

    UFC-321 Fixed various cross-browser (cough Safari cough) bugs. (#145)
    
    Changelog:
    
    - [frontend] The app now looks and works _much_ better in Safari!
    - [marketing] Improving wording in Privacy Policy and Security guide.
    
    Implementation Details [frontend]:
    
    - Fixed various `flex-shrink` issues (cause current Safari sucks...)
    - Changed the singular use of `flapMap` to just `reduce` (cause old Safari sucks...)
    - Fixed a background color issue with the mobile `AppNavigation` (cause radial gradients suck in Safari...)
    - Fixed the bloody crypto module to deal with empty strings (cause they just blow up in Safari...)
    - Fixed the stupid inputs to not have an ugly inner shadow (cause Safari tries to force itself upon us...)
    - Fixed the crypto worker pool to handle undefined `hardwareConcurrency` (cause Safari doesn't support shit...)
    
    Implementaion Details [marketing -- totally unrelated]:
    
    - Fixed a typo in the Security guide.
    - Added a section to the Security guide on which schemes apply to which data.
    - Improved the introduction section of the Privacy Policy.
    
    Tech Debt:
    
    - No.

commit f892e023478d61588cee4826a794f4f44bd163c0
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Feb 6 16:12:11 2021 -0500

    UFC-312 Setup Slack notifications for sign ups and subscriptions. (#144)
    
    Changelog:
    
    - N/A
    
    Implementation Details [backend]:
    
    - Setup an 'Internal Notifier' service that uses Slack to notify us of user sign ups and subscriptions.
    - Brought in the `@slack/webhook` package to accomplish the above.
    - Extracted an `IS_MASTER` config value.
    
    Tech Debt:
    
    - N/A

commit bb7b28ecf87e35331127974d8def8e4e85f48e1d
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Feb 5 22:31:16 2021 -0500

    HOTFIX: Changed database PVC storage class back to standard, since apparently it can't be changed after creation; increased disk size to compensate.

commit a284a7f9f32a5a93e1561e8e5f2c415de15ee2d4
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Feb 5 22:18:50 2021 -0500

    UFC-314 Made production more robust for future usage patterns. (#143)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Increased the size of attached persistent disks from 5GB to 20GB, as well as changing the type from standard to SSD.
    - Increased the production replica count for all the non-database services.
    
    Tech Debt:
    
    - N/A

commit 304416246a464756290d7f9a67969cc8b1e9b7c9
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Feb 5 21:38:21 2021 -0500

    UFC-313 Setup Simple Analytics on the Marketing site. (#142)
    
    Changelog:
    
    - [marketing] Your page views are now tracked!
    
    Implementation Details:
    
    - Added the Simple Analytics script (for master only).
    - Added a `sitemap.xml` since Google _really_ seems to want it.
    
    Tech Debt:
    
    - N/A

commit 03daef62ee5773ce200fb469af6515dfec718d4e
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Feb 5 20:40:40 2021 -0500

    UFC-320 Changed the subdomains of the marketing and frontend services. (#141)
    
    Changelog:
    
    - You can now access uFincs' marketing site at ufincs.com and the app at app.ufincs.com!
    
    Implementation Details:
    
    - Removed the old Frontend service.
    - Promoted the old Redesign service to the new Frontend service and changed its URL to `app.ufincs.com`.
    - Promoted the Marketing site to the `ufincs.com` URL.
    - Changed back to using high CPU nodes for Cloud Build, since builds were taking _wayyyy_ too long (30+ minutes).
    
    Tech Debt:
    
    - None really. If anything, this _removes_ tech debt.

commit 753b51c4331663266f7c586bbf610edd129a23f7
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Feb 4 22:27:48 2021 -0500

    UFC-319 Built the marketing site. (#140)
    
    Changelog:
    
    - [marketing] Built the marketing site.
    - [redesign] Users will find certain links now go to the Marketing site.
    
    Implementation Details [marketing service]:
    
    - The marketing site has finally been built!
    - It uses React, NextJS, and Tailwind CSS. A nice combination of new tech that works pretty nice, gives us a _really_ fast site, and also optimizes things for SEO.
    
    Implementation Details [redesign service]:
    
    - Added local storage as a fallback driver for `localForage`, since IndexedDB doesn't work in Private Browsing Firefox.
    - Created a route that handles putting the user straight into no-account mode.
    - Made the "you're in Firefox Private mode" toast message a bit more clear.
    - Fixed a bug with the percentage change calculation so that it always has the correct sign (positive/negative).
    - Removed the Landing scene.
    - Made all links pointing to the Landing scene point to the Marketing site instead.
    - Made the Landing route (i.e. "/") redirect to the Login scene.
    - Added a 404 page for logged-in/logged-out states of the app.
    - Added more 'SEO' meta tags to `index.html`, along with updating some of the existing messaging.
    - Had to update the config for the Mailslurp inbox, since the old one 'expired'.
    
    Implementation Details [backend service]:
    
    - Had to update all the dates in the encrypted seed data since somehow they were saved in a form that's invalid in Firefox.
    
    Implementation Details [other]:
    
    - Disabled using the 'high CPU' machine type for Cloud Build, since our credits ran out.
    
    Tech Debt:
    
    - The fact that we modified Kubails to pass the branch as a Docker build arg because we couldn't do our trick of injecting env vars at server run time
    - The fact that we're manually adding hashes to the public images/graphics (for caching purposes) is kinda jank, but it shouldn't have to be done all that often, so it should be fine.
    - There's still some components hanging around in the Marketing site that aren't currently being used, but might see use in the future (e.g. Newsletter, Testimonials, etc).

commit 71665ebc3feccf7967bdd1fddf59d9ae02fb33e3
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Jan 5 13:38:31 2021 -0500

    UFC-318 Fixed the sorting of the 'From' and 'To' columns on the Transactions Table. (#139)
    
    Changelog:
    
    - [redesign] Users will find that the 'From' and 'To' columns now sort the Transactions table correctly.
    - [redesign] Users will find that restoring backups is now functional again.
    
    Implementation Details:
    
    - Turns out the From/To sort _kinda_ worked -- only when using the All Time date range. This was because, when using All Time, populated transactions would be used (as opposed to the un-populated transactions of the regular date range queries). As such, the account sort would work then, leaving the false impression that it would work elsewise.
    - While fixing the bug of this ticket, I ran into an issue where the backup restore process failed; turns out, this was directly related to the previous date encryption change, since the restore effect logic instantiated `ImportProfile` objects. Obviously, this wouldn't work when using encrypted dates, so it threw invalid date errors.
    
    Tech Debt:
    
    - The fact that we have named the `transactionsSlice` selector `selectTransactionsList` while the `crossSliceSelector` version is just named `selectTransactions` (both get the array version of the transactions) is very confusing. I'm not fixing it right now, so tech debt.

commit 4aabdfa3f5b004ead9ff3a4951660d22072cb1cc
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Dec 26 00:19:33 2020 -0500

    UFC-317 Implemented date encryption. (#138)
    
    Changelog:
    
    - [redesign] Users will now find that dates are encrypted. That means _all_ user data is now fully encrypted.
    
    Implementation Details:
    
    - Modified the schemas for all the user data to use explicit timestamp fields that are text, along with removing the default 'timestamp' fields from the Sequelize models.
    - Updated all the seed data to use encrypted dates.
    - Modified the Frontend's ImportProfile/Mapping fields to actually have `createdAt`/`updatedAt` fields.
    
    Tech Debt:
    
    - It's really jank how we had to manually migrate user data to date encryption. Hopefully, since this is the last thing that needed to be encrypted, that we never need to do this again.

commit 52ab8f4f115c4d04a73c77e9d35e293e16b82372
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Dec 24 23:32:48 2020 -0500

    UFC-316 Implemented client-side password hashing. (#137)
    
    Changelog:
    
    - [redesign] Users will now find that their password is no longer ever sent to our servers (instead, it's hashed).
    
    Implementation Details:
    
    - Updated all auth sagas that deal with passwords to use the new hashing function.
    - Updated the salted+hashed password for the test user to account for the new client-side hashing.
    - Fixed the TypeScript config for Cypress to use the `es2015` lib instead of `es5`.
    - Fixed the Stripe webhook cleanup script.
    
    Tech Debt:
    
    - I'm unsure if using base64 encoding for the password hashing is good or bad, but I'm sure someone will yell at us in the future.

commit 37b32ff7c0c3d44c6f5bc95a96e491aff23b9d05
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Dec 23 21:27:32 2020 -0500

    UFC-315 Integrated Stripe to enable users to sign up for subscriptions. (#136)
    
    Changelog:
    
    - [redesign] Users now (not actually) sign up for a subscription, because it's not yet enabled. It will be turned on once we have a proper Stripe account.
    
    Implementation Details [kubails]:
    
    - The build pipeline now creates per-branch Stripe webhooks.
    - The build pipeline is now setup to use the 8 core VM instances. This seems to have cut build times by around half.
    - The Backend service now has environment variables for the Stripe secret keys and webhook secret.
    - Wrote a script for cleaning up the prod database's data in preparation for the subscriptions.
    
    Implementation Details [redesign service]:
    
    - Built the Checkout scene where users can pick a plan to subscribe to for uFincs access.
    - Added a 'Billing' section to the Settings so that users can access the Stripe Customer Portal.
    - Implemented a read-only mode for users with an expired subscription.
    - Built a feature flags slice to handle the subscriptions feature flag.
    - Changed the `NoAccountSignUp` scene to not use a Redirect, but instead codified it as part of the auth redirection logic.
    - Fixed the h2 headings for the forms in the Settings to be h3, since the title of the section is an h2.
    - Improved the (non-existent) typings for the Feathers api.
    - Removed the encryption migration process, since we're just wiping old users.
    - Modified the server to inject the Stripe key along with adding the Stripe URLs to the CSP.
    
    Implementation Details [backend service]:
    
    - Implemented a billing service that handles integrating with Stripe and keeping the new subscriptions table up to date.
    - Modified authentication (logging in and performing requests) to require a valid subscription.
    - Modified the user and subscription models to be soft-delete, to keep IDs around for auditing purposes.
    - Added the Stripe IDs (products/prices) and secret keys to the Feathers config.
    - Implemented the first feature flag for the subscriptions, so that we can toggle them on/off.
    - Created various scripts for configuring new Stripe accounts (relevant since we're currently still on dummy accounts and will need to move soon).
    - Removed the unencrypted seed data, since we removed support for the encryption migration process.
    
    Tech Debt:
    
    - There are no e2e tests for any of the subscription functionality, because we can't test it with Cypress.
    - We also didn't really write any other forms of tests for all this new subscription functionality we just built... that's partly because I'm feeling lazy and partly because unit testing this kind of stuff (with lots of database/third party stuff) is not the easiest/most fruitful. So yeah, the tech debt just keeps growing.
    - Choosing to manually cleanup the prod database (with SQL!) over properly handling migrating users to the subscription model is... probably completely fine? In fact, considering we were able to _delete_ code by getting rid of the encryption migration is probably a net plus.
    - Feature flags, as we're all aware, can very easily get out of hand very quickly, so we definitely should be careful about adding new ones in the future (or at least, making sure they're more temporary).
    - There are probably more Stripe events the webhook could listen to, but I think the ones we have right now are enough to get things minimally functional.
    - The fact that we have to keep track of all the manual settings we configure in Stripe as a separate document is just like pure tech debt. The fact that the settings can't be configured over API is just... sad, considering it's Stripe and all.

commit 681cbca42657d54f2515146ac71f4d99f8bd1fb9
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Dec 10 23:43:50 2020 -0500

    UFC-308 Built the demo mode. (#135)
    
    Changelog:
    
    - [redesign] Users now have the option to try out the app with a set of demo data.
    
    Implementation Details:
    
    - Added the button to the Welcome Step that generates a bunch of dummy data for the no-account users.
    - Changed the 'primary' theme of the `OutlineButton` so that the `hover-color` is the same as the `base-color`, so that the borders aren't a different color on hover.
    
    Tech Debt:
    
    - The `OutlineButton` themes could probably now be simplified, since (currently) all themes have `hover-color = base-color`. But it's fine for now.
    - The fact that the `models` are undefined when initially importing them into the `services` files is... concerning. Then again, there's been a _lot_ of weird stuff that goes on with the `services` files, because I think that folder name is just hard-coded for some other use in one of the build tools, but so far I've been unable to determine what/why.

commit ec8a25116056bb96a8805aff98a4426aefb95724
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Dec 10 15:03:53 2020 -0500

    UFC-307 Built the no-account signup flow. (#134)
    
    Changelog:
    
    - [redesign] Users can now sign up directly while using the app without an account.
    
    Implementation Details:
    
    - Built an in-app signup page to allow no-account users to sign up, create a user account, and migrate their data over.
    - Modified the Welcome Step's message for no-account users to indicate that they can sign up and migrate their data.
    - Moved the 'Use without an account' link in the Authentication scene up a bit on mobile.
    - Modified the `Settings` scene to use the `useWindowWidthBreakpoint` hook so that it only renders the right pieces of layout based on viewport size.
    - Added the 'warning' theme to the `OutlineButton` so that it has an orange theme for the Sign Up button.
    - Fixed the `TransactionsTableRow` to show the actions when focusing onto them, since somehow _that_ became broken sometime in the past... who knows.
    
    Tech Debt:
    
    - Not too much... the fact that the `authSignUpFromAccount` saga relies on the fact that the `NoAccountSignUp` scene has a `Redirect` to handle moving the user back to the app (as opposed to declaratively from the saga) is a bit... non-optimal. But it works, so for now it's fine.

commit 7d0b991cb7a6798d5b9aebfb9f48eada9fffcbac
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Dec 8 20:36:13 2020 -0500

    UFC-306 Implemented no-account mode. (#133)
    
    Changelog:
    
    - [redesign] Users now have the option to use the app without creating an account.
    
    Implementation Details:
    
    - Built the option to use the app without an account (i.e. no-account mode) and modified the app to support it.
    - Created a `WarningMessage` component to encapsulate the `TextField` styles used for the duplicate transactions message.
    - Modified the `commit` sagas of the offline request slices to be passed a `success` saga as the second param, because it was needed when converting the Onboarding requests to offline requests.
    - For the `tryingToAccessRoutes` router util, finally realized that the args was an array because subsequent elements would be state changes. As such, changed it so that we _really_ only care about the first argument.
    - Modified the Cypress tests to clear IndexedDB before every test, since we didn't do as part of UFC-301 but we only just wrote some tests where it mattered (somehow).
    - Re-enabled the Password Reset e2e tests, since the month rolled over.
    
    Tech Debt:
    
    - I kinda cheesed the interface for adding the `success` callback to the `commit` saga, by just marking it as optional. That makes it so consuming sagas have to 'check' that the `success` callback isn't undefined, so kind of hacky... but eh, it works.
    - The auth redirection stuff is still _really_ janky... I had tried to improve by using `Redirect` routes to handle it at the component level, but that wasn't enough control coming from saga land. So, it stays.

commit e6cf6be29687f4ec525242465a3fdce885b13ec7
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Dec 5 22:54:26 2020 -0500

    UFC-302 Page switching performance optimizations and various other TODO improvements. (#132)
    
    Changelog:
    
    - [redesign] Users will find that some page switches happen faster now.
    - [redesign] Other misc improvements; see below.
    
    Implementation Details:
    
    - Improved the page switching speed by delaying the render of expensive components (i.e. charts on the Dashboard) and not rendering things that aren't visible (i.e. mobile stuff on desktop, vice versa for the Accounts scene).
    - Improved the design of the Welcome Step in the Onboarding process by adding a nice graphic.
    - Modified the charts so that the left padding (i.e. y-axis padding) is calculated based on the length of the amounts.
    - Increased the width of the Settings navigation slightly on desktop.
    - Fixed the `TabBarWithSections` to not be able to swipe past the start/end of the tabs.
    - Improved the empty state of the Accounts scene on desktop so that the `EmptyAccountsList` is centered in the page.
    - Added a loading state to the 'Restore Backup' button.
    - Added a loading state to the 'Choose File' button of the Transactions Import process.
    - Added a message to the Adjust Transactions Step of the import process for when no transactions where found in the file.
    
    Tech Debt:
    
    - Well, considering this ticket resolved a bunch of tech debt, uhh... I guess the only thing I thought of was that the CSS used for cancelling out the `AppRouter`s padding in the `WelcomeStep` could probably be extracted as a mixin? Cause I'm pretty sure that same kind of negative margin logic is used elsewhere, but even if it isn't it would at least encapsulate the values into one place.

commit fd398f726ca54c269c733d7a2a313d07820757cf
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Dec 3 21:04:56 2020 -0500

    UFC-301 Changed redux-persist to use localForage for IndexedDB. (#131)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Switched `redux-persist` to use `localForage` for IndexedDB instead of localStorage.
    - Updated Cypress' commands to use `localForage` for injecting the store.
    
    Tech Debt:
    
    - N/A

commit 1570c947633c373738c7457762a476fe01d1fdc9
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Dec 3 19:04:53 2020 -0500

    UFC-300 Implemented a Service Worker to make the app work completely offline. (#130)
    
    Changelog:
    
    - [redesign] Users will now find that the app can work completely offline (including refreshing while offline)!
    - [redesign] Users will now be notified that the app can work offline when logging in.
    - [redesign] Users will now be notified whenever there are new changes to the app, with the option to update.
    - [redesign] Users can now manually check for updates using the "Check for Updates" in the settings menu.
    
    Implementation Details [redesign service - core app]:
    
    - Implemented a Service Worker for caching the app locally so that it can work offline.
    - Fixed how the Offline Request Manager handles 'fetch' effects (formerly, `preventDuplicateQueuing` effects) so that the app can actually function offline and when returning to online. tl;dr fetch effects are now always processed last.
    - Fixed/hacked a bug with the auth redirection logic, where it wouldn't redirect page changes that were caused by navigating through page links.
    - Fixed the logout logic so that it works even when the user is offline.
    - Modified the toasts slice to de-duplicate the service worker update toasts.
    - Removed the `forms` slice (and sagas, and selectors...) because they were no longer needed.
    - Modified the `idsMap` cross slice selector utility to reduce instead of map so that we can remove any undefined values that sneak through. This was done as a response to some race/edge case conditions brought upon by the e2e tests.
    - Modified the `h3` tags that were used for the charts/other dashboard items to `h2`, to have correct header levels for accessibility purposes.
    - Increased the default width of the `Dropdown` slightly, to accomodate the new "Check for Updates" item.
    - Refactored out a utility for the more user friendly error messages. This also fixes the fact that the 'Network Error' message had changed to 'Failed to fetch' when switching from `axios` to `fetch`.
    - Extracted a `values` file for all of the intentional saga delays, just to keep them all in one place.
    
    Implementation Details [redesign service - server/etc]:
    
    - Upgraded `connected-react-router` in the hopes it'd fix the auth redirection problem, but it didn't. However, the package seemed to still work, so no point in downgrading it.
    - Brought in `cheerio` to handle HTML parsing for the Express server.
    - Modified the Express server to generate a hash for the Backend Config script, instead of a nonce, so that we only had to generate it once and could thus cache the entire file.
    - Fixed the Express server to serve the rendered app when directly hitting `/index.html`, so that the rendered version gets cached by the Service Worker and not the raw version.
    - Added a maskable icon for the PWA manifest; changed the `start_url` to `/app` since that makes way more sense than the root route.
    
    Implementation Details [backend service]:
    
    - Increased the validity of JWTs to 30 days, since that just seemed to make sense considering the app can now properly work offline.
    - Changed the response of the healthcheck to just "1" (from "online"), to cut down on bandwidth.
    
    Tech Debt:
    
    - The auth redirection hack (where we add a small delay before redirecting) is, well, a hack. I'm sure we could get the redirections working seamlessly, but it wasn't worth it right now.
    - The Service Worker could probably use more cache rules (right now, it's just "precache everything and then cache images"), but I'm sure as we continue developing we'll eventually figure out what other rules it would need.
    - The fact that we had a fundamental flaw in the Offline Request Manager and never noticed till now is... worrying. I mean, considering I don't really dog-food the offline functionality, it's hard for me to notice these things naturally, but it definitely gives me another thing to check more often. Or maybe I should just write some e2e tests to make sure it actually works offline...

commit 1fda85f9f9c72278e7861bcffa0c3eeadd302a80
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Nov 29 16:03:16 2020 -0500

    UFC-298 Upgraded Frontend packages and optimized a number of things (in terms of performance). (#129)
    
    Changelog:
    
    - [redesign] Only really minor user facing things; see implementation details.
    
    Implementation Details [kubails]:
    
    - Enabled caching using the Nginx ingress, so that it can cache the static assets from the Frontend service. This way, Nginx acts as kind of a small-scale CDN for the Frontend server.
    
    Implementation Details [redesign service]:
    
    - Upgraded the Dockerfile's Node version to the latest LTS (v14.15.1).
    - Upgraded to the latest version of React (v17.0.1), create-react-app (v4.0.1), TypeScript (v4.1.2), and Storybook (v6.1.8).
    - Uprading to the latest React/CRA/TypeScript meant turning on the new JSX transform.
    - Fixed the ESLint config to work with how we want given the new changes from the upgrades.
    - Fixed the Storybook config (and all stories) to work with the upgrades.
    - Had to vendor the main piece of the `storybook-react-router` package since it hadn't been upgraded to work with Storybook v6.
    - Fixed up the Onboarding e2e tests to be less flaky.
    - Had to disable the Backup e2e tests from running in Electron since there didn't seem to be a way to hide the download prompt for Electron (which, of all things, showed up when running in headless mode... huh??)
    - Pinned all of the packages to their exact versions, because there was definitely something going wrong with some of the packages updating themselves after having to blow away the `package-lock.json` to get CRA to work right.
    - Setup a _really_ strict CSP on the Express server, for security purposes (i.e. minimizing XSS attack vectors). This included doing the following adding a nonce to the inline `script` in `index.html` and configuring 'Trusted Types' to mitigate DOM-level XSS.
    - Added HTML escaping to the Express server's parsing of the environment variables, just as an extra precaution against XSS.
    - Added simple caching to the Express server's `renderApp` function, so that the environment variables don't have to be replaced on every call (but the nonce still has to be injected each call).
    - Removed `axios` and replaced it with just `fetch` (not even the polyfilled version -- we're probably fine without it).
    - Removed all imports that referenced story files so that Storybook didn't get pulled into the production build.
    - Figured out that it was the `jsonwebtoken` package that was causing a bunch of those crypto packages to get pulled into the production build; removed it and replaced it with 3 lines of code.
    - Removed the `stopword` package and vendored just the code we needed, since it was the largest node_module in the production build and we only needed a small portion of it.
    - Decreased the debouce timeout on the `IntervalSwitcher` swipe gesture, since it felt slightly too long.
    - Added `autocomplete` attributes to the inputs of the `AuthForm`, since Chrome suggested to do it.
    
    Implementation Details [backend service]:
    
    - Upgraded the Dockerfile's Node version to the latest LTS (v14.15.1).
    - Upgraded to the latest TypeScript version (v4.1.2).
    - Had to change up how some of the TypeScript module declarations were defined to appease the latest TypeScript version.
    - Enabled (lenient) rate limiting directly on each of the model services.
    
    Tech Debt:
    
    - The tests for the `redux-e2e-encryption` package (specifically, for the `crypto` and `middleware` files) are broken because Jest v26 somehow broke ArrayBuffers, thus causing all of the key generation to fail because there's underlying code that checks that the input key material is an ArrayBuffer. Hooray. Anyways, it seems to have been fixed (https://github.com/facebook/jest/pull/9606), so now it's just a matter of waiting for the next release.
    - Had to implement a hack to get `react-spring` to work in production with the latest version of Webpack that came with the upgrade to CRA. The workaround is the `postinstall.js` script that is run after the build step. Hopefully it should be fixed with the next release candidate for v9, but I'm not holding my breathe for that coming anytime soon. See https://github.com/pmndrs/react-spring/issues/1078#issuecomment-713444083 for reference.
    - Had to implement a hack to get the Sass exports working since something in the CRA upgrade broke them. Right now, the workaround is to change the file extensions from `.scss` to `.module.scss`. See https://github.com/facebook/create-react-app/issues/10155 and https://github.com/facebook/create-react-app/issues/10047 for reference.
    - There's a still console warning in Storybook about not assigning to the `.story` property, but I'm pretty sure I changed them all, so I don't know what that's about. I'm sure I'll find out once they finally deprecate and remove it.

commit 0e941e71c4ec2e9be52490ee112e4d12d6dc1fca
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Nov 25 23:55:39 2020 -0500

    UFC-297 Implement backup and restores of user data. (#128)
    
    Changelog:
    
    - [redesign] Users can now make backups of their user data (encrypted or not), as well as restore said backups.
    
    Implementation Details [redesign service]:
    
    - Built out the `My Data` section of the Settings to handle backups and restore of user data.
    - Removed the `CSV Import Formats` section of the Settings for now, since we're not implementing it soon.
    - Fixed the `TransactionTypeSummary` to use the prop type when generating the tooltip.
    - Built a `FileDownloader` component/slice that enables easy file downloads, triggered from Redux.
    - Modified the Accounts scene's `useRedirectToDetails` hook to no longer need the `match` prop, since we can get the path from the `history`.
    - Added a border around the `RecentTransactionsList` on the Dashboard, since that looks better.
    - Fixed the redirection logic of the Settings scene, since it was broken before when it used the `match` path instead of the `history` path.
    - Modified all of the models' 'data' types to correctly have the derived properties as optional.
    - Created an `objectReduce` utility cause I was sick of having to type `Object.keys.reduce` every time.
    
    Implementation Details [redesign e2e tests]:
    
    - Fixed/mitigated a race condition with encryption initialization when using `cy.visit`.
    - Setup Cypress to handle file downloads better.
    - Created an `AppNavigation` abstraction for the e2e tests.
    - Disabled video recordings from Cypress tests, since they were really just taking up time.
    
    Implementation Details [backend service]:
    
    - Added the `userId` property to the Account/Import Profile models.
    - Added hooks to the Account/Import Profile services to remove the user ID properties so that they don't get sent to the Frontend.
    - Enabled proper multi create for the Account and Import Profile services.
    - Modified the Transaction's `validateTransactionOwner` hook to use a temporary cache to limit the number of account lookups.
    - Added the ability to remove a user's data without removing their user account.
    
    Tech Debt:
    
    - There are probably more instances where `objectReduce` could be used, but I think I got the bulk of them.
    - I don't know, there's probably a bunch of stuff I've forgotten about...

commit 7634f7163a6ad76e38d03b87ee06550ab2d544ae
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Nov 20 22:36:40 2020 -0500

    UFC-296 Added a list of recent transactions to the Dashboard. (#127)
    
    Changelog:
    
    - [redesign] Users can now see a list of their 5 most recent transactions on their Dashboard.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit f89c9d56371c9c58859c88dc42303b446dc43c2f
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Nov 20 15:45:29 2020 -0500

    UFC-295 Implemented (permanent) user account deletion. (#126)
    
    Changelog:
    
    - [redesign] Users can now permanently delete their user account, if they so desire.
    
    Implementation Details [redesign service]:
    
    - Added a section to the 'User Account' Settings for deleting your user account.
    - Fixed the `authChangePassword` saga (and the user account deletion saga) to not accidentally log the user out when they enter the wrong password when changing/deleting.
    - Created a modals slice selector that checks if any modal is visible, so that the `BackgroundBlur` just needs to use one selector.
    - Fixed the animation spring for `CurrentAmount` by making sure the amount isn't undefined (can cause crashing during race conditions brought about by the e2e tests).
    - Added 'back' the `variant` property to the `SubmitButton`, so that we can have a 'negative' `SubmitButton`.
    - Fixed the responsive widths of the User Account settings sections, to be full width on mobile.
    - Fixed the `Dashboard` scene to scroll to the top on mount, so that it gets scrolled up after completing the onboarding process (doesn't get scrolled up by the `AppRouter` since no route change occurs).
    
    Implementation Details [backend service]:
    
    - Created the email template account deletion confirmation.
    - Modified the the user remove method to send the confirmation email.
    
    Tech Debt:
    
    - Had to comment out the Password Reset e2e tests, since `skip` isn't respected by `cypress run`.
    - Could probably make the modals slice `selectAnyModalVisible` selector just auto check all keys for `true`, instead of hardcoding the other selectors into it, but whatever...
    - Account deletion should probably have some sort of retention mechanism (sending post-deletion emails and such), but that's future me's problem.

commit 751634c04fd380e0a6d4e5b2700aff6f15221952
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Nov 19 15:10:34 2020 -0500

    UFC-294 Made the Current Amounts animate when the values change. (#125)
    
    Changelog:
    
    - [redesign] Users will find that certain amounts (like Account Summaries on the Dashboard) now animate up/down in response to value changes.
    
    Implementation Details:
    
    - Fixed the `finalOnClose` of the `useOutsideCloseable` hook to not throw 'memory leak' errors, by making it check for a mounted component.
    
    Tech Debt:
    
    - Had to disable the Password Reset e2e tests, since we were almost out of Mailslurp quota; will only run them when relevant.

commit 06c6be0d6dec569b2f5d3a755c22a291dc414447
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Nov 18 23:14:17 2020 -0500

    UFC-293 Implemented email address changing in the user settings. (#124)
    
    Changelog:
    
    - [redesign] Users can now change their email address in their user settings.
    
    Implementation Details [redesign service]:
    
    - Built the email change form for the user settings.
    - Fixed the `DateRangeSizePicker` to not autofocus the active option on mount (so that Monthly isn't focused on first page load).
    - Increased the amount of horizontal grid gap between the headers of the Settings scene and the content, because things were looking cramped.
    
    Implementation Details [backend service]:
    
    - Moved the email notifier out of the auth management service and into its own utils file.
    - Modified the users service to send confirmation emails when a user changes their email or password (through user settings).
    - Fixed the email templates so that the copyright date is "2020 uFincs" instead of "uFincs 2020".
    
    Tech Debt:
    
    - Decided against making the change email/password e2e tests check for sent emails, to conserve on quota for Mailslurp.

commit 76051d85b2668f76a4fe0c99702b4a7481bb7fb3
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Nov 17 23:06:58 2020 -0500

    UFC-292 Improved the stability/performance/reliability of account deletions/undoes. (#123)
    
    Changelog:
    
    - [redesign] Users will find that deleting and undoing the deletion of accounts is much more stable.
    
    Implementation Details:
    
    - Fixed the cause of the 'doubled balance after deletion undo' by making sure the account balance is zeroed out before re-creating it.
    - Increased the base request timeout for the Offline Request Manager, since the short 2 second timeout before was what was causing account deletions to fail.
    - Improved the speed of the undo deletion by deleting the transactions with the multi interface.
    - Fixed an issue where the re-created (undoed) account would have the transactions on it, causing them to be duplicated and a 'too large' payload error to be thrown; fixed by zeroing out the transactions before re-creating the account.
    - Fixed issues with the transactions index where words would be undefined after deleting a large number of transactions (via deleting an account).
    - Added waits to the undo account deletion e2e tests before clicking on the toasts, to help improve the consistency of the tests.
    - Improved the Backend's `validateTransactionOwnerHook` by adding validation code for multi removes.
    
    Tech Debt:
    
    - We've now identified an edge case issue with account deletion, whereby if it has to rollback after transactions have already been deleted from the Backend, then those transactions won't be re-created on the Backend. However, we've mitigated all known ways that trigger this to happen, but we should probably improve the rollback process to re-create any transactions that were missing, in the future.

commit 3ba15dff4404a3d4abbd1a8609f8450dde5bb5f6
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Nov 17 16:32:17 2020 -0500

    UFC-291 Modified the Transaction Summaries to use the searched transactions for its calculations. (#122)
    
    Changelog:
    
    - [redesign] Users will now find that the Transaction Summaries use the search results to calculate the summaries.
    
    Implementation Details:
    
    - The summaries also use the currently selected types for filtering the transactions.
    
    Tech Debt:
    
    - N/A

commit ff0a37bbc181d2a72f5cfdab67b2479882191533
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Nov 16 22:58:26 2020 -0500

    UFC-289 Built the Transactions Summary view. (#121)
    
    Changelog:
    
    - [redesign] Users can now see a summary of their transactions on the Transactions page.
    - [redesign] Users can now swipe the date picker to change between intervals.
    - [redesign] Users can now swipe between tabs.
    
    Implementation Details:
    
    - Built the `TransactionsSummary` view.
    - Fixed the `TransactionDateOptions` to no longer needed the fixed height, since the animations on the `TabBarWithSections` are now fixed.
    - Fixed how the `useStepTransition` is used so that the same step isn't shown when transitioning between steps.
    - Fixed a 'memory leak' in some components that use `useOnWindowResize`.
    - Created a mixin for the card shadow.
    - Fixed the Backend Account service to remove the `creditAccountTransactions` and `debitAccountTransactions` properties, so that they aren't stored on the frontend.
    
    Tech Debt:
    
    - There isn't actually much; in fact, we probably fixed more tech debt this time around than anything.
    - I guess, if anything, the `TransactionsWithSummary` component could be moved out the `Transactions` scene and into a component file proper, but eh, whatever.

commit 262174b4b64804b5031c9050deae60592d6c9617
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Nov 13 16:27:22 2020 -0500

    UFC-288 Made the onboarding process functional. (#120)
    
    Changelog:
    
    - [redesign] Users will now be put through an onboarding process when they first sign up to create their accounts.
    
    Implementation Details:
    
    - Made the onboarding process functional.
    - Added transitions between the steps of the onboarding process and the import process.
    - Fixed the mobile `ProgressStepper` to have a proper (functional) Next button for the final step (of both the onboarding and import processes).
    - Changed my mind on the text alignment of the `StepDescription`, it's now always center aligned, even on extra small screens.
    - Modified the `SubmitButton` to accept a custom Button component to replace the `ShadowButton`.
    - Added an `isOnboarded` flag to the schema of the users table.
    - Fixed the `signUp` Cypress command to support skipping the onboarding process.
    
    Tech Debt:
    
    - I skipped out on tests for the onboarding sagas and the new `createMany` account saga. Why? Cause I was lazy. Should probably do those in the future.
    - The 'hack' of using a portal to render the sticky BulkTransactionActions is... quite hacky. I mean, it _works_... But that kind of thing seems like the prototypical definition of tech debt, so...

commit a5d9b6c9760afd41f0def76f5305b9eeba8c91ea
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Nov 9 23:25:18 2020 -0500

    UFC-286 Built the layout for the onboarding process. (#119)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the layout for the Onboarding process.
    - Started building the onboarding functionality with, e.g., the onboarding slice.
    - Extracted all of the 'shared' components from the Import process for re-use with the Onboarding process.
    - Modified the `AccountsList` to support displaying arbitrary accounts, without having to get it from the store.
    - Modified the `AccountsList` to support the `actionsToShow` prop.
    - Modified the `ProgressStepper` to take the step titles in as a prop, so that it can be used by the import and onboarding processes.
    - Added an optional 'Skip' button to the `StepNavigationFooter`.
    - Fixed the double-layer `ListItem` to remove the padding for the overflow button when no actions are shown.
    - Moved the `useSelectableItem` hook out from the `TransactionsListItem` and into the `useSelectable` context provider hook, but then decided against using it for the `SelectableAccountsList`, so... it just moved.
    - Created standard style size variables for icons.
    - Created a style mixin for the layout of 'wizard' step.
    
    Tech Debt:
    
    - It's kinda janky that, instead of adding a selector prop to the `AccountsList` like the `TransactionsList`, we just added a flag prop to use the data directly. I'm sure this'll be end up being something that we want to change in the future, if only because we end up actually needing the selector interface.
    - I'm really feeling the need for transitions between pages; it just feels like the instant page switches in the, e.g., onboarding process are too jarring; especially when where starting to add all these little micro-interactions.

commit b2e83235fe5ed2f5584edad9da231321404744ab
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Nov 5 16:39:45 2020 -0500

    UFC-287 Fixed the performance of the Transactions search. (#118)
    
    Changelog:
    
    - [redesign] Users will find that transaction searching is now quite a bit faster.
    
    Implementation Details:
    
    - Fixed the `useDateRangeTransactions` hook to not memoize using `JSON.stringify`, since it was actually slow.
    - Wrapped the `TransactionTypeFilters` in memo to minimize unecessary re-renders.
    - Changed the `TransactionsSearchInput` to search using debounce instead of throttle, to improve typing performance.
    - Changed the height button height on mobile to be the same as on desktop (cause it looks better).
    
    Tech Debt:
    
    - Object references that come out of `useDateRangeTransactions` might not be optimal any more, but it's better than losing 100ms on stringification...

commit d0ad8bf353efa087d0ec7188be117e0f032bf45f
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Nov 4 23:12:00 2020 -0500

    UFC-285 Fixed the transaction type filters to calculate amounts based on searched transactions. (#117)
    
    Changelog:
    
    - [redesign] Users will find that the transaction type amounts (on the Transactions page) now update according to search results.
    - [redesign] Users will find that transactions on the Account Details page now display correctly when the account is changed.
    
    Implementation Details:
    
    - Created a hook that combines the date range and search context filters.
    - Modified the `TransactionTypeFilter` logic to use the search context filter.
    - Fixed a bug with the `AccountDetails` memoization where the account ID wouldn't update as the account changed (on desktop).
    
    Tech Debt:
    
    - The fact that the `selectAccount` selector for the `accountsSlice` and the `crossSliceSelectors` have different signatures is kinda annoying. But oh well.

commit aef4d6a9db83495fe8fae5b755edb5e2916a7741
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Nov 4 17:08:39 2020 -0500

    UFC-284 Added a search input to the Transactions page. (#116)
    
    Changelog:
    
    - [redesign] Users can now search their transactions (by description) on the Transactions page.
    
    Implementation Details:
    
    - Built a search input for the transactions and added it to the Transactions scene.
    - Improved the `DateSwitcher` to use the 'mobile' input height (on mobile), so that it matches the search input.
    - Fixed the `TransactionsListItem` to have the `style` prop explicitly passed through, so that the animations are properly applied.
    - Fixed the `ToastMessages` to have a z-index value, so that they don't render under things like the Transactions list... oops.
    - Added back the 'retries' to the Cypress config, since it was accidentally removed last ticket.
    
    Tech Debt:
    
    - Getting real sloppy there not noticing the cypress retries were removed last ticket... on top of the z-index for the toasts...
    - Obviously, description searching is only the first step of transactions search; in the future, we want to search on more properties.

commit 751e901542cd9d554f6013a6c6ef25d22cd2804c
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Nov 2 23:23:27 2020 -0500

    UFC-276 Made the password reset forms functional. (#115)
    
    Changelog:
    
    - [redesign] Users can now reset their password (and their account data) if they forget their password.
    
    Implementation Details:
    
    - Connected the frontend and backend to make the password reset forms functional.
    - Fixed the 'Add' button for the `EmptyArea` to have an explicit max-width now that the implicit one has been removed from the underlying `Button`.
    - Fixed a grievous error with the Backend's 'delete user data' process when resetting a password, which would cause _all_ user data (i.e. for _all_ users) to be wiped.
    - Modified the Backend's rate limiter to have higher rates in development, so that the e2e tests don't get locked out.
    - Signed up for 'MailSlurp' and brought in their package so that we can properly test emails in the e2e tests.
    - Fixed the `signUpHeadless` cypress command by converting it to a non-headless `signUp` command, since it didn't actually work since the encryption stuff was introduced.
    
    Tech Debt:
    
    - The abstraction over the authentication forms in the e2e tests is quite a bit sloppier than the other abstractions (e.g. transaction form). It should really be refactored/improved.
    - Also, we still need to sub the `Viewport` type into everywhere else in the e2e tests.

commit 30422fbe150fc84ba58ef12f9511bf1c4b1be389
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Oct 31 23:22:49 2020 -0400

    UFC-274 Built the layout for the password reset forms. (#114)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the layout for the password reset forms and dialog; got them all routed up.
    - Added the `BackgroundBlur` to the root App router (not just the authenticated `AppRouter`), so that it can be used with the `PasswordResetDialog`.
    - Finally decided to just remove the `max-width` styles on the Button/Input atoms, so that they start have 100% width. It just makes more sense.
    - Upped the `max-height` of the `ConfirmationDialog` content, to let the `PasswordResetDialog` content fit without scrolling.
    
    Tech Debt:
    
    - Will want to adapt the other uses of Button/Input to account for no longer having to unset `max-width`.

commit d5c66808f169763ead6c70c2f1b8735cd8f867e0
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Oct 29 23:27:23 2020 -0400

    UFC-275 Configured the Backend for password resets. (#113)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Setup password resets and mailing on the Backend.
    - Built/customized a series of email templates for the password reset process.
    - Configured rate limiting on the unauthenticated Backend routes (password reset, user creation, etc).
    - Finally configured CORS on the Backend so that only the Frontend (Redesign) can call it (from a browser...)
    - Fixed the Backend to actually have `NODE_ENV` set to `production`; it was previously running in `development`...
    - Added the Mailgun API key to the Backend secrets.
    - Fixed the frontend's login saga to use a looser existence check for the edek/kek salt, so that it counts empty strings as 'null'.
    - Fixed the `encryption` e2e tests to not directly import from the `authentication` tests, so that the `authentication` tests don't get run a second time.
    - Configured the nginx ingress to pass real client IPs through to the (Backend) services, so that rate limiting can work.
    - As a consequence of ^, changed the nginx ingress' `Deployment` to a `DaemonSet` so that a replica runs on every node.
    - Fixed the Helm `service.yaml` template to have a proper conditional for the `loadBalancerIp`; it was previously adding it to _all_ services.
    - Added all of the DNS records necessary for Mailgun/Google Workspace to the Terraform config.
    
    Tech Debt:
    
    - Backend `production.json` config will need to use `FRONTEND` variables once the Redesign service gets renamed to Frontend.
    - Will want to eventually implement email verification, now that we have the infrastructure in place.

commit ff4299ce28e87549ddeeb485e0e7ce55a43988c3
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Oct 28 23:46:14 2020 -0400

    UFC-278 Made the Transaction form feel more spacious on mobile. (#112)
    
    Changelog:
    
    - [redesign] Users will find that the Transaction form now feels more spacious on mobile.
    
    Implementation Details:
    
    - The Settings nav items on mobile are also now taller, since they can afford the space.
    
    Tech Debt:
    
    - N/A

commit 8cc989dc7168217a6314db0c0f9d5604670de8c5
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Oct 26 22:30:43 2020 -0400

    UFC-277 Made the mobile app navigation hide away when scrolling. (#111)
    
    Changelog:
    
    - [redesign] Users will find that the mobile app navigation now hides away when scrolling.
    
    Implementation Details:
    
    - Changed `useScrollToTopOn` to use `document.getElementById`, cause that makes more sense than `querySelector`.
    
    Tech Debt:
    
    - Might want to eventually refactor the multiple instances of querying up the `AppRouter` through DOM methods for use with scrolling methods.

commit 7b6f446dfb8d9fe9e8024e6c6cd9480200e3dca2
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Oct 26 17:36:41 2020 -0400

    UFC-273 Added the encryption consent checkbox to the Sign Up form. (#110)
    
    Changelog:
    
    - [redesign] Users will now have to accept that losing their password will result in a complete loss of their data during Sign Up.
    
    Implementation Details:
    
    - Nothing noteworthy.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit 3216d1088a1241be8e1af36714a5d3457a764f13
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Oct 25 21:43:45 2020 -0400

    UFC-272 Built the splash screen for the login process. (#109)
    
    Changelog:
    
    - [redesign] Users will now find that there's a snazzy splash screen while they wait for the app to load after login.
    - [redesign] Users will find that the site now has a proper favicon!
    
    Implementation Details:
    
    - Built a wonderfully animated splash screen for users to enjoy while their data loads after they login.
    - Created a new `app` slice for storing the loading state for the splash screen, since we had no better place to put it.
    - Created a `useForceRerender` hook because, sometimes, you just need to hack it.
    - Since we were dealing with logos and stuff, I finally decided to setup a proper favicon for the site. Hooray! We're somewhat more legit now!
    - Fixed a typo with the `defaultCommandTimeout` in the Cypress config.
    
    Tech Debt:
    
    - Had to use a force re-render for the `SplashScreen` to make the logo animation actually loop; it wouldn't loop otherwise. Hopefully this gets fixed as `react-spring` v9 matures (or we could just submit it as an issue...)

commit 0af77807b2e9206c5bc533a442c1defcf9c063c9
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Oct 24 16:49:39 2020 -0400

    UFC-271 Fixed all unnecessary calls to 'useEscapeKeyCloseable'. (#108)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Fixed all components that use `useOutsideCloseable` (and a `CSSTransition`) to have the hook inside the transition so that it doesn't fire when the component isn't mounted.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit b4f4b59c601a59f05f914398184c19c9da10c5bb
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Oct 24 16:23:41 2020 -0400

    UFC-269 Made the password change form functional. (#107)
    
    Changelog:
    
    - [redesign] Users can now change their passwords (while logged in).
    
    Implementation Details:
    
    - Fixed the auth `login` saga to do the user state update _after_ the `success` call, so that it doesn't get cleared by the successful login state reset.
    - Fixed the root reducer state reset to _not_ reset the toasts state, so toasts persist through logout (in case of authentication error messages).
    - Fixed/improved the encryption Worker Pool to run the initialization tasks in parallel. This greatly speeds up login times on both Chrome and Firefox.
    - Fixed how the e2e tests login headlessly so that they can inject the user ID into the store, so that the Crypto module doesn't need to check for a null user ID argument (theoretically removes attack surface).
    
    Tech Debt:
    
    - Now that we've realized that Web Workers don't (truly) parallelize WebCrypto operations, maybe there's not really a _great_ need to use workers, but it still seems to speed up the initial fetch decryptions that it seems worth it.

commit 5256979dcfa8108dc47545a3eaaca114a1649054
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Oct 23 14:31:42 2020 -0400

    UFC-268 Built the layout for the password change form/Settings page. (#106)
    
    Changelog:
    
    - [redesign] Users will find that the Settings page is being re-designed.
    
    Implementation Details:
    
    - Created the layout for the password change form.
    - Fleshed out the Settings scene with proper navigation and double column layout, ala the design mockups.
    
    Tech Debt:
    
    - Adding the `enableOnClickWithNoActions` to the `ListItem` might be a mistake, in terms of tech debt. It just seems like a very-edge case thing that could be handled better, but this works, so it's what we'll use for now.
    - The `Route` setup in the Settings scene for making sure everything renders at the right time _seems_ kind of messy. However, it works, so live with it.

commit 6b2e2d71baaf52a28bca5e58fc56aa046fd746b0
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Oct 20 15:20:09 2020 -0400

    UFC-270 Shrunk text size of toast messages; made the toasts closeable by swiping them away. (#105)
    
    Changelog:
    
    - [redesign] Users will find that the text size of the toast messages is now smaller.
    - [redesign] Users can now swipe toast messages to close them.
    
    Implementation Details:
    
    - Adjusted the font size/padding of the Small toast messages to be smaller (particularly on mobile).
    - Brought in `react-spring` and `react-use-gesture` to add draggable/swipeable properties to the toasts to close them.
    - Removed the use of `react-transition-group` for everything toast related; the enter/exit animations are now handled by `react-spring`.
    
    Tech Debt:
    
    - Oh boy! We're using a release candidate of `react-spring` v9. And it has some pretty major breaking changes, along with general issues and missing documentation. This could definitely come back to bite us. I don't want to adopt it any further, beyond the toasts use case, until it's more stable (i.e. a final v9 has been released). So yeah, that'll probably be a pain to deal with in the future, if/when it gets upgraded again. Still, it seems pretty easy to work with, so I look forward to the day where we can adopt it further.

commit e31796998bc8f8ce6f77c950b63a3eda51b1766d
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Oct 19 16:43:24 2020 -0400

    UFC-267 Improved the open/close/submit performance of the Transaction Form, among other things. (#104)
    
    Changelog:
    
    - [redesign] Users will find that opening/closing/submitting the Transaction/Account forms is now snappier, along with other performance improvements.
    
    Implementation Details:
    
    - Improved memoization across the app, with key optimizations around the charts. Since chart renders are very expensive, reducing the number of unnecessary re-renders results in a tangible performance improvement when dealing with the forms.
    - Changed several cross-slice selectors to use the non-populated version of the account/transaction selectors, resulting in easier memoization since the resultant output is simpler.
    - As a result of the above, had to change a number of instances of the `Account/Transaction` types to `AccountData/TransactionData`. This just makes more sense overall, since we should want to use the simpler data type in general.
    - Modified the `CombinedTransactionsView` to only render either the list or the table, but not both at once, to improve rendering performance.
    - Modified the `TransactionsTable` to pass down the `isLargeWidth` prop to the headers/rows, instead of having them calculate it themselves.
    - Fixed the `useIsLargeWidth` hook to not call `setState` on unmounted components.
    - Fixed the fix for `Ctrl+Enter` on the edit forms, since we accidentally disabled all _other_ `Ctrl+` shortcuts (including `Ctrl+a`).
    
    Tech Debt:
    
    - The fact that we have to use the `JSON.stringify` memo hack on a lot of the `useSelector` output worries me. Will want to look more into why it's not working properly, or just live with it since `JSON.stringify` is fast enough.

commit fda3b3faa58e8cbf43b71f9f174bac5915970012
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Oct 18 16:07:20 2020 -0400

    UFC-266 Fixed the charts to show cents on the y-axis when the values are sufficiently small. (#103)
    
    Changelog:
    
    - [redesign] Users will find that cents are now shown on the y-axis of all charts when the values are sufficiently small.
    
    Implementation Details:
    
    - Nothing else noteworthy.
    
    Tech Debt:
    
    - N/A

commit 1cdfbf755f38fdd039b15e5bf7eec3c0e75be0b3
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Oct 18 00:09:01 2020 -0400

    UFC-265 Fixed "Ctrl+Enter" to not do anything while editing an account or transaction. (#102)
    
    Changelog:
    
    - [redesign] Users will find that "Ctrl+Enter" now correctly does nothing when editing an account or transaction
    
    Implementation Details:
    
    - Modified the account/transaction forms to not use the Ctrl+Enter shortcut while editing.
    - Brought in `@testing-library/cypress` for some QOL Cypress commands (particularly, `findAllByText`).
    - Moved the `cypress-file-upload` package to dev-dependencies, cause that's where all the Cypress stuff belongs.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit a1910396b52efe88763eeb05c10651389e3eb08a
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Oct 17 21:03:58 2020 -0400

    UFC-264 Fully integrated the e2e encryption library. (#101)
    
    Changelog:
    
    - [redesign] Most user data is now encrypted client-side, such that we (uFincs) are not capable of reading it.
    
    Implementation Details [redesign service]:
    
    - Integrated the `redux-e2e-encryption` library with the rest of the app, enabling client-side encryption for all non-ID, non-date fields.
    
    - Had to add `git` to the Dockerfile, because we need to be able to pull my fork of `isomorphic-webcrypto` from my GitHub.
    - Finally brought in `localForage`, to have a better interface to IndexedDB.
    - Modified cypress test headless login to work with the encryption process.
    - Fixed the `AccountForm` to display 3 decimal places for the interest field when editing an account.
    - Fixed the `Account` model to assume that `balance` isn't always defined and use a default value otherwise (since there's no `balance` field on the encrypted instances from the Backend).
    - Fixed the `rootReducer` to reset state on logout.
    - Fixed the `rootReducer` to reset state on login/logout _success_ instead of initial _request_.
    - Modified the fetch sagas (account and import profiles) to support both encryption and decryption (depending on if we're doing encryption migration or normal operation).
    - Modified the timing for how the app boot process is triggered, so that we can only try and load the encryption keys from storage if the page refreshed. This way, users can still use the app when IndexedDB isn't available.
    - Split the transactions request for `create` into `create` and `createMany`, so that we don't overload the payload shape on one request. This is so it works properly with the encryption process.
    - Fixed the double 'Please authenticate' error toasts that would always pop up, by adding duplicate detection logic to the `toasts` reducer.
    - Added the user ID to the `user` slice so that we can refer to it when initializing the encryption keys from storage.
    - Modified the `OfflineRequestSlice`/`OfflineRequestManager` to support adding meta tags to the effect/rollback actions, so that we can apply the encrypt/decrypt tags for the encryption process.
    - As a result of the above, the type of the `OfflineRequestSlice` actions changed such that `redux-saga` can't correctly interpolate that there's a `toString()` on the actions; as a result, we now have to access the `type` properly manually when using these actions for saga effects.
    - Modified `createRequestSlices` so that the resultant reducer ignores any actions that have errors. This is so the reducer can ignore actions that failed to encrypt/decrypt. Error actions such as these should be handled at the saga level.
    
    Implementation Details [redux-e2e-encryption library]:
    
    - Modified the `crypto` module to store the encryption keys in IndexedDB, so that they persist between page refreshes without having to re-derive them.
    - Fixed the `middleware` module to not modify the action object directly; added more actions for logging out and initializing from storage.
    - Modified the `schema` module to be able to parse and apply payloads that have nested/array models.
    - Modified the `worker` module to convert all integer fields back to integers after decryption, so that we didn't have to do it elsewhere.
    - Fixed the `workerPool` module to actually increment the worker index after assigning work to a worker, so that work is actually distributed amongst all the workers.
    - Fixed the `workerPool` module so that the chunking logic didn't allow the chunk size to be 0.
    
    Implementation Details [backend service]:
    
    - Modified the `change-int-to-bigint` migration to check that the columns are actually INTEGER before changing them. This is to support migrating old databases as well as forward compatibility with brand new databases.
    - Modified the `users` table/model to now include 'edek' and 'kekSalt' fields.
    - Modified all `STRING` columns to be `TEXT`, since I didn't realize that `STRING` was actually `VARCHAR(255)`.
    - Modified all `BIGINT` columns to be `TEXT`, since we're now storing encrypted data in them.
    - Modified the seed "test@test.com" user's data to be encrypted.
    - Created a second "test-unencrypted@test.com" user with unencrypted data for testing the encryption migration process.
    - Modified the model validation for Accounts/Transactions to align with the fact that field data is now encrypted (e.g. can't check bounds on numbers).
    - Modified all services to disallow external usage of unused methods.
    - Improved the ownership/access checking of all in-use service methods.
    - Removed the field validation `validateUpdate` account hook, since it no longer works now that fields are encrypted.
    
    Tech Debt:
    
    - Will need to merge the patch to `ismorphic-webcrypto` (to enable Web Worker support) upstream once we've soak-tested it enough.
    - Improve error handling around the encryption process, particularly for anything that needs the user to 'contact support' (we should automatically flag these things and notify ourselves).
    - Will want to eventually encrypt the date fields.
    - Will also want to eventually encrypt data at the row level instead of the field level, but that's not part of this first phase of e2e encryption implementation.
    - Might want to swap in `localForage` for the `redux-persist` adapter, so that we can use IndexedDB instead of Local Storage for persistence.
    - There's obviously still work to be done on the `redux-e2e-encryption` library to open source it (mainly cleaning up external interface, more docs, etc), but I feel like this is a very solid base that has been built.
    - It's kinda unwieldy that we now have a kind of duplicate set of seeders (one for the encrypted user, one for the unencrypted user); these could probably be simplified/squashed together, but it doesn't really like that much of a difference one way or the other. Come on, are we gonna add _another_ user type??
    - Could probably split the encryption migration portion of the current `fetchAll` effects out into its own effect (just for clarity's sake), but eh, it's fine as is.

commit a32f1bc797cf7011497a3ab10910f4e0b4481d50
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Oct 7 22:53:25 2020 -0400

    UFC-263 Built the initial version of the redux-e2e-encryption library. (#100)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the initial version of the `redux-e2e-encryption` library.
    - Modified the Account and Transaction models to explicitly allow strings for number properties as part of the constructor, since encrypted numbers are always represented as strings.
    - Brought in the `fast-text-encoding` and `isomorphic-webcrypto` packages as shims for their respective functions, so that they work in Jest.
    - Brought in `workerize-loader` for enabling easier usage of Web Workers.
    - Added the `vendor` folder to the ESLint config for the import regex.
    
    Tech Debt:
    
    - There's still (a lot of) work to do to get the library ready for external consumption, but it's getting there.

commit a941c26cb44314cc73c0cbde1eaf88b23e6113f7
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Oct 1 14:23:32 2020 -0400

    UFC-256 Fixed the mobile list items to not open on long press while scrolling. (#99)
    
    Changelog:
    
    - [redesign] Users will find that list items (accounts, transactions) on mobile do not open by accident while scrolling.
    
    Implementation Details:
    
    - Improved the `onLongPress` hook to use a native event that I was previously unaware of; now it should not activate when scrolling.
    
    Tech Debt:
    
    - N/A

commit bc08c9638c18326bd3a30900e2c6fdd5bb2256f6
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Sep 30 22:37:24 2020 -0400

    UFC-255 Modified the AppRouter to scroll to the top when changing between pages. (#98)
    
    Changelog:
    
    - [redesign] Users will now find that pages scroll back to the top when changing between pages (that is, new pages aren't scrolled down the same amount as old pages).
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit a04b8e2dd452d8fac15b14151bbd068962be29e2
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Sep 29 20:17:06 2020 -0400

    UFC-254 Built the Current Net Worth indicator. (#97)
    
    Changelog:
    
    - [redesign] Users can now see their current net worth at all times (on desktop).
    
    Implementation Details:
    
    - Made some minor styling adjustments to the dark version of `CurrentAmount` to make it work with the `CurrentNetWorthIndicator`.
    - Fixed the title of the `Transactions` scene, which was incorrectly "Transaction" instead of "Transactions".
    
    Tech Debt:
    
    - In order to derive the current net worth, we're currently doing the calculations at the selector level. Perhaps these should be moved into the `Account` model. Something related to move into the `Account` model would also be the account summary calculations, that are currently done at the hook level. Why move these calculations into the model? Because they're business logic, and the models should be where the bulk of the (accounting related) business logic should go.

commit 8a7f094ade5dccda42f269a161779c53f72c2e21
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Sep 28 23:14:36 2020 -0400

    UFC-252 Upgraded GKE cluster to v1.16. (#96)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Upgraded the GKE cluster to the latest v1.16.13, so that Google doesn't upgrade it for us.
    - Updated the templates to use the new API versions, since some of our existing ones were completely deprecated.
    
    Tech Debt:
    
    - N/A

commit 16e218a35b708dd1c02308bcd89472382cfeeba6
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Sep 27 22:27:03 2020 -0400

    UFC-250 Made the transactions import process fully functional. (#95)
    
    Changelog:
    
    - [redesign] Users can now import transactions from CSV files.
    
    Implementation Details:
    
    - Made the full import process fully functional.
    - Changed the props of the `Checkbox` atom to be called 'checked' instead of 'selected', because that makes more sense; added a disabled state to the `Checkbox`.
    - Added the ability to individually disable options in a `Dropdown`.
    - Added a custom placeholder to the `SelectInput`, select regular `select` inputs don't naturally have one.
    - Improved the `AutocompleteInput` to be able to autofill when there's only a single value.
    - Improved the `AutocompleteInput` to show all options when one option is already selected.
    - Created a combined view of the `TransactionsList` and `TransactionsTable`, since they're so frequently used together.
    - Fixed the `AccountForm` to not show the Opening Balance input for Income/Expense accounts.
    - Fixed the `AccountForm` to have a default Opening Balance value of "0.00".
    - Figured out the right TypeScript type for passing components around as props.
    - Finally resolved the TECH DEBT for using strings in the `ImportableTransaction`; everything has been converted to use numbers properly.
    - Straightened out the z-index scale, so that layers are mathematically dependent on each other.
    - Upgraded Cypress to the latest 5.2.0 to try and alleviate a crashing problem.
    
    Tech Debt:
    
    - I don't even know where to begin... this ticket was so large and touched so many things...
    - I guess the most prominent thing to be careful of is the feature creep of the `TransactionsList/Table` (with a note on the `TransactionForm`) since they now have to support things that are specific to just the import process.
    - Also, the whole `AutocompleteInput`/`AutocompleteSelectInput` situation is just a mess. `AutocompleteSelectInput` should have just fixed everything wrong with `AutocompleteInput`, but it only fixed parts of it (since we can't pass in a controlled value, but the interface for changes is better). Will have to revisit the whole thing in the future.

commit 76d92a7ea95ebd547e2a59777abc36c5fb342e00
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Sep 15 00:02:22 2020 -0400

    UFC-251 Upgraded the cluster to the latest 1.15 GKE version to patch CVE-2020-14386, (#94)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Upgraded the cluster master/node version to the latest 1.15.12 version to get the patch for CVE-2020-14386 in 1.15.12-gke.20.
    - Enabled auto upgrades on the node pool, because it seems like that would be a good thing to have.
    - Changed the node machine type from `n1-standard-1` to `e2-medium` because that's the new default for GKE clusters and it seemed to make sense for our use case. We seem to be able to fit a standard deployment on the one instance, so we'll see if it stays at one (and our costs go down).
    - Note: The `e2-medium` machine type is a shared-core instance and currently supports 16 persistent disks (as opposed to `n1-standard-1`s 128). I don't remember if 16 was the original amount for shared-core amount, because it seems like it would have had to have been lower for me to switch instance types to get more disks. Regardless, 16 seems like plenty for our current use case.
    - Decreased the initial node count of the node pool from 2 to 1, because somehow it was 1 in prod but 2 in config, so this change was just to sync them back up.
    
    Tech Debt:
    
    - N/A

commit f1c5364752d2a92e840f0f0d7e8a7dd1655d6b52
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Sep 9 22:01:20 2020 -0400

    UFC-249 Built the layout for the Summary step layout. (#93)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the layout for the fifth (and final) step of the Transactions Import process.
    - Fixed the mobile `ProgressStepper` to show the proper current step.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit 23a9a02cc4ce119fd45e8f32d9219dbf78d48ccd
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Sep 9 16:20:19 2020 -0400

    UFC-248 Built the Adjust Transactions step layout. (#92)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the layout for the fourth step of the Transactions Import process.
    
    Tech Debt:
    
    - Still lots more changes to make to the Transactions table/list to support the import process.
    - We should really make input format specific versions of the Input (e.g. DateInput, MoneyInput, etc).

commit 7e33a8d87d983e651645377041708eb5a18d5f49
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Sep 5 12:24:29 2020 -0400

    UFC-247 Built the Map CSV step layout. (#91)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the layout for the third step of the Transactions Import process.
    - Modified the `OverlineHeading`s normal size to be responsive and shrink at small screen sizes.
    - Renamed the `AutocompleteInput`s `enableToggleButton` to `showToggleButton` to make it more obvious what it was doing.
    - Modified the `LabelledInput` to remove the margin added by the label when there isn't a provided label.
    - Created a new `TabBarWithSections` component to encapsulate using a `TabBar` with.. sections. Had to remove the animations to get rid of the fixed height constraint, however.
    
    Tech Debt:
    
    - We removed the animations from the `TabBarWithSections` to remove the fixed height constraint, so maybe one day we'll have to revisit it to try and make the animations work again.

commit 134d28cdc196386165d3943c6118f514e2b7958e
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Sep 3 14:10:03 2020 -0400

    UFC-246 Built the Choose File step layout. (#90)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the layout for the second step of the Transactions Import process.
    - Moved the `StepNavigationFooter` from the individual steps and into the Transactions Import layout itself.
    
    Tech Debt:
    
    - N/A

commit 4751106252a6facbaabae8aab4b146e2a88a0d51
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Sep 2 23:11:45 2020 -0400

    UFC-245 Built the Choose Account step layout. (#89)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the layout for the first step of the Transactions Import process.
    
    Tech Debt:
    
    - N/A

commit 5afbf13f550dc807558694f7fe27d0dd98114788
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Aug 29 17:41:33 2020 -0400

    UFC-244 Built the Income/Expense chart for the Dashboard. (#88)
    
    Changelog:
    
    - [redesign] Users can now view a chart of their income/expenses over time on the Dashboard.
    
    Implementation Details:
    
    - Built the `IncomeExpenseChart` and had to modify some of the chart styles and `ChartService` to support it.
    - Removed the mixin for the chart card styles, since we rolled it into a single `ChartContainer` component.
    - Exported the positive/negative colors from the styles, for use with the `IncomeExpenseChart`.
    
    Tech Debt:
    
    - We're gonna wanna refactor more of the chart stuff... once we have more charts. I'm thinking specifically the axis formatters + width hook, since those are used between all of the charts (so far), but some other stuff like custom components for the axis and stuff like that. Again, for the future.
    - The Income/Expense chart is just kind of a mess, cause it seems like Victory bar charts are just kind of a mess to be begin with. The most glaring flaw right now is the uncentered tooltips when using the 'Weekly' date range, but overall there's just a lot of hackiness to get the stylings right in some cases.

commit 39c8cea7493d837135ea5a3bbcced12280d0cda9
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Aug 27 20:56:28 2020 -0400

    UFC-243 Built the Net Worth chart for the Dashboard. (#87)
    
    Changelog:
    
    - [redesign] Users can now view a chart of their net worth over time on the Dashboard.
    
    Implementation Details:
    
    - Built the `NetWorthChart` and refactored a bunch of layout/logic between the two charts.
    - Renamed some of the Chart types to be generic for date/amount charts, instead of specific for the `AccountBalanceChart`.
    - Fixed the calculation for the Account Summaries 'From' balances when using 'All Time'.
    - Fixed a minor text wrapping issue with the Amount Change in the Account Summaries.
    - Made some of the scene-level spacing more consistent between scenes.
    - Cleaned up some of the `AccountsListItem` connect that wasn't cleaned up in the last ticket.
    
    Tech Debt:
    
    - I keep alternating between named and default exports for component specific hooks... should _probably_ standardize on one type one day.

commit b1e2d2856310e35ec6103377bb1d98528acc6a86
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Aug 26 15:07:27 2020 -0400

    UFC-241 Fixed the keyboard navigation for the accounts list when filtering by type. (#86)
    
    * UFC-241 Fixed the keyboard navigation for the accounts list.
    
    * UFC-241 Fixed the AccountsList stories to be wrapped with the DateRangeProvider.

commit a51dcef3e2803dcf0e23ef7db81e5730c2213ed6
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Aug 25 16:56:25 2020 -0400

    UFC-240 Built the rest of the Account Details view. (#85)
    
    Changelog:
    
    - [redesign] Users can now view the details of their accounts.
    - [redesign] [fix] Users can once again sort the transactions table.
    - [redesign] [fix] Users will find that the Pagination switcher no longer displays above certain elements.
    - [redesign] [fix] Users will find that autofilling certain transactions will now work properly when trying to create them.
    - [redesign] [fix] Users will find that the Interest input in the New/Edit Account form can now be 3 decimal places, as opposed to 2. This was an oversight during the initial implementation.
    
    Implementation Details:
    
    - Finished fleshing out the Account Details scene with transactions and action buttons and being responsive across all screen sizes.
    - Modified the Transactions table/list to show running balances.
    - Modified the `TransactionTypeFilters` to be able to conditionally show only a certain subset of types.
    - Modified the `Button` atom to have a `secondary` variant, for secondary actions.
    - Modified the `AccountBalanceChart` to be slightly shorter, because it looked better. Also made it's x-axis labels rotate as the width gets smaller, so that they fit better on mobile.
    - Wrote some e2e tests to cover cases that were documented in previous tickets but were only doable now (e.g. editing an account's interest).
    - Changed the e2e test's desktop viewport to be 1366x768, so that the Accounts scene has enough width to handle the proper desktop layout (and because 1366x768 is a much more standard viewport size).
    
    Tech Debt:
    
    - Because we added 'duplicate' components to the Accounts scene (e.g. the header) so that they display at different layouts, we had to get funky with the tests by adding `:visible` to certain selectors to make sure it only uses the visible version. Yeah, this is gonna get messy as time goes on.
    - If we ever go to add another column to the Transactions table... it's a gonna be messy. It's just gonna be a combinatorial explosion of grid layouts. So... let's try _not_ to do that.

commit b24ea8d6dddea07ec04fdff32260a47d68d3c506
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Aug 19 17:03:53 2020 -0400

    UFC-242 Built the Account Balance chart. (#84)
    
    Changelog:
    
    - [redesign] Users can now view (on desktop) a chart of their accounts' balances.
    
    Implementation Details:
    
    - Built the `AccountBalanceChart` and all of the basic general tools for aggregating and formatting data for charts as well as styling them. At least, for this one chart.
    - Brought in Victory for charting.
    - Had to upgrade `react-scripts` to fix some vulnerabilities, but this then caused the app boot process to throw an error because Storybook has a separate version of wepback. So I just turned this 'preflight check' off.
    - Introduced 'Charts' as a new piece of the Storybook design system, separate from the atomic pieces.
    - Revamped (i.e. fixed) the entire Date system, by figuring out how to use UTC-only dates. This _should_ make the entire Date system consistent across all timezones. Or at least, _more_ consistent.
    - Moved the Account balance reducers into the model itself, so that they can be accessed publicly.
    - Added support in `ValueFormatting` to format money without decimals.
    - Minor type fix in the `CsvParser` as a result of upgrading `react-scripts`.
    - Some fixes to the primary cross slice selectors to handle race conditions in the e2e tests.
    - Fixed the 'load prod backup locally' script to kill all existing database connections first; needs it otherwise it sometimes won't load the backup.
    - Added React (TypeScript) files to StyleLint's ignore pattern, since VS Code was linting `style` props with StyleLint, and it wasn't working too great.
    
    Tech Debt:
    
    - OH BOY, there's a lot of stuff that'll probably need to be refactored going forward. It won't be until we've implemented a couple of charts that we'll need how to structure querying the data and formatting.

commit 96ac7be34936d766ca665fd2aa99cbdbca1948ca
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Aug 12 15:47:21 2020 -0400

    UFC-239 Built the Account type filters. (#83)
    
    Changelog:
    
    - [redesign] Users can now filter their accounts by type on the Accounts page.
    
    Implementation Details:
    
    - Created an `AccountTypeFilters` component that works very much in the same vein as `TransactionTypeFilters` for filtering accounts in the Accounts scene.
    - `AccountsList` no longer connects to get the accounts from the store; it now receives them the Accounts scene, which now handles the store connection.
    - Fixed the `TabBar`s underline to be perfectly centered.
    - Changed the media query from extra small to medium for when the Account/Transaction type filters changes the grid gap, so that there's more room for the filters at really small screens.
    
    Tech Debt:
    
    - I feel like we've fairly cemented ourselves into a corner with using both hooks and `connect` for accessing Redux state from React components. We're constantly mixing it up between components, scenes, and hooks. I fear this might lead to great confusion in the future. Considering our propensity for using hooks for everything, I'm sure we'll trend towards hooks over time, but I really do like that 'pure component' and 'connected component' separation that we get when using `connect` as a HOC.

commit 7df1cdf488538f69024eae9aa906b7cec66e875a
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Aug 11 12:17:41 2020 -0400

    UFC-238 Added date range filtering to the Accounts scene. (#82)
    
    Changelog:
    
    - [redesign] Users can now filter the balances of their accounts by date.
    
    Implementation Details:
    
    - Modified the Accounts scene to have a `DateRangePicker` so that the balances of the accounts are filtered by date.
    - Created a standard component for the scene header that includes the `DateRangePicker` so that it can be used across all of the scenes.
    - The above means the Transactions scene now has the `DateRangePicker` in the header, replacing what would have been an 'Add Transaction' button.
    - The `DateRangeProvider` has also been moved to the `AppRouter` so that all scenes share the same date state, which would seem to be a more consistent user experience.
    
    Tech Debt:
    
    - The ever increasing number of hooks that combine the date range state with a selector has me mildly concerned. I don't know if this is actually a problem (i.e. will it eventually become just a huge mess of what-does-what that'll require a large refactoring), but it's something to keep in mind.

commit cc8e05eb92cb70d06134abd927f2177f76d55370
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Aug 10 16:15:35 2020 -0400

    UFC-237 Built the Dashboard Account Summaries. (#81)
    
    Changelog:
    
    - [redesign] Users can now view a summary of their accounts on their dashboard.
    
    Implementation Details:
    
    - Built the Account Summaries for the Dashboard scene.
    - Renamed what was formerly the 'Home' scene to the 'Dashboard' scene.
    - Fixed some of the text in the `TransactionTypeOption`s being bold when it shouldn't have been.
    - Fixed the type labels in the options of `TransactionTypeFilters` to be plural, to match the plural Account types in the Account Summaries.
    - Removed some now unused Account selectors.
    - Added new `changeViewport` and `selectDateRange` Cypress commands.
    
    Tech Debt:
    
    - Now that we've started introducing the date range selectors for things like account balances and transaction amounts, a lot of the existing chart selectors are gonna have to be completely rewritten (obviously). But there's also some date finagling methods (like Account's `calculateMonthlyBalance`) that can also disappear. Will deal with it when we get to actually building charts.
    - The whole process for calculating the account summaries is currently very non-optimal. However, it seems to be fast _enough_ that I'm gonna worry about it till it becomes a problem. Only then should we consider implementing the Account Balances Date Index.

commit c0377459025ebe851bf2cca36b7e702ad1804a9b
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Aug 7 22:07:23 2020 -0400

    UFC-236 Built the Transaction Type filters. (#80)
    
    Changelog:
    
    - [redesign] Users can now filter their transactions by type.
    
    Implementation Details:
    
    - Built the `TransactionTypeFilters` and corresponding Context hook for enabling type filtering in the Transaction scene.
    - Re-defined the notion of the `useFilteredTransactions` pipeline, since all my assumptions were proven wrong. Now it's a much more separate collection of hooks.
    - Brought in `re-reselect` for some better selector caching (particularly with the selectors that take in dates).
    - Introduced the '50' interval of the sass size scale, for 2px.
    
    Tech Debt:
    
    - Well, we've had to change up how transactions get filtered once already, so it's probably gonna change again in the future. Something to keep an eye on.

commit f0dfde049f75dcb5086e2d41bf1dd9bc1e742ae2
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Aug 4 23:39:18 2020 -0400

    UFC-234 Built and integrated the Date Range Picker into the Transactions scene. (#79)
    
    Changelog:
    
    - [redesign] Users can now filter their transactions by date ranges. Transactions are now filtered by the current month, by default.
    - [redesign] Users will now find that date inputs open automatically upon first clicking them.
    
    Implementation Details:
    
    - Built the `DateRangePicker` that uses the date range hooks/index that we previously created to create a complete date filtering experience for the Transactions scene.
    - Had to hack the `date` inputs (at least, in Chrome) to open the date picker when clicking into them.
    - Fixed the `SidebarTransactionForm` so that it, upon closing, doesn't navigate back to the first page of transactions in the Transactions scene. Did this by including the hash as part of the 'modal compatible current route'.
    - Improved `usePagination` so that the dispatch functions aren't re-created whenever any piece of the state changes.
    - Added some more spacing around the `EmptyTransactionsArea` in the Transactions scene just to give it more breathing room.
    - Fixed the `useIsLargeWidth` hook to work with the fact that the `TransactionsTable` could render without any transactions to start, but then gain transactions. Now it always properly adjusts the width.
    - Put together a script for loading a production backup into the local database for testing purposes.
    
    Tech Debt:
    
    - I guess just the ever-growing complexity/functionality of the pipeline that produces the transactions for the Transactions scene? We keep adding on filters and whatnot, but I think, because of the way it has been designed, it will keep scaling for a while. Just not forever.
    - Oh man, the `CustomFormatDateInput` is just a disaster waiting to happen. Between the fact that (MacOS) Safari doesn't even yet support the date input, to the very construction of the component itself (the layering), I'm _sure_ it's just completely broken on some systems. But, not much I can/want to do about that right now.
    - I would just like to re-iterate the mess that the `DateService` is starting to become. That is all.

commit f79f6a5298d0d05e56afc8e0a58cbab9e68dab93
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Aug 1 21:19:48 2020 -0400

    UFC-233 Built the useDateRange hook. (#78)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the `useDateRange` hook that will enable custom date ranges for page-level components.
    - Wrote a whole bunch of new date methods to handle all of the date changing business logic. Along with a _ton_ of tests, since getting these right is so important.
    
    Tech Debt:
    
    - I can just feel all these custom date manipulation methods coming back to bite me... Maybe one day we'll just pick a separate library for handling dates.

commit 69d9b9f45314c6cf4df982a6ac4b0ffc3d1fdfe0
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jul 30 22:08:41 2020 -0400

    UFC-232 Built the transactionsDateIndex slice. (#77)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Created the `transactionsDateIndex` slice for indexing all transactions by date.
    - Upgraded Cypress to the latest 4.11.0 version to fix security vulnerabilities (along with upgrading some other packages).
    
    Tech Debt:
    
    - Now that we've established that `DateIndex` can be a `structure`, maybe we should eventually refactor the bigram indices used for the description `transactionsIndex`? Probably a good idea to separate that those out as separate data structures.

commit 6fc09682a36f0506d3af86736dc788cda73d9f30
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jul 30 14:37:49 2020 -0400

    UFC-235 Fixed useLongPress so that clicking a TransactionsListItem on mobile doesn't cause the Edit Transaction form to immediately close. (#76)
    
    Changelog:
    
    - [redesign] Users can now edit transactions on mobile by clicking on the list items and have the edit form stay open (i.e. not close immediately).
    
    Implementation Details:
    
    - Fixed the bug with `onLongPress` where the touch events where interacting unfavorably with the mouse events, causing the Sidebar to close immediately.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit 3732b30f84c52efd2e9ea6d3c203bf6cae94cb35
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Jul 27 22:50:34 2020 -0400

    UFC-230 Enabled deletion of transactions. (#75)
    
    Changelog:
    
    - [redesign] Users can now delete transactions.
    
    Implementation Details:
    
    - Hooked up transaction deletion on the Transactions list items/table rows.
    - Added a bit of spacing between the toast message and Undo action of the Undo Toast so that can't overlap.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit 51db36ed76a6e0faca6500676dde52f2e6820ef8
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Jul 27 22:11:56 2020 -0400

    UFC-231 Fixed Account balances being displayed (very) incorrectly. (#74)
    
    Changelog:
    
    - [redesign] Users will find that their account balances are once again accurate.
    
    Implementation Details:
    
    - Enabled a Postgres option to parse BIGINT back to regular integers, so that the backend now correctly returns numbers instead of strings for amounts.
    - Decreased the max allowed number for input validation, to give us even more room for never hitting the max INT in JavaScript.
    - Added model level validation for amounts to ensure they can't get above the max allowed number.
    - Modified the constructors of the Account and Transaction models to parse strings into integers for amounts, so that even if the backend starts sending strings again, it doesn't colossally mess up again.
    
    Tech Debt:
    
    - Just the reminder that the `ImportableTransaction` model is hacking it's way with purposefully (yet incorrectly) storing strings on the `amount` field, because that's how the original Import process was designed. Will need to deal with it when we go to reimplement the Import process.

commit d314d47c7c299d9c1749100b5f234b25b5536c1b
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Jul 27 20:43:01 2020 -0400

    UFC-229 Modified the Transaction Form for editing transactions. (#73)
    
    Changelog:
    
    - [redesign] Users can now edit transactions.
    
    Implementation Details:
    
    - The `TransactionForm` can now pull IDs from the URL to edit a transaction.
    - That's really about it. There was also some minor refactoring/code moving in the `AccountForm` (and its tests) to match the `TransactionForm`, but nothing else noteworthy.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit 2ef0140bc4b0fff3ee4c96a6b1c6cdfa8127a7fd
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jul 26 23:04:49 2020 -0400

    UFC-228 Fixed the database to use BIGINT over INT for monetary amounts. (#72)
    
    Changelog:
    
    - [redesign] Users can now specify ungodly large numbers for transaction amounts and account balances.
    
    Implementation Details:
    
    - Created a new database migration for changing the Transaction's `amount` and the Account's `interest` and `opening balance` columns to BIGINT (from INTEGER).
    - Updated the model schemas to reflect this change.
    - Updated the form validation to validate inputs against maximum numbers.
    - Created a new `values` file for the input validation amounts.
    - Fixed a minor error where a `useEffect` hook was being used incorrectly in `AppRouter`.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit 02ffbbcb6352ac78cdecb76746850214e854441d
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jul 26 17:07:05 2020 -0400

    UFC-225 Built the Transaction creation form. (#71)
    
    Changelog:
    
    - [redesign] Users can now create transactions.
    - [redesgin] Users can now create transactions from the 'Add Transaction' button that appears when the Transactions list/table is empty.
    - [redesign] Users can now use `CTRL+Enter` when submitting the Transaction or Account forms to 'Make Another'.
    - [redesign] Users will now find that the search results of the Transaction form's Description input are more accurate.
    
    Implementation Details:
    
    - Created the `SidebarTransactionsForm` scene so that users can create transactions.
    - Enabled the `Add Transaction` button when the Transactions list/table are empty.
    - Brought in the `downshift` package for use with the `AutocompleteInput`.
    - Developped a completely new system for handling search results. Now it's handled by a Context hook, so that we can have independent search results without having to create more slices/pieces of store state for each one. This also means that the Redux based `searchResults` slice/sagas have been completely removed.
    - Added a submission level error message to the `AccountForm`, to match the one for the `TransactionForm`.
    - Added `CTRL+Enter` as a shortcut to the `AccountForm`, to `Add & Make Another`, again to match the `TransactionForm`.
    - Refactored/moved around a bunch of the `AccountForm` code, again to somewhat match the `TransactionForm`.
    - Modified the `AppRouter` so that its scrolling gets disabled when a modal (form) is open.
    - Added an optional icon/button to the right side of the `Input`, so that we can have a down chevron for opening the `AutocompleteInput`.
    - Modified the `Sidebar` to have the `CSSTransition` so that we wouldn't have to put the transition in the `AppRouter`.
    - Added a 'light shade' option to the `TransactionTypeIcon`, for displaying the icons on a dark background.
    - Added a cursor to the label of the `LabelledInput`, so that users would know that it's clickable.
    - Improved the `TabBar` with more accessibility options for when the `TabBar` is actually controlling a bunch of sections (ala the `TransactionDateOptions`).
    - Created a secondary `z-index` scale for the inputs, so that we can layer the autocomplete autosuggestions correctly.
    - Added new methods to the `DateService` for handling dates in the format of the 'date input' (i.e. an input with type='date').
    - Improved the `SearchService`s search algorithm to tighten it up so that unknown words would cause queries to return nothing. Whereas before, they still returned results for any other words that matched, which I found to just be too 'fuzzy'; I prefer the tightened up algorithm.
    - Added toast failure handlers to all of the offline request slice 'commit' stages, since somehow it completely slipped my mind to ever do that before! Now users should get error toast messages when the `commit` stage fails (which theoretically shouldn't happen, but we all know how that plays out in practice).
    - Created some new story utilities for shared mock data, hooks for redux, and more.
    - Created a test utility for rendering hooks with a Redux store, so that we can test hooks that need the store.
    - Fixed the Backend seed data to have the correct ordering of the credit/debit accounts.. cause we never did that forever ago.
    
    Tech Debt:
    
    - The height of the `TransactionDateOptions` molecule will need to be adjusted once we have recurring transactions.
    - There's a minor quirk with the `AutocompleteInput` whereby the `Home` and `End` keys don't move the cursor in the input, but move the selection in the suggestions. I think this might be unique to our implementation of Downshift, since other Downshift examples don't have this 'problem' (there are certain states where they _can_ use home/end to move the cursor, primarily when the suggestions aren't open, I believe). Somebody might complain about this, in the future, so it's worth noting.
    - As usual, there's the disclaimer of "z-index sucks" now that we're managing multiple `z-index` scales. Definitely something to keep an eye on and make sure doesn't get out of hand.
    - I've slowly been settling on how I want to organize my component files. Currently, I've recently switched to going "imports -> primary interface -> primary component -> other interfaces and components -> helper functions", which isn't how most of the existing files do it (they would have other components/functions at the top of the file). So this is something to keep in mind going forward, and whenever we revisit an existing file that doesn't conform to this format.

commit a67a91f5d0ea3b76f79a7fc70610ea98c513129b
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Jul 20 13:27:14 2020 -0400

    UFC-227 Increased the width of the date column to fit the longest dates. (#70)
    
    Changelog:
    
    - [redesign] Users will now find that the all dates fit into one line in the Transactions table.
    
    Implementation Details:
    
    - Increased the minimum width of the date column in the Transactions table.
    
    Tech Debt:
    
    - N/A

commit 3368ddf52fd3b6782383d3af955f9aa1578f5598
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jul 16 23:01:24 2020 -0400

    UFC-224 Created the desktop Transactions table. (#69)
    
    Changelog:
    
    - [redesign] Users can now view their transactions in a table on desktop.
    
    Implementation Details:
    
    - Built the `TransactionsTable` that is used for desktop.
    - Refactored all of the styles that get parsed in JS into a utility so that they only have to be parsed once.
    - Created the `transactions-type-colors` mixin for creating all of the Transaction type classes needed to color something based on its type.
    - Created one `EmptyTransactionsArea` that is shared between the `TransactionsList` and the `TransactionsTable`.
    - Modified `useKeyboardNavigation` to optionally disable certain keys.
    - Modified `useOnWindowResize` to optionally specify debounce or throttle for the resize event.
    - Optimized the `TransactionsList` to memoize the rows based on ID as a performance optimization; did the same for the `TransactionsTable`.
    - Fixed the `PaginationSwitcher` so that it's contents are centered vertically (it was just _barely_ noticeable).
    
    Tech Debt:
    
    - It seems like imports from any file in `services/` to any other file, using absolute imports (e.g. `import {Transactions} from "models/"), is just failing to work; the imported value is always undefined. But imports to packages seems to be fine. It's literally just files in `services/` that can't import anything else. I have no idea why. It can be worked around by importing directly from the file (e.g. `import Transactions from "models/Transactions").
    - This whole manual 'list animation' thing, while it works, seems like it's kinda getting unwieldy. I don't know if the interface for it just meh, or if the idea of manually animating all the lists is meh. Either way, there's an off feeling about it that should be kept an eye on.
    - We created a molecule for the `EmptyTransactionsArea`, but not one for the empty Accounts area. If the Accounts one ever gets used multiple times, we should definitely refactor it out to match.

commit 49889e529d437f036bcddddd93c6a2b7c7d19c17
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jul 9 22:59:11 2020 -0400

    UFC-226 Enabled adding an account from the empty Accounts list. (#68)
    
    Changelog:
    
    - [redesign] Users can now add an account when their accounts list is empty.
    
    Implementation Details:
    
    - Enabled the `Add Account` button in the empty `AccountsList`.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit 405278fbf6238ff83ed380a4cc93a537ef903c43
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jul 9 21:35:28 2020 -0400

    UFC-223 Created the mobile Transactions list. (#67)
    
    Changelog:
    
    - [redesign] Users can now view their transactions on mobile.
    
    Implementation Details:
    
    - Built the `TransactionsList` that is used for mobile.
    - Created a system for modular, scoped pagination that is currently being used for the `TransactionsList`.
    - Created custom `Cents` and `Millipercents` types to make it more explicit that some numbers are expected to be of a certain format.
    - Added `React.forwardRef` to the `ListItem` molecule because I thought I was gonna need it (for `CSSTransition`) but ended up not needing it, but figured there was no harm in leaving it.
    - Fixed the `Dropdown` to have a z-index of 1 so that it's correctly above certain other elements.
    - Shortened the delay in the list animation, because it looked better that way (in general) and so that switching pages of transactions wouldn't have a massively noticeable delay when scrolled all the way to the bottom.
    - Also for the list animation, realized that we were trying to modify the animation duration based on the index, but it wasn't actually doing anything, so the calculations have been simplified.
    - Extracted `useKeyboardNavigation` as a top-level hook.
    - Created a new `MathUtils` service with some basic utilities that were needed for the pagination.
    - Finally brought in the `react-testing-library` package (+ the one for hooks) so that we can test hooks (in this case, `usePagination`).
    - Added a hack to Cypress so that the `before` block in `support` actually only runs once.
    
    Tech Debt:
    
    - Now that we've broken the ice and written tests for a hook, I'm sure there are some other hooks that could benefit from some testing. Perhaps `useFilteredTransactions`, once we add more filters?
    - Yeah, that Cypress hack thing above? https://github.com/Microsoft/vscode/issues/15814, keep an eye on it.
    - Now that we're coloring things according to Transaction type, if we keep doing it a bunch, we should probably bring over those utilities from the old Frontend.

commit bbdd05b83e72a8968f0d32b4592e34ee0eff76a6
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Jul 6 14:45:54 2020 -0400

    UFC-222 Upgraded to react-hook-form v6. (#66)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Upgraded `react-hook-form` to v6.
    - Migrated all existing code to work with v6.
    
    Tech Debt:
    
    - Will want to wait and see if `react-hook-form` returns to exporting types at the top-level, so that we don't have to dig into `dist` to find the right types.

commit a8b2dd7d1545ead7a8bd22236616b0065643b8ad
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Jul 3 14:27:37 2020 -0400

    UFC-221 Enabled deletion of accounts. (#65)
    
    Changelog:
    
    - [redesign] Users can now delete accounts.
    
    Implementation Details:
    
    - Hooked up account deletion on the Accounts List items.
    - Created all of the toasts and modal dialogs that we need to support account deletion, as well as everything we have planned for the near future.
    - Modified the Toasts messaging system to support the new toasts: now they can have optional titles and all of the actions have standardized names.
    - As an improvement to the old toast system, the timeout is now represented visually with a `CircularCountdown`. As such, the timeout mechanism has been moved from the sagas to the Toast components. This also enables us to do things like start/stop the countdown when users hover over the toasts.
    - Modified the `BackgroundBlur` to have its visibility controlled by both routes and modal dialog visibility states (i.e. store state).
    - Added a `negative` variant to `ShadowButton` for use in the `AccountDeletionDialog`.
    - Fixed the `LinkButton` to not use `!important` for resetting its the `background-color`. This way we can actually change the background color in later uses.
    - Modified the `IconButton`s default colors (icon and hover) to work better on a white (instead of a neutral) background because more icon buttons were being used on white rather than neutral background; had to adjust the `ListItem`s actions' colors to correct for this (since it is one of the few uses of a icon buttons on a neutral background).
    - Also modified the `IconButton` to have negative margins to balance out the padding, so that later uses don't have to apply the negative margin themselves to lay them out nicely.
    - Changed the `medium` media breakpoint to be 500px so that the `navigation-change` breakpoint is exclusively 800px. This way, the `medium` breakpoint actually has some uses, instead of just being a less semantic `navigation-change` breakpoint.
    - Modified `useStopPropagationCallback` to accept potentially undefined callbacks, to make error handling a bit easier.
    - Removed Firefox's default button outline as part of our custom outline (cause somehow we forgot about that, and of course it's different from the default).
    - Added a reset DB command to run before every test, just to get the database into an expected state.
    
    Tech Debt:
    
    - We only created a `ConfirmationDialog` molecule, but we don't yet have a base `ModalDialog` component. Once we need more dialogs than for just confirmation, that'll be the time to refactor one out.
    - The timing logic for `CircularCountdown` is kinda pretty hacky (the 1 second interval meaning that starts/stops are 'instantaneous', the forceful use of a no-deps `useEffect`, etc). But it works. For now. I'm sure we'll have to address it sometime in the future, but not today.
    - Now that we've moved the `CSSTransition` for the `BackgroundBlur` from `AppRouter` _into_ `BackgroundBlur`, we should probably do the same for `Sidebar`. However, I'll save that for when next have to deal with the `Sidebar`, which should be for transaction creation.
    - We'll probably want to change the `ToastMessages` scene so that it only passes IDs to the toasts and have the toasts connected to the store. This the toasts can be better memoized and we can remove the hacky `@ts-ignore`s we had to throw down to type some of the mapping code 'correctly'.
    - The fact that we keep having to import and convert the values from `styles` (e.g. `animationTime`) is starting to drive me crazy. Next time we have to deal with `styles` values, they should all be extracted and converted in a separate module, to act as an interface.
    - Will need to modify usages of `ErrorToastData` to have better titles than just 'Error'.
    - A note for the future: once we have transaction viewing implemented, we'll need to modify the Account Deletion e2e tests to check that the transactions are gone as well.

commit af770e35a2c499a6b0d991de3b0e898fffdb37b6
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Jun 27 20:16:46 2020 -0400

    UFC-220 Modified the Account Form for editing accounts. (#64)
    
    Changelog:
    
    - [redesign] Users can now edit accounts.
    
    Implementation Details:
    
    - The `AccountForm` can now pull IDs from the URL to edit an account.
    - Additionally, when the URL has an invalid URL, the user is shown a message to redirect them to the New Account form.
    - Modified the `SidebarAccountForm` scene to navigate back to the 'previous location', instead of actually navigating back in the history. This fixes cases where the user might navigate to several IDs for editing accounts, but they expect to return to the 'previous location' (the page under the `BackgroundBlur`) when closing the form.
    - Fixed the `Account` scene's redirection logic to account for an undefined account; now it doesn't try and redirect to `/accounts/undefined`.
    - Fixed the `ListItem`s to have explicit `onKeyDown` handlers, because they weren't working before (needed to stop propagation like `onClick`).
    - Changed the `ListItem`s custom outline to the always available version, so that users get the feedback that they're focused into the `AccountsList` when exiting from the `AccountForm`.
    - Added an 80 character length limit to the `AccountForm`s Name input, just as a first line of defense against excessive text.
    - Adjusted the `AccountForm`s padding to better match that of the mobile scenes (i.e. more vertical padding).
    
    Tech Debt:
    
    - Now that we've added length validation to the Account's name input, we'll want to validate it at the model level (both on the `Frontend` and `Backend`), but I'll save that for a later time.

commit ed7e202da4288872fefc6ee807da75ca3ca6ae21
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Jun 26 16:43:56 2020 -0400

    UFC-219 Enabled keyboard navigation for the Accounts List. (#63)
    
    Changelog:
    
    - [redesign] Users can now navigate the Accounts List using the keyboard.
    
    Implementation Details:
    
    - Added full keyboard navigation to the `AccountsListItem` (home/end/arrow keys + Vimium).
    - Made the desktop (single layer) `ListItem` only allow the active item to be focusable, in line with the keyboard navigation of things like the `RadioGroup`.
    - Disabled the transitions on the outline of the `ListItem`, since users can now switch between them a lot faster and it looks better without an afterimage.
    - Created a mixin for disabling the custom outline's transitions, so that we don't have to keep commenting what the `&::after` is.
    
    Tech Debt:
    
    - Might want to eventually make the `useKeyboardNavigation` hook a top-level hook if we need it again; we're already more-or-less duplicating the switch from `useOptionsKeyboardControl`.

commit 320262af2700cba5fce822eea66b9b250ef2e0ee
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jun 25 21:38:32 2020 -0400

    UFC-214 Built the Account creation form. (#62)
    
    Changelog:
    
    - [redesign] Users can now create accounts.
    
    Implementation Details:
    
    - Created the `SidebarAccountForm` scene so that users can create accounts.
    - Created the `GlobalAddButton` so that users can create accounts/transactions from the `AppNavigation`.
    - Adopted a different methodology for showing the forms: they now use dedicated URLs instead of store flags. This means that we do some hacking to get multiple different routes to render at the same time.
    - Brought in `react-transition-group` to create transitions for the `SidebarAccountForm` and the `BackgroundBlur`.
    - Collapsed the `/accounts` and `/accounts/:id` react-router `Routes` into one `Route`, using an array.
    - Added some `will-change` optimizations to certain animations (e.g. the Accounts list) to improve performance.
    - Added `top-center` as an option for the `Dropdown`s alignment.
    - Added dollar/percentage symbol prefixes to the `Input`.
    - Modified `useEscapeKeyCloseable` and `useOutsideCloseable` to support arbitrary `onClose` functions, so that it's not just dependent on a state set function.
    - Abstracted out the keyboard navigation logic from the `TabBar` for use in the `RadioGroup`.
    - Removed the transition on the outline of the `Input`, to start the theme of using few/no transitions on user inputs for a (IMO) better UX.
    - Fixed `isAuthenticated` to go back to just checking the expiry date for validity. This way we're not constantly pinging the `Backend` for new tokens and the app can actually work offline. Had to bring the `jsonwebtoken` package back in to do this.
    - Tried to fix the flaky Sign Up e2e tests by changing the authentication redirection logic to not include the Sign Up page.
    - Refactored the selectors in the Cypress tests to be more shareable.
    
    Tech Debt:
    
    - Directly using `localStorage` for the previous `match` object persistence is a form of tech debt, since it bypasses the Redux store. But since it's a relatively small (and web specific) piece of the puzzle, I think we can get away with leaving it as is for now.
    - Now that `AppRouter` is starting to actually have some logic in it, we want to be careful that it doesn't get too unwieldy. As we add more modal routes though, I'm sure it will, and then it'll need a good refactoring.
    - Still need to remove the rest of the `forms` slice (and `modals` slice); will do it progressively as the rest of the forms are completed.
    - Quickly tried to setup transitions on the main App routes, but ran into some issues and gave it up for a later time, so... that.

commit f0e3b7f0180f05d67a5d91c5b9d1d677e63cbcd0
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Jun 19 20:06:04 2020 -0400

    UFC-218 Adjusted the desktop Accounts List so that the items are more compact vertically but larger horizontally. (#60)
    
    Changelog:
    
    - [redesign] Users will find that the desktop Accounts list can now fit more item vertically while showing more name text horizontally.
    
    Implementation Details:
    
    - N/A
    
    Tech Debt:
    
    - N/A

commit 29d82716c8de390ad9e7eb0654341c23fd69de06
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Jun 19 15:59:37 2020 -0400

    UFC-215 Built the basic Accounts list. (#59)
    
    Changelog:
    
    - [redesign] Users can now view a list of their accounts.
    
    Implementation Details:
    
    - Fleshed out the `Accounts` scene with the new Accounts List.
    - Modified `Button` to derive its accessible label from both `aria-label` and `title`.
    - Fixed up how the 'default' (i.e. storybook) width works on the `Button` -- it is now a max-width that can be unset.
    - Modified `TextField` to derive an accessible label like `Button` (in case text needs to be cutoff visually).
    - Fixed the `TabBar` to correctly compute the underline styles when switching from mobile to desktop.
    - Fixed the mobile `AppNavigation` to have a positive `z-index` so as to sit above content.
    - Fixed the `AppNavigation` to account for the Account Details route (`/accounts/:id`) when highlighting the active nav item.
    - Came up with a new abstraction for styling 'non-sticky' interactions in Sass; applied it to every component as relevant.
    - Changed the custom outline mixins to automatically remove the default outline.
    - Finally added a `line-height` scale.
    - Came up with a utility (`storyUsingRedux`) for enabling stories to use `react-redux` hooks directly.
    - Re-enabled the connectivity check saga, cause I forgot that it also handled triggering the queue processor altogether...
    - Added some new Cypress commands for handling headless sign up, as well as for changing the viewport.
    - Enabled the Cypress tests to get access to the `Backend`'s seed data.
    - Came up with the (hopefully) final solution to setting the App's background color throughout the entire background.
    - Disabled some StyleLint rules that got in the way (`no-vendor-prefix` for properties and values).
    
    Tech Debt:
    
    - I feel like I'm going to regret the single vs double layer naming thing for the `AccountsList`. It might just be better to use the semantic "mobile/desktop" meanings as opposed to the styled meanings...
    - I feel like it's going to get quite confusing keeping track of which components are connected, at which levels, etc, such that figuring out how a component is getting data might get confusing. I think a potential solution to this can be made at the documentation level of the stories, whereby we start separating out connected components from those that aren't. This way, we'd at least be able to just browse the stories to figure out what's what. Also, adding subcomponents to the story's docs page might also help.

commit efa5ac1edfaa20f8cfff10a6eca3c01ed3400e8f
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Jun 13 20:40:45 2020 -0400

    UFC-216 Built out the navigation part of the App Navigation. (#58)
    
    Changelog:
    
    - [redesign] Users can now navigate between the different (empty) pages of the app.
    
    Implementation Details:
    
    - Added nav items to the App Navigation, to go to the main pages; built out the mobile version of the App Navigation.
    - Like the enhanced keyboard navigation, we now have enhanced touch support, because sometimes Chrome just doesn't like a media query (hover: hover, to be exact).
    - Made some improvements to the mixins for handling keyboard navigation/touch support: they now use the Sass `@at-root` directive so that the mixins can be nested in other styles.
    - Disabled the webkit tap color for all the Buttons and Links.
    - Improved the hover/focus/active states of all interactive elements (primarily Buttons) to not have a 'sticky' focus state on mobile.
    - Setup the AppRouter with proper responsive padding.
    
    - Upped ESLint's max prop per line, because there was one line that wasn't long enough to be broken down by Prettier, but had 4 props instead of 3.
    - Disabled some Stylelint rules that were conflicting with Prettier.
    - Setup boilerplate scenes for all of the main routes.
    
    Tech Debt:
    
    - I feel like some of the CSS (particularly around hover/focus/active states) is starting to become a mess. Don't enable this by default, but do with keyboard navigation, but don't with touch support, etc. Making it all a seamless UX is certainly gonna cost us some spaghetti CSS over time.

commit 431cb5021895493ed660f3778dc3bd1936d9a5ef
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Jun 10 20:37:54 2020 -0400

    UFC-213 Built the logout functionality. (#57)
    
    Changelog:
    
    - [redesign] Users can now logout.
    
    Implementation Details:
    
    - Built the base of the AppHeader with the UserDropdown to enable users to logout.
    - Decided to bring in a package for handling the functional/accessible aspects of the Dropdown atom.
    - Shrunk the amount inherent padding that the full size logo SVG had so that it now sits flush in layouts.
    - Added `position: relative` to the `keyboard-navigation-outline` mixin so that components wouldn't have to declare it themselves.
    - Changed the app level config to consider `undefined` environment variables the same as defaults.
    - Disabled the Offline Request Manager's connectivity check saga in development because it was getting annoying seeing the pings everywhere.
    - Configured Storybook to work with Redux and Connected React Router.
    - Added a top level Make command for running the cypress tests.
    
    Tech Debt:
    
    - I fear that allowing connected components in the atom/molecule/organism tiers of the design system (particularly the lower ones) might be a hindrance in the future in terms of usability. However, I think the alternative (for example, having a separate hierarchy/system for connected components) would be far too heavy a solution right now. As such, since we can export pure versions of each component, I think it'll be fine for now and the foreseeable future.

commit b8e9e8294327aeeb7e4194b7e8db89fc2f27eb75
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Jun 8 20:13:23 2020 -0400

    UFC-212 Wrote E2E tests for the current Authentication use cases. (#56)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Installed cypress as a dev dependeny and had to move every other 'dev' dependency into regular dependencies, so that we could prevent cypress from being installed in the Docker image during the build pipeline; the binary is several hundred megabytes, so it takes a while to download.
    - Configured cypress with TypeScript.
    - Wrote e2e tests to cover everything related to authentication so far (login, sign up, etc).
    - Added a top level Make command for opening the Cypress runner.
    - Wrote a script for resetting the local dev database (while it's running, without having to do `make down`) so that cypress can reset it adhoc.
    - Fixed the `Backend` `lib` folder to be volume for docker-compose so that it isn't removed by the general `backend` folder volume.
    - Modified `Redesign`s prettier and lint commands to also run on the cypress test files.
    - Removed the `AccountsTableSelectors` from the `screenUrls` file, since they weren't needed yet, but more importantly, because _they aren't urls_.
    
    Tech Debt:
    
    - Will want to eventually integrate the Cypress tests into the CI pipeline, but for now I'm content just running them manually; sure is a step up above testing manually!
            - The reason I'm holding off on doing this is because it seems like it'll be quite troublesome to setup, what with having to figure out to get all of the docker-compose services running smoothly in Cloud Build, on top of figuring out a sane caching solution for the cypress binary. Ugh.

commit ec9131cc1775e40c55e901a58bae5725e0f210b3
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jun 7 19:55:19 2020 -0400

    UFC-210 Built the Authentication forms. (#55)
    
    Changelog:
    
    - [redesign] Users can now see a landing page with links to login and sign up.
    - [redesign] Users can now login and sign up.
    
    Implementation Details:
    
    - Setup the main App component like the Frontend.
    - Brought over the Landing scene and modified to use our new design system.
    - Built the basis of the new design system with atoms, molecules, and organisms necessary to build the Authentication scene.
    - Setup a system for enabling keyboard-only focus styles.
    
    - Figured out how to export Sass variables for use in JS code.
    - Made a decision that component stylesheets should only have to import one Sass partial. So now there's a `_shared.scss` partial with imports for everything a component could need.
    - Changed all `svg` elements to be block display instead of inline, so that they display how we expect them to.
    - Setup the base media queries for the app.
    
    - Fixed the typings of the ScreenUrls to get proper intellisense.
    - Setup the backgrounds and viewports for Storybook.
    
    - Brought in/upgraded several packages:
            - Upgraded redesign's Feathers client, cause that was forgotten in UFC-172.
            - Type packages for `classnames`, `react-redux`, and `react-router-dom`, among others.
            - `react-hook-form` for form management.
            - `story-description-loader` so that Storybook can get story descriptions from JSDoc comments.
            - `storybook-react-router so that Storybook can load components that use `react-router` components.
    
    - Fixed the `lint:styles` command to actually work (it needed quotes around the glob).
    - Added the `assets` and `styles` folders to the ESLint import regex.
    - Adjusted StyleLint rules to fit my preferences (disabled max nesting debth, increased max compound selectors).
    
    - Fixed the problem with the Frontend/Redesign docker container taking forever to stop from docker-compose.
    - Fixed the problem of the Redesign docker container taking forever to copy files. Forgot the dockerignore file...
    
    
    Tech Debt:
    
    - Honestly, there isn't any specific debt that I can think that we've taken on here (beyond the natural debt accrued from adding code). If anything, we've reduced some debt what with the Docker improvements.
    - The only minor thing I can think of is that we'll probably have to further structure the hierarchy of components in the design system beyond just atoms/molecules/organisms. I'm thinking domain level structuring eventually (e.g. 'Auth'). But for now, keeping things flat is fine.
    - Might want to combine all of the individual styles TypeScript declaration files into one file if there gets to be enough them, but that's really minor.
    - Of course, there's also the fact that we're not yet doing component level unit testing (or app level integration testing). But that's just a given at this point. I think writing comprehensive stories somewhat makes up for it.

commit 9f2af0292cd13e8eda088ee3ed3e3ebeedea6a1c
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jun 7 15:59:18 2020 -0400

    UFC-211 Fixed the auth form errors being eaten by toasts and the infinite loading spinner when failing to authenticate (#54)
    
    Changelog:
    
    - When users try and fail to login, they will no longer face an infinite loading spinner. Instead, they'll receive an error message.
    - When users try and fail to login, they will no longer receive an error toast with the error message. Instead, the error message will be in the form itself.
    
    Implementation Details:
    
    - It seems, as part of the Feathers v4 upgrade or my sheer negligence, that the Feathers errors had functions in them that would cause Immer to error when trying to process them. As a result, the property with the functions is stripped out before Immer can process it.
    - Additionally, it seems like when we setup the 'all unauthenticated requests catcher' to show the 'Please authenticate' toast, we forgot to filter out login/sign up actions. So now they'll get their custom error messages as they should have been.
    
    Tech Debt:
    
    - N/A

commit 33bc404ca57fa1bad8ea1a52532b42b2a52aefbe
Author: Devin Sit <devin@devinsit.com>
Date:   Sun May 31 19:52:33 2020 -0400

    UFC-175 Setup the initial design system styles. (#53)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Setup the design system styles with scales for colors, sizes, font weights, etc.
    - Brought in the font stack (Nunito) that we'll be using.
    - Setup Storybook with the CSS reset and global styles.
    - Removed the Storybook `console` addon because it was causing the "Why is there no addons channel?" error on boot. Seemed to actually be a version mismatch issue, but since the addon was the least important, it was just removed.
    - Made sure the rest of the Storybook addons were all pinned to the same version to try and prevent this issue occurring again.
    - Changed some of the StyleLint rules to fit my preferences.
    - Removed a bunch of the default CRA layout/styles.
    
    Tech Debt:
    
    - Might want to think about optimizing how the fonts are served in the future, since we now have 6 font files ((woff + woff2) * 3 weights) to deal with.

commit 30feef363c60cf58aea14aab4712b38a2b1749ea
Author: Devin Sit <devin@devinsit.com>
Date:   Sat May 30 22:01:08 2020 -0400

    UFC-176 Renamed the 'account1/2' fields on the Transaction table/model to 'debit/creditAccount'. (#52)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Renamed the `account1` and `account2` fields to `creditAccount` and `debitAccount` everywhere in the codebase.
    - Created a migration to rename the database columns and swap certain account ID values in the Transactions table, because of the new semantics of the debit/credit system.
    - Updated `determineAccountFlow` and `determineAccountTypes` to work with the new semantics of the debit/credit system.
    
    Tech Debt:
    
    - Might want to eventually consolidate the migrations by removing the rename migration and just faking it so that the debit/credit account fields were always there.

commit 8697f28e4cc7975601df7e3ca6ed48ee35cab355
Author: Devin Sit <devin@devinsit.com>
Date:   Sat May 30 16:31:10 2020 -0400

    UFC-174 Brought in and configured all of the Storybook addons that we need. (#51)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Brought in and configured the following Storybook addons: accessibility, actions, backgrounds, console, docs, knobs, story source, and viewport.
    - Created a quick Button component to test out Storybook and the addons.
    - Removed the default stories.
    - Added (preemptively) the 'components' and 'scenes' folders to the ESLint import internal regex.
    
    
    Tech Debt:
    
    - Still need to setup the Storybook preview with the global Sass styles, which haven't been moved over to the Redesign service yet.

commit 4d57087abc366417278a516933fcedead0e438a7
Author: Devin Sit <devin@devinsit.com>
Date:   Fri May 29 15:09:44 2020 -0400

    UFC-173 Setup an ESLint plugin for linting import order. (#50)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Brought in `eslint-plugin-import` to the `Redesign` and `Backend` services to enforce two things: that imports are grouped together logically, and that imports are ordered alphabetically.
    - Fixed all of the resulting lint errors in `Redesign` and `Backend`.
    - Had to rename the `Redesign's` `constants` folder because of a, presumably, bug in the lint plugin.
    - Updated the `Redesign` README with some quick instructions on what to do with the plugin.
    
    Tech Debt:
    
    - N/A

commit 3430e20acbd933aef4f59bc633508ccbaa77685f
Author: Devin Sit <devin@devinsit.com>
Date:   Thu May 28 22:11:17 2020 -0400

    UFC-172 Upgraded the Backend to Feathers v4 and migrated it to TypeScript. (#49)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Upgraded the `Backend` to Feathers v4, along with migrating the whole service to TypeScript. This also changed the import format to ES Modules from CommonJS.
    - Re-arranged files and folders to be more in line with the bootstrapped Feathers app structure (so that running `feathers generate service` more-or-less works).
    - Had to reconfigure the Sequelize configs to work with the compiled TypeScript code.
    - Improved how the JWT secret is injected: now it comes from the `production.json` config (because it can accept environment variables... go figure).
    - Upgraded the Node version for the `Backend` Dockerfile; had to use a fixed version of the `retryable-db-migrate.sh` to work with the latest Alpine version.
    - Removed some packages from the `Backend` that weren't being used.
    - Did a lot of refactoring around the database configs: created a centralized file for the foreign keys, changed the models to be class based (with singular/capitalized naming) and integrated the former utility model functions into them, and cleaned up the helper functions to have better interfaces.
    - Setup Prettier for the `Backend`.
    - Added the TypeScript compiler as part of the CI process.
    - Added a top-level Make command for running the local CI process on the `Backend` service.
    - Fixed a typo with the `Frontend`s` `app_env` variable in the `docker-compose` config.
    - Upgraded the `Frontend`/`Redesign's` Feathers client to v4. This meant reworking the `isAuthenticated` check because `passport` was removed from Feathers. This also meant that the `jwt-decode` and `jsonwebtoken` packages could be removed.
    - Changed the `Redesign's` `tsc` command to `tsc:check`, since the `c` stands for compiler and not checker...
    
    Tech Debt:
    
    - The `Backend` could really use some proper tests...
    - For the `Frontend`, the 'refresh auth token on app boot` thing has been kinda made redundant now that the `isAuthenticated` call just calls `reAuthenticate`... but I'm leaving it for now since we're still working on the `Redesign`.

commit b98cf65eddbd818be0f9a30ac67ab30e2bb7db10
Author: Devin Sit <devin@devinsit.com>
Date:   Tue May 26 16:29:48 2020 -0400

    UFC-169 Migrated the rest of the store over to TypeScript. (#48)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Migrated over the rest of the store (the `rootReducer` and `store` files) to TypeScript.
    - Made an API change such that all selectors are named using 'select' as a prefix instead of 'get', just to semantically distinguish them a bit more when reading the code.
    - Refactored all of the cross slice selectors into separate files split up by usage/domain. This alleviates a large amount of the tech debt that had been accruing from just stuffing all of them into a single file.
    - Changed how the `populate` functions for `Account` and `ImportProfile` work: now, relying on TypeScript for typing, they no longer return `null` if the data is missing. We might come to regret this.
    - Changed the various model `*Data` types to be interfaces so that type hinting uses the actual name (e.g. `TransactionData`) and not just the underlying alias.
    
    Tech Debt:
    
    - As stated above, the change to not returning `null` for the `populate` functions might come back to bite us. We'll just have to be careful when re-building the View Account scene to account for the user trying to navigate to a non-existent account in some other way. For reference, the `null` return change happened in df363396.

commit f25f86d38012296b728773f2a46e39c28cde5f74
Author: Devin Sit <devin@devinsit.com>
Date:   Mon May 25 15:15:25 2020 -0400

    UFC-168 Migrated the store sagas to TypeScript. (#47)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Brought over the sagas and migrated them all to TypeScript.
    - Brought over the API, because it was needed by the sagas. Also 'converted' the API stuff to TypeScript, but not really since this version of the Feathers doesn't have any types.
    - Brought over the cross slice selectors, again because they were needed by the sagas. Haven't converted them to TypeScript yet, that's for the next ticket (UFC-169).
    - Fixed up a bunch of the slices/models/utilities to have better typings to work properly with the sagas/in general.
    - Modified the Toast slice actions to correspond with the CRUD slice actions (i.e. `add`/`delete` over `addToast`/`deleteToast`).
    - Modified the base ToastData class to house the `closeAction`, just to make things a bit more generic and easier to type.
    - Brought in the jsonwebtoken + jwt-decode packages/types, since some of the API auth tests needed them.
    - Modified the local CI command for the redesign service to have all npm scripts run in parallel, cutting execution time in half.
    
    Tech Debt:
    
    - The change of string to number for Transaction amounts is still an open tech debt problem that'll need to be resolved as part of building the Transactions Import UI (again).
    - Will need to move forward the Feathers v4 migration from our current v3, since v4 is built in TypeScript, and we currently get no type info from the Feathers client.

commit 369b5571f1d5c44851afad647e7ed08103fc3169
Author: Devin Sit <devin@devinsit.com>
Date:   Sun May 24 14:24:25 2020 -0400

    UFC-171 Made the slice factories (for request slices and slices with selectors) type safe. (#46)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - This ticket addresses the tech debt pointed out in the last ticket: now the slices generated by `createRequestSlices`, `createOfflineRequestSlices`, and `createSliceWithSelectors` (renamed from `createCustomSlice`) are type safe for which slices/selectors (respectively) are generated.
    - This means TypeScript can point out when trying to call a slice or selector that doesn't exist, or that is being called with the wrong arguments.
    
    Tech Debt:
    
    - Nothing noteworthy.

commit 121b0f8afe7bb0f537fdc3b196f998ae2318306d
Author: Devin Sit <devin@devinsit.com>
Date:   Sat May 23 14:24:14 2020 -0400

    UFC-167 Migrated the store slices to TypeScript. (#45)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Brought over the store slices and migrated them to TypeScript.
    - Changed how the CRUD slice reducer factory works: now it returns a deterministic set of actions without the slice name. This is because I couldn't find a way to properly type it so that the subsequent slices would know what actions they had.
    - Had to create a 'Custom Slice' type that brought back selectors to the `redux-toolkit`s Slice type. This also means that we use a custom `createCustomSlice` function to create slices now.
    - Created 'non function property' types for the models, so that they can be properly typed when stored in Redux.
    - Upgraded TypeScript to the latest 3.8.x (3.8.5) because ESLint was having some issues with the `export type` syntax for re-exporting types in `index.ts`.
    - Enabled `noErrorTruncation` for the TypeScript compiler, just so that VSCode would expand type hover hints a bit more.
    - Added a top-level Make command for running the CI process on the `redesign` service.
    - Removed the `indent` rule for ESLint, since it can conflict with how Prettier does formatting.
    
    Tech Debt:
    
    - Having gone through the trouble of trying to get the type of the CRUD slice reducer factory right, and realizing that dynamically creating names for properties on an object is hard to type _statically_, I have a feeling that we're gonna run into the same sorts of troubles with the request slices, once they start being used by components. As such, we'll probably have to revisit how those are typed in the future.

commit c8d98388695a244fac531ced2fe407001a76d44c
Author: Devin Sit <devin@devinsit.com>
Date:   Thu May 21 21:13:08 2020 -0400

    UFC-166 Migrated all of the store utils to TypeScript. (#44)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Brought in the latest version of `redux-toolkit` as a complete replacement for `redux-stater-kit`.
    - Brought in `react-router` and `redux-saga-test-plan, since I forgot about them.
    - Migrated over all of the store utils to TypeScript.
    
    Tech Debt:
    
    - Besides the fact that the entire offline-first system is going to eventually get revamped? Not much.

commit 16909b5c2be92d69a85310f5ebc2d15292e91ce1
Author: Devin Sit <devin@devinsit.com>
Date:   Wed May 20 21:26:32 2020 -0400

    UFC-164 Migrated the hooks over and introduced enums for the Account and Transaction types. (#43)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Migrated over all of the hooks to TypeScript.
    - Created enums for the Transaction and Account types to enforce their values and make typing things more explicit than just `string`.
    - Added an `Id` type alias, just to make it clearer when a `string` type is actually supposed to be an Id.
    
    Tech Debt:
    
    - The `useInput` and `useInputClearer` hooks will probably go away once we start using `react-hook-form`.

commit 7a05c41b2ed8d68aeaf61c552dcbcb856ea190dc
Author: Devin Sit <devin@devinsit.com>
Date:   Wed May 20 15:42:21 2020 -0400

    UFC-162 Migrated the services to TypeScript. (#42)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Brought in the type packages for the CSV and Search services: papaparse, stemmer, and stopword.
    - Migrated over the existing services to TypeScript.
    - Refactored some of the utility files as services.
    - Standardized on upper camel case names for files that default export a class.
    - Moved some of the functions (throttle, debounce) from `helperFunctions` out into their own files.
    - Had to enable the TypeScript 'downlevelIteration' compiler option, because we were doing some array spreads into sets (see https://github.com/microsoft/TypeScript/issues/21058).
    
    Tech Debt:
    
    - Nothing noteworthy.

commit a9d8284d94206dd67a1316bed3de848a681ea4ff
Author: Devin Sit <devin@devinsit.com>
Date:   Tue May 19 23:18:08 2020 -0400

    UFC-163 Migrated over the constants to TypeScript. (#41)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Migrated over the constants files under a new top-level `constants` folder.
    
    Tech Debt:
    
    - Might want to rethink how the Screen URLs are structured (specifically, the whole 'derived' urls thing) once `react-router` v6 is out, since it'll have relative routes.

commit 32498b54c3ef9c6a33a236dd9fc48532b728ea56
Author: Devin Sit <devin@devinsit.com>
Date:   Tue May 19 22:49:01 2020 -0400

    UFC-161 Migrated the models and data objects to TypeScript. (#40)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Brought in the `@types/uuid` package for types.
    - Upgraded `redux-starter-kit` to the version right before they removed the slice reducer because it had a type error (and I didn't want to upgrade to `redux-toolkit` yet).
    - Migrated over all of the models.
    - Migrated over all of the data objects as 'structures'.
    
    Tech Debt:
    
    - The ImportProfile CSV processing code has been changed so that ImportableTransactions use numeric amounts instead of strings; this means that the future rendition of the ImportTransactionsTable will need to account for this (since it can now no longer directly edit them as strings).

commit cc03aa7157da193a6fec598cc1b837a2008060d1
Author: Devin Sit <devin@devinsit.com>
Date:   Tue May 19 15:27:51 2020 -0400

    UFC-165 Migrated the top-level utils to TypeScript. (#39)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Added Make commands for the `redesign` service.
    - Migrated all of the top-level utils to TypeScript.
    
    Tech Debt:
    
    - Will need to convert some of the utils to services as part of UFC-162.

commit 43249c00068d72b7ff46109070408ed329268bd5
Author: Devin Sit <devin@devinsit.com>
Date:   Tue May 19 12:09:08 2020 -0400

    UFC-160 Bootstrapped the new Redesign service. (#38)
    
    Changelog:
    
    - A new `redesign` service is now available at redesign.ufincs.com. This will be where all new development takes place from now on.
    
    Implementation Details:
    
    - Bootstrapped the new `redesign` service with TypeScript, Prettier, Storybook, StyleLint, and all the other frontend goodies.
    
    Tech Debt:
    
    - Will need to update the `redesign` service's README once it's up to par with the `frontend` service.
    - Will need to eventually remove the old `frontend` service and rename the `redesign` service to `frontend`.
    - The above will also involve manually updating the docker-compose config, Kubails config, and wildcard certificate.
    - Will also need to eventually setup the `manifest.json` properly for the PWA.

commit 6bfcdc66f07edaf932d67ad933c265443b312a94
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Apr 3 12:42:41 2020 -0400

    UFC-158 Fixed the Date Picker having the MaterialDropdowns overlayed on it. (#37)
    
    Changelog:
    
    - Users will find that the date picker in the New Transaction form now displays as expected, without the  account inputs overlayed on it.
    
    Implementation Details:
    
    - Added some `dimens` variables to handle this and encode the logic of 'date picker > inputs'.

commit 5917162f3cc16c39a4557719a79d787df0867bac
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Mar 24 12:51:01 2020 -0400

    UFC-157 Fixed the MaterialDropdown so that users can click on the custom arrow icon to open the dropdown; required some CSS trickery. (#36)
    
    Changelog:
    
    - Users can now click on the arrow icon in all dropdowns to trigger opening the dropdown.
    
    Implementation Details:
    
    - A rather wacky CSS 'hack'. Documented in code.

commit 3ae61f92d9b1fcfc63d5c2eead3361f47c846a53
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 23 23:50:29 2020 -0400

    UFC-156 Fixed the MaterialDropdown to not autofill every time. (#35)
    
    Changelog:
    
    - Users should find that all dropdowns are now working as they were before, with them not always autofilling values.
    
    Implementation Details:
    
    - N/A

commit 331fe7c4161b9e051bac768ee905b02c3e1b8a9f
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 23 21:10:47 2020 -0400

    UFC-155 Moved the 'useTransactionForm' hook into a hooks file colocated with the TransactionForm component. (#34)
    
    Changelog:
    
    - N/A
    
    Implementation Details
    
    - N/A

commit 25db3b960d590991bbbff94c10a2fb94f538a1f7
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Mar 22 22:18:18 2020 -0400

    UFC-154 Refactored a lot of places to use the optional chaining operator. (#33)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Everywhere that it made sense, the optional chaining operator has been refactored in to shorten code and reduce unnecessary conditionals.

commit 35b2dee2d79c2d4a1bd60257937b9b354bb60925
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 9 15:14:00 2020 -0400

    UFC-147 Implemented the first phase of offline-first functionality. (#32)
    
    Changelog:
    
    - Users can now use the app (once it has loaded) fully offline! All requests will be buffered until a connection can be restored, so it can be used it as normal while offline.
    - Fixed a bug where, sometimes, deleting a transaction immediately after deleting it would cause the app to crash.
    
    Implementation Details:
    
    - Introduced the concept of an 'Offline Request Slice' -- a slice that handles the state for a request that is offline-first.
    - Introduced the 'Offline Request Manager' -- a slice with state that manages the queue of offline requests.
    - All existing request slices that actually make network calls (using Feathers) have been converted to Offline Request Slices.
    - Regular 'Request Slices' still exist for things that don't need the offline-first functionality (i.e. authentication) or things that make calls to other offline request slices but still need the request slice lifecycle.
    - Fixed the `accounts` slice to not allow adding the same transaction to an account multiple times.
    - Moved the Account unit conversion steps from the sagas and into the forms, to match how it's done for Transactions.
    - Modified the 'watchRequestSaga' of the regular 'Request Slice' to properly have the 'successCalled' flag scoped for each instance of the saga.
    - Updated create-react-app (i.e. the `react-scripts` package) to the latest version to fix vulnerabilities; started using the optional chaining operator.
    - Modified the Frontend's Dockerfile to not run the production build during dev to save on dev environment boot time.
    - Added linter rules to lint for the React 'rules of hooks'.
    - Fixed the linter rule for `no-unused-vars` to not ignore a whole bunch of things, and only ignore the `React` import.

commit 054cb47de67811a62142eba1b025f43261ccb0b8
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Jan 8 00:20:23 2020 -0500

    UFC-151 Moved uFincs to a new GCP account. (#31)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Reconfigured the repo to use a different GCP project.
    - Made the storage buckets and the key rings use names that are based on the GCP project ID, instead of project name, to avoid global naming conflicts.

commit 22458bed2df618c1eea2d09110fdd5a817f50289
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Jan 6 22:07:15 2020 -0500

    UFC-152 Created Terraform configs for new resources that had been created manually. (#30)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Added Terraform config for the frontend UpTime check and email alerts.
    - Reconfigured the Terraform config for the database backups storage bucket to be in the 'cluster' module.
    - Removed the Terraform 'storage' module, since it is no longer needed.
    - Removed all NFS model server related manifests/configuration, since we don't need it.

commit 45ed9ccd706bde6e7c92bf928a87f8391a60f49c
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Jan 4 13:02:16 2020 -0500

    UFC-150 Upgraded cert-manager to re-enable renewing/creating certificates. (#29)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - cert-manager has been upgraded the latest version (v0.12.0) to fix issues with the old version no longer being allowed to generate or renew certs.
    - The cluster version has been upgraded from v1.11.8 to v1.15.4 since it seemed a little out-of-date.
    - The certificate reflector has been updated to work with the latest cert-manager and Kubernetes versions.

commit e79a2d0b25a6344cce8a1b308ae238edd98b16f9
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Jan 2 00:04:49 2020 -0500

    HOTFIX: Fixed a date-related test that broke with the new year so that it's not static.

commit e74164ca34173d056bbcb48108a72dfb309a45e0
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Dec 5 15:41:41 2019 -0500

    UFC-149 Wrote documentation to conclude the Capstone project. (#28)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Updated main README, as well as service level READMEs.
    - Moved the `userAnalytics.js` file to the `utils/services` folder, since that seemed to make more sense.

commit e898beb3638bd61c83a2d82d2fb1681b015432c1
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Thu Dec 5 13:45:40 2019 -0500

    UFC-148 Fix broken view account link. (#27)
    
    Changelog:
    
    - The 'View' icon on the Accounts Table rows has been fixed to bring you to the proper Account page.

commit d0b01696f65ce7c34e224cd3d87b8628be7eda97
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Sat Nov 30 17:56:12 2019 -0500

    UFC-142 Net worth over time chart (#26)
    
    Changelog:
    
    - Added net worth chart
    - Clarified error messages on expense and expenses per account charts

commit d9eb74959186f0c4abb60ecebc53217a7b463d4f
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Wed Nov 27 11:52:06 2019 -0500

    UFC-144 Fix mobile scrolling on sidebar form. (#25)

commit 70877da4767d16f15a88c323b8e2d619ee58da20
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Nov 25 16:10:22 2019 -0500

    UFC-141 Implemented the UI for the duplication detection in the import process. (#24)
    
    Changelog:
    
    - The import process duplication detection is now fully functional; duplicate transactions are now automatically excluded from import and can be hidden while adjusting other transactions.
    - Users can also now have the ability to include or exclude individual transactions during the import process.
    - The 'Action' column in both the Accounts and Transactions tables has been renamed to 'Actions'.
    
    Implementation Details:
    
    - Modified the `TableCard` to support connecting the row components directly to the store for things like custom styling.
    - Modified the `TransactionsTableCard` to support custom column generators so that `ImportTransactionsTable` has its column logic separate from the main table.
    - As a result of ^, some props of `TransactionsTableCard` (that were specific to the import process) have been removed.
    - The AdjustTransactions part of the `canGotoNextStep` logic of the import process has been updated to only check for included transactions.
    - Note: The `MaterialCheckbox` isn't (yet) styled like a material design checkbox... it was just named as such for consistency.

commit 1df6a019c52d113d9e688c13cee50abfb735b87a
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Sun Nov 24 16:12:28 2019 -0500

    UFC-143 Fix expense chart breaking mobile views (#23)
    
    Changelog:
    
    - Set type="email" on auth form input so that we get an email keyboard on mobile
    - Fix chart display sizes on mobile
    - Fix regression in ExpenseChart caused by incorrect rebase

commit c146bd10693f98560c643afa95e1b9fc4940d53d
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Nov 20 20:27:15 2019 -0500

    UFC-140 Implemented the duplication detection logic for the import process. (#22)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Introduced the concept of an `ImportableTransaction` model.
    - Implemented the duplication logic as part of the CSV parsing process.
    - Finally commented out those `createRequestSlices` tests that have a race condition and can sometimes fail.

commit e74f865f9fe2e5df776e7756a2acea6df13966bd
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Nov 19 09:25:54 2019 -0500

    UFC-138 Fixed the import process to handle invalid dates. (#21)
    
    Changelog:
    
    - Users can now fill out the date during the import process for any transactions that have invalid dates, instead of just having the whole app crash.
    
    Implementation Details:
    
    - N/A

commit 79c59f1f81881d395018ea018db5a2d56bf252ed
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Mon Nov 18 13:10:56 2019 -0500

    UFC-124 Create expenses by type chart (#13)
    
    Changelog:
    - Create pie chart for expenses per account

commit c9e9f424131d3a233c2b3e77c750e0825bad230f
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Nov 18 11:14:25 2019 -0500

    UFC-137 Moved all of the date helper functions into their own file; updated all dependencies accordingly. (#20)

commit 11dd585329762cef36ae7cc10cb08a9ebf18bcb8
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Nov 15 14:28:47 2019 -0500

    UFC-136 Fixed performance issues with the Transaction tables displaying or editing lots of transactions. (#19)
    
    Changelog:
    
    - Performance issues with the Transaction tables displaying or editing lots of transactions have been (for the most part) resolved.
    
    Implementation Details:
    
    - For the complete breakdown of everything that was fixed and optimized here, see the 'Postmortem Fix Details' section of https://share.nuclino.com/p/UFC-135-Design-of-Fix-for-Slow-Transaction-Tables-Zv0VNEwkYjQ2gO13pVFDRM.
    - tl;dr connecting table cells directly to the store, memoizing a bunch of components, and upgrading packages to their latest versions = fast tables.
    - Also, fixed the 'Amount' cells to show color depending on the type of transaction (somehow this broke a while ago and we never noticed).

commit 328a684e47d44660a3376e2eb40cc17cce706fc9
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Nov 6 11:33:53 2019 -0500

    UFC-133 Added word indexing to the 'transactionsIndex' to be able to search for transaction by words. (#18)
    
    Changelog:
    
    - In the New Transaction form, users can now search for transactions using the words contained in descriptions.
    
    Implementation Details:
    
    - Brought in the `stemmer` and `stopword` packages for text processing.
    - Modified the `transactionsIndex` slice to support a word + word bigram index for searching by words for transactions.
    - Modified the `TransactionAutocompleteInput` to use just a throttle for searching (instead of a throttle + debounce) to eliminate excessive search operations.
    - Fixed a bug with the `ExpenseChart` whereby it would render anytime anything happened by moving the data computation into a selector.

commit d1e14f6fd46eb4feafabc706ceeab9223cd58cdc
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Nov 4 09:42:04 2019 -0500

    UFC-132 Connected the TransactionForm to enable search and autocompletion. (#17)
    
    Changelog:
    
    - Transaction autocompletion is now available when filling out the New Transaction form.
    - Search by exact description is currently the only form of transaction search available.
    
    Implementation Details:
    
    - Created a version of the `MaterialAutocompleteInput` (the `TransactionAutocompleteInput`) that is hooked into the store to search transactions.
    - Consolidated and combined the `NewTransactionForm` and `EditTransactionForm` into a single `TransactionForm` scene.

commit f8958556da8ecd5583bda581aabb2bef0c1283b6
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Oct 31 13:56:51 2019 -0400

    UFC-131 Created the 'searchService' and 'searchResults' slice for searching transactions. (#15)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Created the `searchResults` slice and sagas; the slice holds, currently, the results of a transaction search, but will hold other searches in the future.
    - Created the `SearchService` for holding the logic of how to perform different types of searches.
    - Moved the `CSVParser` and `SearchService` to a new `utils/services` folder.

commit d7a6b18bbe4d059643a0b7e8284cacb558ba006e
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Oct 31 10:37:01 2019 -0400

    UFC-135 Fixed the import process to create all of the transactions in one request. (#16)
    
    Changelog:
    
    - Importing lots of transactions is now significantly faster.
    
    Implementation Details:
    
    - The `create` (and `update`, cause convenience) methods of the `transactions` service now support multi (i.e. array) params.
    - The corresponding client-side sagas/slices have been updated to support these bulk methods.

commit 8b8062ea969d2b5e6139d6116dc8e34c7d95395d
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Oct 28 09:51:28 2019 -0400

    UFC-130 Created the slice and sagas for the 'transactionsIndex'. (#14)
    
    Changelog:
    
    - Transaction descriptions are now being indexed for searching.
    
    Implementation Details:
    
    - Created the `transactionsIndex` slice and sagas.
    - Added various slices to `redux-persist` that weren't previously being persisted.
    - Doubled the saga timeout for the `createRequestSlice` tests to reduce off-hand chance of a race condition failure.

commit b502bd2645453535a04f3ef169c58bc173343cad
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Fri Oct 11 17:51:41 2019 -0400

    UFC-125 Fix bug where Y-axis labels would render above the sidebar. (#12)
    
    Changelog:
    
    - Fix expense chart's Y-axis labels show over the New Account/Transaction forms
    - Make `abbreviateMoney()` handle cent fractions (by rounding to nearest cent)

commit cc1d67f9aab7d27835f589515103378a6ae1fe42
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Oct 8 12:16:50 2019 -0400

    UFC-129 Created the 'MaterialAutocompleteInput' component. (#11)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Built the first version of the `MaterialAutocompleteInput`; haven't used it anywhere yet.
    - Changed the text color of the DropdownItem to `$color-text-primary` since I only just noticed that it was pure black.
    - Fixed the 'Transactions' tab's width being wrong on mobile.

commit f6f3c7074cdf4335b3368ca14002ec4ceb97a043
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Oct 4 15:47:33 2019 -0400

    UFC-126 Fixed the shrinking of the HeaderNav Transactions tab icon when it is selected on Firefox. (#10)
    
    Changelog:
    
    - Fixed the shrinking of the Transactions tab icon in the Header nav when it is selected on Firefox.
    
    Implementation Details:
    
    - N/A

commit 6f2e802cbdb0742774cbe68d612c002fc249adfe
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Oct 4 08:58:41 2019 -0400

    UFC-123 Fixed the sorting on the TransactionsTableCard to actually work on the Amount, Description, and Type columns. (#9)
    
    Changelog:
    
    - Fixed the sorting on the TransactionsTableCard to actually work on the Amount, Description, and Type columns.
    
    Implementation Details:
    
    - N/A

commit a288ccd4c2f47d625990988d4142b8edb3fea48e
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Oct 3 18:36:07 2019 -0400

    UFC-127 Wrote tests for the import process. (#8)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Wrote tests for most everything from the import process, along with some other things that were missed in previous tickets.
    - Added a new Make command for running the frontend tests in `watch` mode.
    - Fixed a couple of functions that had bugs pop up as a result of testing.
    - Moved the `routerResetReducers` helper function to `reducerFactories` since it makes more sense to put it there.
    - Removed the `formatAccountFlow` method from the `Transaction` model since it's literally unused.

commit 71f6ba8b1b154e701ed1284f0c07dfa88102725f
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Oct 3 18:29:03 2019 -0400

    UFC-112 Implemented the functionality of the Import Process. (#7)
    
    Changelog:
    
    - Users can now import transactions through the 'Import' option under the 'New' button.
    - The max width of the content is now slightly wider.
    
    Implementation Details:
    
    - Fixed a bug with createRequestSlices where errors were being stored as empty objects in the store.
    - Fixed a minor bug with the MaterialDropdown's autofillSingleValue where it would update during a render.
    - Upgraded react-scripts to fix the eslint `for..of` false positive; upgraded other packages to fix security vulnerabilities.
    - Added a new type of Toast: SuccessToast.
    - Added a new helper function: `arrayToObject` that converts an array of objects into an object by indexing by a property.
    - Added a new store helper function: `crudSliceReducerFactory` that creates a set of CRUD case reducers for use with `createSlice`.
    - Split out a standalone `importProfileMappings` service for backend use only (it has external requests disabled).
    - Created the slices for `importProfiles` and `importProfileMappings` to hold their data clientside.
    - Added a seed ImportProfile (with mappings) to the test account.
    - Modified the MaterialMoneyInput to optionally accept negative values; needed in the import process for determining Transfer transaction flow.
    - Modified the MaterialMoneyInput to optionally right align the value; needed in the import process when editing amounts.

commit 27a0df975b83a9c410ba709f4575d3731795da40
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Tue Sep 24 17:19:44 2019 -0400

    UFC-121 Include debt transactions in expense chart. (#6)
    
    Changelog:
    
    - Include debt transactions in expense chart.

commit 9cdf31de89843455bd335bb6dbfa496bf6f44bcb
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Sep 18 10:35:00 2019 -0400

    UFC-109 Setup the backend models/services for the Import Profiles. (#5)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Created the backend API (service) for the Import Profiles, along with database schemas.
    - Did some refactoring of the seeder files to use a common generator function.

commit 78c20baab79a48c361447404d200823f02e26276
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Sep 13 22:04:43 2019 -0400

    UFC-122 Account dropdowns on the Transaction forms now autofill for single values. (#4)
    
    Changelog:
    
    - Account dropdowns on the Transaction forms now autofill when there are is only one option.
    - Fixed a bug where the EditTransactionForm wouldn't properly highlight the selected date when first opening the date picker.
    
    Implementation Details:
    
    - Refactored out the hooks from the New/Edit transaction forms into a single component-level hook.

commit 63f66eb585203b78ac3e64a82790650e70fdc6dd
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Sep 12 15:51:41 2019 -0400

    UFC-119 Upgraded the Dockerfiles for the frontend and backend to the latest Node LTS version. (#3)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Upgraded to the latest LTS Node version for the Frontend/Backend Dockerfiles.

commit 79acddf85e2010e87d35d26e54b0216a08df86e7
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Sep 12 15:45:45 2019 -0400

    UFC-118 Updated Frontend/Backend ESLint configs with more strict styling rules. (#2)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Frontend/Backend now have additional ESLint rules relating to stricter styling.
    - Fixed any lint errors that popped as a result of the new rules.

commit c47fd3792a879eeb1e57dfdf353e8e118e1a9191
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Sep 12 15:35:46 2019 -0400

    UFC-120 Reconfigured Terraform to point the Cloud Build trigger to Github. (#1)
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Swapped out the Bitbucket repo details for the Github ones to update the Cloud Source repo and Cloud Build trigger.
    - Changed out the deprecated `zone` attribute for the cluster for `location`.

commit 51ef5a1d11fb76066a15e9348038ea7ef1ad7815
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Wed Sep 11 22:01:59 2019 +0000

    Merged in UFC-113 (pull request #62)
    
    Changelog:
    
    - Add javascript styles & default chart theme.
    - Create expenses chart.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 0f81fe464145081b8acbc862b690397e1f60cdfb
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Sep 11 19:54:02 2019 +0000

    Merged in UFC-116 (pull request #64)
    
    UFC-116 Users should no longer receive invalid auth token errors.
    
    Changelog:
    
    - Sessions now expire in 7 days (as opposed to the previous 1 day).
    - You are now properly kicked back to the login back for re-authentication if you try to make any requests while unauthenticated.
    - Sessions are now automatically renewed whenever you enter the app (i.e. on login or refresh of the page).
    - You can now see toast messages from the login/sign up pages (notably, one telling you to authenticate after you get kicked out).
    
    Implementation Details:
    
    - Breaking Change: The `error` state of a RequestSlice is now the _full_ error object, as opposed to just the error message.
            - Everything existing (that I could find) has already been updated to account for this.
    - The `api.isAuthenticated` method has now been fixed to not always return true; it'll actually validate the JWT now.
    - The `ToastMessages` scene component has been moved from `AppRouter` to the top-level `App`.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit ff6587d2f729090b847c3e7cf11ad2f85b8d08bb
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Wed Sep 11 14:32:16 2019 +0000

    Merged in UFC-117 (pull request #63)
    
    UFC-117 Move scss imports to the layout files.
    
    Changelog:
    
    - Move scss file imports to the layout file if present.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 203cc9e557f52f5c185f793fb758e2cecfa95f83
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Sep 11 13:16:16 2019 +0000

    Merged in UFC-115 (pull request #61)
    
    UFC-115 Refactored the `createRequestSlice` tool to support creating multiples slices at once; changed store slice paradigm.
    
    Changelog:
    
    - N/A
    
    Implementation Details:
    
    - Refactored createRequestSlice to createRequestSlices -- can now create multiple request slices at once, that are stored using nested state.
    - Refactored all former uses of createRequestSlice to createRequestSlices.
    - Changed the paradigm for using slices from the store:
            - Now, instead of re-exporting the actions/selectors from rootActions/rootSelectors, we now just use the slices directly.
            - Thus, rootActions and rootSelectors have been removed, and slices are now exported directly from the store.
            - A new crossSliceSelectors file has been created to hold the old cross slice selectors from rootSelectors.
    - Wrote tests for the new createRequestSlices.
            - Had to bring in the redux-saga-test-plan for more easily testing sagas.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit d45fe7db5d2122c64de401580aeb9a10087558ed
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Sep 10 13:27:13 2019 +0000

    Merged in UFC-110 (pull request #60)
    
    UFC-110 Built out the UI for the import process.
    
    Changelog:
    
    - Added 'Import' as an option to the New button, and built out the base (non-functional) UI for the Transactions import pages.
    - Fixed the width of the Transactions table's 'Type' column so that the sorting indicator can be displayed.
    
    Implementation Details:
    
    - Refactored out a ContextBar component from the ViewAccount scene.
    - Refactored the `transaction-type--${type}` classes into a generator function on the Transaction model.
    - Modified the various TableCard cell components to have an editable version for use when editing inline in the TransactionsTableCard.
    - Heavily refactored the TransactionsTableCard to support handling inline editing; this included simplifying the use of some of the props.
    - Updated `React` and `react-scripts` in the Frontend to their latest versions.
    - Patched package vulnerabilities in the Frontend and Backend.
    - Fixed how the fonts are imported in the Frontend based on changes to the updated react-scripts.
    - Added some `eslint-disable` lines for false positives relating to https://github.com/facebook/create-react-app/issues/7566 and https://github.com/eslint/eslint/issues/11899.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 860e23f395b92b68240b544e5cdf0fe24b35b4ab
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Jul 29 08:35:38 2019 -0400

    HOTFIX: Upgrading cluster node disk size from 10GB to 30GB to alleviate 'DiskPressure' errors.

commit 2978648b35098b458964eee08c2254d4fab5dc35
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Aug 31 01:02:54 2019 +0000

    Merged in UFC-114 (pull request #59)
    
    UFC-114 Significantly improved the mobile user experience.
    
    Changelog:
    
    - There is now a mobile user experience. The Home page, app navigation, and account/transaction creation forms have been modified to enable a mobile workflow.
    - The header app navigation now becomes a footer when browsing on a mobile device.
    - Additionally, the navigation menu items now have icons.
    - The account/transaction creation forms now take up the whole screen on mobile.
    - Home page account summaries are also now optimized for mobile; you can now click on the whole summary item to jump to the Accounts page.
    
    Implementation Details:
    
    - Modified the frontend's default BACKEND_HOST value to be `window.location.hostname` so that using the app from a device that isn't the one that the server is being run on still works (e.g. from a mobile device for testing purposes).
    - Created a whole bunch of new media queries to handle transforming the app from desktop to mobile.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 7595f509ce4851c755becd55298c798ed80ce6dc
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jun 9 16:57:24 2019 +0000

    Merged in UFC-108 (pull request #58)
    
    UFC-108 Setup LogRocket for some logging.
    
    Changelog:
    
    - N/A
    
    Other Implementation Details:
    
    - Setup LogRocket for better logging and user session debugging.
    - Fixed the 'NaN is not a valid number' warnings that React kept throwing out for the specialized MaterialInputs.
    - Upgraded axios to fix security vulnerability.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 49efe88f127fe8876cf23387b83c28b7a78b6fa1
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Jun 4 00:26:49 2019 +0000

    Merged in UFC-95 (pull request #57)
    
    UFC-95 Implemented sorting the Account dropdowns of the TransactionFormLayout.
    
    Changelog:
    
    - The accounts in the dropdowns of the new/edit Transaction forms are now sorted alpbabetically.
    
    Other Implementation Details:
    
    - N/A
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit ce0c0e612b5259024470bc6524e45c77c82449e5
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jun 2 23:00:14 2019 +0000

    Merged in UFC-94 (pull request #56)
    
    UFC-94 Implemented auto-focusing the current selected date in the Date Picker.
    
    Changelog:
    
    - The date picker for the forms is now auto-focused onto the selected date when the input receives focus.
    
    Other Implementation Details:
    
    - N/A
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit ecdf6775aa38563efdf737110934f10e8849b773
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jun 2 16:52:18 2019 +0000

    Merged in UFC-93 (pull request #55)
    
    UFC-93 - Made the first input in the new/edit Account/Transaction forms automatically focus when the form is opened.
    
    Changelog:
    
    - The first input in the new/edit Account/Transaction forms is automatically focused when the form is opened.
    
    Other Implementation Details:
    
    - N/A
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 182197b9fb0bbcd0ab6a79d5a8172b1b0a94acaf
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Jun 2 16:26:09 2019 +0000

    Merged in UFC-92 (pull request #54)
    
    UFC-92 Modified the Header logo to go to the auth'd Home page when logged in.
    
    Changelog:
    
    - Modified the Header logo to go to the auth'd Home page when logged in.
    
    Other Implementation Details:
    
    - N/A
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit bc97f0df9b9a550c1550476f8ca112e6f4c2ca45
Author: Devin Sit <devin@devinsit.com>
Date:   Mon May 27 12:48:56 2019 +0000

    Merged in UFC-91 (pull request #52)
    
    UFC-91 Added proper disabled states to the various (Material) inputs.
    
    Changelog:
    
    - The MaterialInput, MaterialDropdown, and HorizontalPicker now have a visually correct disabled state.
    - The 'Type' header text in the various forms for the Type picker has now been slightly shrunk (since it started to look just a smidge too big).
    
    Other Implementation Details:
    
    - N/A
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 7ffc2c41a8872be66419cb90b9275100a1599a92
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Mon May 27 03:16:56 2019 +0000

    Merged in UFC-88 (pull request #53)
    
    UFC-88 Implement Transaction Editing
    
    Changelog:
    
    - Created TransactionFormLayout and EditTransactionForm components.
    - Added form actions to hide/show edit transaction form & populate the form.
    - Added transaction update sagas and backend transaction update validation.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 18e82c3fd4c4a44a58e8176fb231bd3304f969b3
Author: Devin Sit <devin@devinsit.com>
Date:   Sun May 26 22:31:38 2019 -0400

    HOTFIX: Fixing the EditAccountForm so that you can actually edit the (editable) inputs; a callback wasn't being memoized correctly.

commit b2afd51bf279462f813fe8dac875cf574474198b
Author: Devin Sit <devin@devinsit.com>
Date:   Sun May 26 23:11:50 2019 +0000

    Merged in UFC-90 (pull request #51)
    
    UFC-90 Implemented the AccountsSelector on the Accounts page.
    
    Changelog:
    
    - The 'Accounts' page now has navigation buttons for navigating between the different account table types.
    - The 'View' buttons for the 'Home' page's account balance summaries are now functional.
    
    Implementation Details:
    
    - Brought in a 'react-scrollspy' component to handle changing the account type nav active state while scrolling.
    - Brought in a 'react-router-hash-link' component to deal with the fact that 'react-router' doesn't scroll to hash IDs automatically.
    - Upgraded create-react-app to v3 for security reasons; removed the '.env' with NODE_PATH in favour of the new 'jsconfig.json' with 'baseUrl' for absolute imports.
    - Upgraded sequelize to v5 for security reasons; removed the sequelize 'operatorsAliases' option since it's no longer needed.
    - Fixed all existing hooks to account for the new linting rules that CRA v3 brought (i.e. the rules of hooks).
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 88f690f7c80f4c240e30d610f5ff31bb850c9a29
Author: Devin Sit <devin@devinsit.com>
Date:   Sat May 25 01:29:33 2019 +0000

    Merged in UFC-89 (pull request #50)
    
    UFC-89 Rotated the backend token secret and moved it into an encrypted secrets file so that it's loaded as an environment variable in prod.
    
    Changelog:
    
    - You now get notified when you attempt to perform a request but your session has been invalidated.
    
    Implementation Details:
    
    - Rotated the backend token secret and moved it into an encrypted secrets file so that it's loaded as an environment variable in prod.
    - Non-prod environments now share a static secret that is different from prod's.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit d520ad74aa8f6cf0ef67f129084ca6c00ea7eb35
Author: Devin Sit <devin@devinsit.com>
Date:   Tue May 21 02:44:13 2019 +0000

    Merged in UFC-87 (pull request #49)
    
    UFC-87 Added a month switcher to the 'Transactions' page.
    
    Changelog:
    
    - Added a month switcher to the 'Transactions' page.
    - Added an 'All' and a 'Monthly' view to the 'Transactions' page.
    - Some things (like dropdowns or the date picker) can now be closed using the ESC key.
    - The Income and Expense summary values on the Home page are now monthly values.
    
    Implementation Details:
    
    - `useOutsideCloseable` now supports closing via ESC key.
    - Terminology wise, the home page now uses 'balance summaries' instead of 'total balances' to account for the monthly income/expense values.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 46fbe9a4e0c1e4ace92021d5c9656ea661590112
Author: Devin Sit <devin@devinsit.com>
Date:   Sun May 19 23:32:41 2019 +0000

    Merged in UFC-83 (pull request #48)
    
    UFC-83 Implemented account deletion with confirmation dialog and undo toast.
    
    Changelog:
    
    - Implemented account deletion with confirmation dialog and undo toast.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 29084c8c72850e337e2ce4085c81c2742aa563ea
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Sun May 12 21:25:44 2019 +0000

    Merged in UFC-86 (pull request #47)
    
    UFC-86 Made dropdown hover effect match that of the tables.
    
    Changelog:
    
    - Rounded-off the corners of the first and last items of dropdowns.
    - Lightened the hover effect for dropdown items.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit d9a486eb06a1abff9cf8d5a526ff7e3cf1d4acb1
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Fri May 10 03:43:44 2019 +0000

    Merged in UFC-84 (pull request #46)
    
    UFC-84 Connect the EditAccountForm to Redux for updating the account information and propagating it to the backend.
    
    Changelog:
    
    - Added account update saga
    - Added backend account update validation
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 81202ce41194784679138a6dfc5c487bf27597aa
Author: Devin Sit <devin@devinsit.com>
Date:   Fri May 3 21:04:42 2019 +0000

    Merged in UFC-85 (pull request #45)
    
    UFC-85 Fixed transaction deletion to happen instantly.
    
    Changelog:
    
    - Fixed transaction deletion to happen instantly, so that the user doesn't have to wait out the 'undo' toast timer.
    
    Implementation Details:
    
    - Removed the transactionsToBeDeleted slice, since it is no longer used.
    - Moved the Account data conversions from the 'accountsCreate' saga to NewAccountForm's connect (just like with NewTransactionForm).
    - Simplified the process of creating Toast objects by moving the actions (now real action creators!) into the classes.
    - Changed the request slice watchRequestSaga to be takeEvery and non-route-cancellable by default so that only auth requests work otherwise.
    - Refactored the AccountsTableCard to connect to the store for mapDispatchToProps directly, just like TransactionsTableCard does.
    - Wrote tests for the accounts, transactions, and toasts slice reducers.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 4f2185afc726ca6d364df314d81da4f97dd37cbd
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Apr 8 22:22:23 2019 +0000

    Merged in UFC-81 (pull request #44)
    
    UFC-81 Implemented all of the Transactions 'delete' functionality.
    
    Changelog:
    
    - Implemented all of the Transactions 'delete' functionality.
    - Implemented a Toast notification system for 'undoing' transaction deletion and showing error messages.
    - Moved the NewAccountForm/NewTransactionForm 'hiding on create success' logic to the UI sagas.
    - Refactored the 'ActionsCell' into a TableCard level component.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 9cabe24e93ded2706472c583bfea992a54fe918b
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Mon Apr 8 21:21:54 2019 +0000

    Merged in UFC-82 (pull request #42)
    
    UFC-82 Input disabling for account and transaction forms
    
    Changelog:
    
    - Improved input disabling for account and transaction forms.
    - Implemented input disabling when form is offscreen.
    - Moved input disabling logic out of the formLayout components.
    - Added useSetInputsDisabled hook.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit c7df8c69bfbd461e3e2103da830b5493e6812f80
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Apr 8 20:19:58 2019 +0000

    Merged in UFC-80 (pull request #43)
    
    UFC-80 Created the basic toast layouts and added the 'Action' column to the Transactions table.
    
    Changelog:
    
    - Added the (optional) 'Action' column to the Transactions table along with the 'Delete' action.
    - Created a 'ToastMessages' scene to handle rendering the list of toasts; created 'UndoToast' and 'TransactionDeleteToast' to handle transaction deletion undo.
    - Renamed the title of the Transactions page table from 'All' to just 'Transactions'.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit d2b99b1cd061b56f6bbe75e244563d028c972a5d
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Mon Apr 8 19:11:17 2019 +0000

    Merged in UFC-78 (pull request #41)
    
    Changelog:
    
    - Added edit actions to the account tables and singular account view page.
    - Added onclick handlers for edit account actions on accounts scene.
    - Added onclick handlers for edit account actions on view account scene.
    - Connected EditAccountForm to pull account data from store.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 423847bdbffc62972cd35a370675c128f1da16bc
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Apr 7 16:07:13 2019 +0000

    Merged in UFC-79 (pull request #40)
    
    UFC-79 Disabled cert-manager's 'ingress-shim' controller since we don't need dynamically provisioned certificates.
    
    Changelog:
    
    - Disabled cert-manager's 'ingress-shim' controller since we don't need dynamically provisioned certificates.
    - Removed the 'cluster-issuer' annotation from the ingress template.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 819920d6708b942d100c3bb61f8d834afc5a2496
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Apr 5 22:25:27 2019 +0000

    Merged in UFC-77 (pull request #39)
    
    UFC-77 Fixed the 'View Account' page's back button to not redirect to the Home page.
    
    Changelog:
    
    - Fixed the 'View Account' page's back button to not redirect to the Home page.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit d5dd31e72d4464ea36e9716c77f4adce8d680647
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Fri Apr 5 21:45:00 2019 +0000

    Merged in UFC-76 (pull request #38)
    
    UFC-76 Created the layout for the EditAccountForm.
    
    Changelog:
    
    -Created the layout for the EditAccountForm.
    -Moved NewAccountFormLayout to a new component AccountFormLayout
    -Created basic layout for EditAccountForm.
    -Created the selectors, actions, and reducers for the EditAccountForm.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 7dd9b746d6cd42939230c8ebdf931d8c4e708778
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Apr 5 18:17:33 2019 +0000

    Merged in UFC-65 (pull request #37)
    
    UFC-65 Created the MaterialPercentInput and added it to the NewAccountForm.
    
    Changelog:
    
    - Created the MaterialPercentInput and added it to the NewAccountForm
    - Fixed the 'formatPercent' value formatter to format to three decimal places.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 261fde7084e8e46bf787a00819ff1577d7ba58e5
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Apr 5 17:22:52 2019 +0000

    Merged in UFC-75 (pull request #36)
    
    UFC-75 Added a reduced limit to the number of successful/failed database-backup jobs that are kept around.
    
    Changelog:
    
    - Added a reduced limit to the number of successful/failed database-backup jobs that are kept around.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 2e03ceef95b15a8221f98f74321524cdb9ff0def
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Apr 5 17:19:37 2019 +0000

    Merged in UFC-66 (pull request #34)
    
    UFC-66 Fixed the bug where store data is technically still available when trying to log in as a different user.
    
    Changelog:
    
    - Fixed the bug where store data is technically still available when trying to log in as a different user.
    - Users now get redirected back to the authenticated app when they try to access the login/signup page when already logged in.
    - Store data is now cleared on login (just like it is on logout).
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit c503b38f265c834c19785ea73ce688c4d8be93a5
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Fri Apr 5 17:17:46 2019 +0000

    Merged in UFC-74 (pull request #35)
    
    UFC-74 Implemented transaction type filtering.
    
    Changelog:
    
    - Implemented transaction type filtering.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 326194a2f17eaf990b77cd0b23b7dd9271bd7792
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Fri Apr 5 15:21:44 2019 +0000

    Merged in UFC-72 (pull request #33)
    
    UFC-72 - Implement the layout for the account type filter.
    
    Changelog:
    
    - Implement the layout for the account type filter.
    - Updated HorizontalRadioGroup to support the multiselect option.
    - Added transaction type picker to the TransactionsTableCard component.
    - Refactored HorizontalRadioGroup to HorizontalPicker.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 46d32aaa0b1f06f2a0178f801826887060c1a3e0
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Apr 5 14:33:16 2019 +0000

    Merged in UFC-69 (pull request #32)
    
    UFC-69 Modified the rows on the Accounts table to be clickable (to go to the View Account page).
    
    Changelog:
    
    - Modified the rows on the Accounts table to be clickable (to go to the View Account page).
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit fbb3d35dee036cf71316cd8ffe79ee0c69d91459
Author: Devin Sit <devin@devinsit.com>
Date:   Thu Apr 4 23:03:47 2019 +0000

    Merged in UFC-71 (pull request #31)
    
    UFC-71 Fixed the Recent Transactions table to actually have the most recent transactions, sorted correctly.
    
    Changelog:
    
    - Fixed the Recent Transactions table to actually have the most recent transactions, sorted correctly.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 38b500650e999e7270994bde985d3a7805b2e379
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Apr 3 15:52:47 2019 +0000

    Merged in UFC-67 (pull request #30)
    
    UFC-67 Wrote a whole bunch of tests to cover the latest pieces of NewTransactionForm-related logic.
    
    Changelog:
    
    - Wrote a whole bunch of tests to cover the latest pieces of NewTransactionForm-related logic.
    - Also refactored some of that logic to make it more testable.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 26032daeeaaec5b5f8892c36cf8fa94031265e46
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Apr 2 14:30:55 2019 +0000

    Merged in UFC-73 (pull request #29)
    
    UFC-73 Setup a cronjob service for handling database backups to a nearline storage bucket.
    
    Changelog:
    
    - Setup a cronjob service for handling database backups to a nearline storage bucket.
    - Fixed the cloudbuild trigger terraform config to ignore the Slack webhook substitution.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit a0accfcf86e2f316ff2ecece789ef6532d102adb
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 25 22:56:36 2019 +0000

    Merged in UFC-63 (pull request #27)
    
    UFC-63 Made the NewTransactionForm (and NewButton transaction options) functional.
    
    Changelog:
    
    - Made the NewTransactionForm (and NewButton transaction options) functional.
    - Fixed a styling issue with the SidebarForm error message.
    - Fixed how 'Transfer' type transactions are represented in the creation form.
    - Fixed a sorting issue with Transactions Table card.
    - Fixed the User Avatar dropdown so that it doesn't extend off the page.
    - Fixed the min width of the 'Type' column of the Transactions Table so that the sort indicator actually shows up.
    - Improved the date sorting of the Transactions Table so that it sorts first by 'date' and then actual 'createdAt' time.
    - Improved Account/Transaction creation validation.
    - Buttons now have outlines (back) for easier keyboard navigation.
    - Added testing back to the frontend CI process, cause it somehow disappeared.
    - Modified 'useInput' to handle clearing to initial value and non-event object values.
    - Modified 'useOutsideCloseable' to close things on blur (i.e. the date picker and the dropdowns).
    - Modified Account and Transaction creation to populate all required values client side (i.e. ID, createdAt, etc).
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 33f8e82c2fe9af93426d47d79a3c41e151bcef9e
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 25 03:00:53 2019 +0000

    Merged in UFC-61 (pull request #26)
    
    UFC-61 Created the basic layout for the 'NewTransactionForm'.
    
    Changelog:
    
    - Created the basic layout for the 'NewTransactionForm'.
    - Modified the date formatter to display dates outside of the current year with the format 'date month, year'.
    - Added the layout for the different 'New Transaction' options to the NewButton dropdown.
    - Refactored out a SidebarForm component that forms the base layout for the NewAccountForm and NewTransactionForm.
    - Modified the BackgroundBlur to be get its visibility state from the store and to render separately from the sidebar forms.
    - Created AccountTypePicker and TransactionTypePicker components from the HorizontalRadioGroup.
    - Removed the throttling aspect of the `useScrollPosition` hook, since it was causing strange behaviour in different versions of Chrome.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 7b95ba4b7e1ea284be81bbda400ca9b57cff27e4
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Fri Mar 22 22:10:11 2019 +0000

    Merged in UFC-56 (pull request #23)
    
    Changelog:
    
    - Used show/hide instead of setVisible(t/f) for newAccountForm.
    - Created the Redux actions/reducers/selectors for Accounts.
    - Created the sagas for account creation.
    - Added middleware to include userId in request data on the backend.
    - Moved account form visibility dispatch, and input validation to the saga.
    - Added Devin's MoneyInput.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 48f8b2d1f0dfd84d0af80ac60bd341bbb8e59793
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Mar 22 17:54:44 2019 +0000

    Merged in UFC-62 (pull request #25)
    
    UFC-62 Removed the 'model storage' SSD from Terraform infra.
    
    Changelog:
    
    - Removed the 'model storage' SSD from Terraform infra.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 0f02d886f21512d8c8bdfec6ee192907da204a79
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Mar 22 16:42:05 2019 +0000

    Merged in UFC-64 (pull request #24)
    
    UFC-64 Wrote a basic README detailing how to get started developing and the overall code structure/tooling.
    
    Changelog:
    
    - Filled out the README with some development process and code structure information.
    - Added root Make commands for running linting/tests locally on each service.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 316fd22673a47fc171ac9ce4ac3a39cb8bf4c91d
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 18 18:46:32 2019 +0000

    Merged in UFC-55 (pull request #22)
    
    UFC-55 Fixed the NewAccountForm (and blur) to be styled correctly as the user scrolls the page.
    
    Changelog:
    
    - Fixed the NewAccountForm (and blur) to be styled correctly as the user scrolls the page.
    - Refactored a whole bunch of Sass, mostly relating to the various account/transaction types and their color mappings.
    - (totally unrelated) Improved the explanation for why the frontend Feathers bindServices is needed.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit df363396e707c01c0c385d0e5daea87bf55d9727
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Mar 18 15:14:17 2019 +0000

    Merged in UFC-60 (pull request #21)
    
    UFC-60 Connected the 'View Account' page to the store.
    
    Changelog:
    
    - Connected the 'View Account' page to the store.
    - Modified the 'Accounts' page tables to have functional 'View' buttons.
    - Fixed a content padding issue with the 'View Account' page.
    - Modified the 'View Account' page to handle the 'invalid' account state.
    - Created an IconButton component to wrap SVG icons that act as buttons with a hover background state.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 77472ad100f6936019f569a8c307e3a828749580
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Mar 16 17:24:10 2019 +0000

    Merged in UFC-59 (pull request #20)
    
    UFC-59 Created the layout for the 'View Account' page.
    
    Changelog:
    
    - Created the layout for the 'View Account' page.
    - Cranked the default border radius up to account for fully curving larger objects.
    - Modified the right-slide-transition to start off more offscreen to compensate for the dropshadow sticking out.
    - Changed all 'span's to take on the font of its parent (by default).
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 75172d85df683f31d60a1a11681db9639fb79f25
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Fri Mar 15 13:48:35 2019 +0000

    Merged in UFC-54 (pull request #14)
    
    UFC-54 Create the Redux actions/reducers/selectors for NewAccountForm visibility.
    
    Changelog:
    
    - Created UI slice.
    - Implemented newAccountForm toggling using the UI slice.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit a12bc50628d3de663bec19ef98a056da79cce278
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Mar 15 12:37:51 2019 +0000

    Merged in UFC-58 (pull request #19)
    
    UFC-58 Connected the 'Home' page to the Redux store.
    
    Changelog:
    
    - Connected the 'Home' page to the Redux store.
    - Modified the NetWorth component to handle positive/negative value stylings.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 34037d95fa222d369729f084d52cfd092470dd39
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Mar 15 12:33:52 2019 +0000

    Merged in UFC-57 (pull request #18)
    
    UFC-57 Created the layout for the Home page (with dummy data).
    
    Changelog:
    
    - Created the layout for the Home page (with dummy data).
    - Made '1000px' the default for max content width.
    - Refactored the TransactionsTableCard into a standalone component (i.e. put it in the 'components' folder).
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 59ece9696cb6a3e35d02c14d30776637a4cf4184
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Mar 15 12:29:04 2019 +0000

    Merged in UFC-53 (pull request #17)
    
    UFC-53 Modified the 'Accounts' page to show accurante account balances based on transaction amounts.
    
    Changelog:
    
    - Modified the 'Accounts' page to show accurante account balances based on transaction amounts.
    - Created domain model classes on the frontend for Account and Transaction (for storing data schema and domain logic).
    - Changed the 'getTransactionsWithAccountNames' selector to 'getTransactionsWithAccounts' so that the whole account object is passed to the TransactionsTableCard.
    - Moved the sagas out into their own folder to remove some circular dependencies that had developed between them, the slices, and the store rootX files.
    - Changed out the Debt and Transfer icons.
    - Fixed the 'formatMoney' value formatter to handle negative values.
    - Wrote tests for the various existing pieces of domain logic (value formatters, model logic, selectors, etc).
    - Added running tests as part of the frontend CI process.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 5ade51fca5694e89e264cc70fcd9cb8f4934908e
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Mar 15 12:24:23 2019 +0000

    Merged in UFC-52 (pull request #16)
    
    UFC-52 Setup the Redux store to handle transactions and connected the Transactions page.
    
    Changelog:
    
    - Setup the Redux store to handle transactions and connected the Transactions page.
    - Modified the backend 'accounts' service to include Transactions as part of the 'find' method.
    - Added a prop to TableCard for customizing the empty message.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 0799507066a3e16fd436874c1820718dc657e500
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Mar 13 02:31:57 2019 +0000

    Merged in UFC-50 (pull request #15)
    
    UFC-50 Created the basic layout for the Transactions page.
    
    Changelog:
    
    - Created the basic layout for the Transactions page.
    - Made the hovered row of the TableCard change the text color to slightly darker.
    - Fixed a height issue with the TableCard cells where characters like 'g' and 'q' would be cut off.
    - Created a mixin for handling changing the fill (color) of the SVG icons.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 12ee66fc7ba080de778a85353e7fa79fe23717da
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Fri Mar 8 18:09:12 2019 +0000

    Merged in UFC-41 (pull request #13)
    
    UFC-41 Created layout for the NewAccountForm.
    
    Changelog:
    
    - Created HorizontalRadioGroup component.
    - Created AddAccount form.
    - Separated FormError into its own component.
    - Added right slide transition.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 402812628e6d81fbdd2157fd4e30dacc92270a2b
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Mar 5 17:27:56 2019 +0000

    Merged in UFC-51 (pull request #12)
    
    UFC-51 Created a seeder for creating a default set of transactions for the test user.
    
    Changelog:
    
    - Created a seeder for creating a default set of transactions for the test user.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit ab6d750531e20499c9d2bc16a0ed5d903f5e1cae
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Mar 5 17:16:06 2019 +0000

    Merged in UFC-49 (pull request #11)
    
    UFC-49 Setup the Redux store to pull in the user's account information and connected the 'Accounts' page.
    
    Changelog:
    
    - Setup the Redux store to pull in the user's account information and connected the 'Accounts' page.
    - Brought in redux-persist for handling persistence of the user/accounts state.
    - Fixed up the styling for the TableCard's 'empty' state.
    - Created sagas for handling 'app boot' logic (i.e. when user logs in or refreshes the page while logged in).
    - Modified the root reducer to reset all store state when the user logs out.
    - Fixed a minor styling issue with the Dropdown component where its low z-index caused it to render behind elements (like TableCard).
    - Modified the 'watchRequestSaga' from 'createRequestSlice' to take in an option to make the saga non-cancellable on route changes.
    - Fixed one of the css reset properties to use 'Nunito' instead of 'Roboto' as the default font.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit d3adadc8d77c2f84e384a43c23892d697fb4fc14
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Mar 3 16:19:06 2019 +0000

    Merged in UFC-48 (pull request #10)
    
    UFC-48 Created the basic layout for the 'Accounts' page.
    
    Changelog:
    
    - Created the basic layout for the 'Accounts' page (mocked out with dummy data).
    - Brought in the 'react-table' package for handling the bulk of the table functionality.
    - Heavily re-styled 'react-table' to meet our overall design goals.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 2cb58bd846aa903ab9c663021048a952e1537b05
Author: Devin Sit <devin@devinsit.com>
Date:   Wed Feb 27 18:49:02 2019 +0000

    Merged in UFC-46 (pull request #9)
    
    UFC-46 Implemented the HeaderNav component and registered the Home, Accounts, and Transactions app routes.
    
    Changelog:
    
    - Implemented the HeaderNav component and registered the Home, Accounts, and Transactions app routes.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 10ebe26fd8b75b3c6e30925bb92d7eb07fc8f2a1
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 26 16:35:20 2019 +0000

    Merged in UFC-47 (pull request #8)
    
    UFC-47 Created backend seeders for creating a default set of users + accounts.
    
    Changelog:
    
    - Created backend seeders for creating a default set of users + accounts.
    - Modified the auth forms to show an error message when a network error is hit (e.g. when backend is down).
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit b8d5a5090db3dae73891630aca4e009ff895756a
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 26 15:00:43 2019 +0000

    Merged in UFC-44 (pull request #7)
    
    UFC-44 Setup the basic backend database models and services (i.e. for accounts and transactions).
    
    Changelog:
    
    - Setup the basic backend database models and services (i.e. for accounts and transactions).
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 4c194f042192aac39a71bb07c120098c041828f8
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Feb 25 00:35:18 2019 +0000

    Merged in UFC-45 (pull request #6)
    
    UFC-45 Implemented the Logout functionality.
    
    Changelog:
    
    - Implemented the Logout functionality (that is, the UserAvatar + dropdown).
    - Refactored the whole 'outside click' functionality into a 'useOutsideClickable' hook.
    - Refactored some other components out into their own files.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 18b0d66044895411574775bba864d9ba9ee3c2be
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Feb 22 23:16:29 2019 +0000

    Merged in UFC-42 (pull request #5)
    
    UFC-42 Implemented the Login form.
    
    Changelog:
    
    - Implemented the Login form.
    - Refactored the SignUp form into an AuthForm component to share between SignUp/Login.
    - Refactored the LoadingButton into its own component.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 4934685f73cc8936575e3161509b79a5ab49cf64
Author: Devin Sit <devin@devinsit.com>
Date:   Fri Feb 22 20:41:54 2019 +0000

    Merged in UFC-40 (pull request #4)
    
    UFC-40 Implemented the end-to-end sign up flow by connecting the Sign Up form to the Redux store.
    
    Changelog:
    
    - Implemented the end-to-end sign up flow by connecting the Sign Up form to the Redux store.
    - Created the store slices for 'user' and 'auth'.
    - Setup the frontend with feathers for interacting with the backend API.
    - Setup the frontend with Redux Saga and created a 'request slice' helper.
    - Created the sagas to fulfill the business logic of sign up/login.
    - Setup the authenticated App route for when the user logs in.
    - Integrated the Header and NewButton into the authenticated App route.
    - Added loading/error states to the SignUp form.
    - Added a proper logging middleware to the backend for (most notably) logging request response times.
    - Added a Make command for inspecting the local database.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 9b00df5d355a278f56eec1d7fd3ba89f3e3b7fc4
Author: Dominic Roy-Stang <dominicroystang@gmail.com>
Date:   Thu Feb 21 20:20:13 2019 +0000

    Merged in UFC-38 (pull request #3)
    
    UFC-38 Create Header and NewButton with a dropdown that has an 'Account' option.
    
    Changelog:
    
    - Created header component.
    - Added test (Dom) scene.
    - Created talkbubble component.
    - Created Add button.
    
    Approved-by: Devin Sit <devin@devinsit.com>

commit 7a70ef418e6d26dd9f0c4a779390671405a2acaa
Author: Devin Sit <devin@devinsit.com>
Date:   Mon Feb 18 03:28:56 2019 +0000

    Merged in UFC-39 (pull request #2)
    
    UFC-39 Created the basic landing page and Sign Up form layouts.
    
    Changelog:
    
    - Created the basic landing page and Sign Up form layouts.
    - Added all of the colors from the design system.
    - Brought in the fonts for self-serving and set them up in Sass.
    - Setup the base Redux store and React Router.
    - Brought in plop for generating scenes and store states.
    - Brought in the MaterialInput component.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit 4e94da00b6826dec97e0df89a885111a068dad05
Author: Devin Sit <devin@devinsit.com>
Date:   Sun Feb 17 18:36:52 2019 +0000

    Merged in UFC-37 (pull request #1)
    
    UFC-37 Setup the backend to handle user authentication.
    
    Changelog:
    
    - Setup the backend to handle user authentication.
    - Brought in Feathers to the backend.
    - Created the users service + db table + migration.
    - Added running tests as part of the backend's CI process.
    
    Approved-by: Dominic Roy-Stang <dominicroystang@gmail.com>

commit cfd3175605c4b2d18bbe8c61e24d67a92be6367f
Author: Devin Sit <devin@devinsit.com>
Date:   Sat Feb 16 16:42:11 2019 -0500

    Upgraded the cluster to n1-standard-1 nodes to get around the (eventual) max persistent disk per instance issue.

commit 2c6fa5778e42a047320036119c271c97c0b99a3c
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 12 22:53:08 2019 -0500

    Added missing db folders for the backend.

commit 63f47f8caa16ecabfe4d558329b8513b2d2f3445
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 12 22:17:03 2019 -0500

    Fixed typo in deployment.yaml Helm template: had to quote the external port env value.

commit 1622a65ffc5aeb17c4d2075849cee8f711c3d527
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 12 22:10:25 2019 -0500

    Added missing dotfiles for the frontend service.

commit 5ffe19386d2e3a94f1d539c656ad0a7afb8062fc
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 12 21:27:30 2019 -0500

    Fixed wildcard-certificate to not have a redundant line for backend.ufincs.com.

commit 98f1135d99325c9f826d1b3b15357b9c5312f881
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 12 21:19:35 2019 -0500

    Deployed infra with Kubails; updated nginx-ingress-controller manifest with static IP.

commit a7bfaacc486a941c57f176498c44bb61eb8f0ca1
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 12 20:45:43 2019 -0500

    Updated Terraform cicd module to use 'project_id' instead of 'project' for the cloudbuild trigger since it seems the syntax changed with v2 of the google provider.

commit b272252c6fcf0c46511e0dfa3914490ca6242ec5
Author: Devin Sit <devin@devinsit.com>
Date:   Tue Feb 12 20:21:56 2019 -0500

    Initial commit. Scaffolded from Kubails.
